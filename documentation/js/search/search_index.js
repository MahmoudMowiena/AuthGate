var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.341,1,2.466]],["body/modules/AppModule.html",[0,2.305,1,5.028,2,2.089,3,2.089,4,2.386,5,2.386,6,2.089,7,3.339,8,2.386,9,3.767,10,3.767,11,3.71,12,0.022,13,4.317,14,3.465,15,3.465,16,3.465,17,3.036,18,2.228,19,2.386,20,0.265,21,0.204,22,0.234,23,4.41,24,3.265,25,0.428,26,0.707,27,2.776,28,1.394,29,4.41,30,4.41,31,4.41,32,4.41,33,1.963,34,4.41,35,4.41,36,2.566,37,4.41,38,4.41,39,4.41,40,1.557,41,4.41,42,1.743,43,0.265,44,0.154,45,2.228,46,1.647,47,1.848,48,1.647,49,0.016,50,0.016]],["title/controllers/AuthController.html",[51,1.505,52,2.466]],["body/controllers/AuthController.html",[12,0.022,20,0.13,21,0.101,22,0.115,25,0.369,26,0.348,42,0.858,43,0.13,44,0.076,46,1.556,47,1.747,48,1.556,49,0.01,50,0.01,51,0.91,52,2.327,53,1.855,54,1.367,55,1.855,56,0.162,57,0.862,58,2.03,59,3.388,60,3.388,61,3.388,62,3.388,63,3.388,64,3.388,65,4.167,66,4.709,67,4.709,68,4.709,69,3.56,70,3.388,71,2.895,72,2.895,73,2.895,74,2.171,75,4.023,76,0.541,77,1.77,78,2.171,79,0.698,80,2.171,81,1.617,82,0.621,83,0.897,84,5.411,85,1.676,86,2.273,87,2.171,88,2.171,89,2.171,90,2.171,91,6.448,92,4.66,93,2.171,94,2.171,95,6.009,96,2.171,97,2.171,98,2.171,99,2.171,100,2.171,101,2.171,102,2.171,103,2.171,104,2.171,105,2.171,106,0.84,107,2.23,108,3.388,109,2.171,110,1.605,111,2.171,112,2.171,113,2.171,114,2.171,115,2.171,116,2.171,117,1.855,118,2.964,119,2.964,120,4.709,121,1.42,122,2.171,123,3.164,124,1.974,125,2.171,126,3.388,127,2.171,128,1.014,129,2.171,130,3.233,131,2.171,132,2.171,133,3.388,134,1.855,135,2.379,136,2.171,137,2.171,138,2.895,139,1.855,140,2.23,141,2.171,142,2.171,143,2.895,144,1.367,145,1.175,146,2.171,147,1.646,148,1.263,149,1.263,150,2.171,151,1.491,152,2.171,153,1.367,154,2.171,155,1.855,156,1.855,157,1.367,158,2.171,159,1.367,160,1.175,161,1.491,162,2.171,163,0.65,164,1.41,165,1.028,166,1.855,167,2.171,168,5.107,169,2.171,170,2.171,171,1.614,172,2.171,173,2.171,174,2.171,175,2.171,176,2.171,177,4.709,178,2.171,179,2.171,180,2.171,181,2.171,182,2.171,183,2.171,184,2.171,185,2.171,186,4.709,187,1.444,188,2.57,189,1.692,190,3.388,191,4.709,192,3.388,193,2.171,194,3.388,195,3.388,196,3.388,197,1.318,198,2.171,199,2.171,200,2.171,201,2.171,202,2.171,203,3.388,204,2.171,205,2.171,206,0.858,207,0.686,208,1.855,209,0.766,210,2.171,211,2.171,212,3.388,213,2.171,214,2.171,215,4.167,216,3.56,217,1.318,218,2.171,219,4.167,220,2.171,221,4.167,222,2.171,223,3.388,224,2.171,225,2.171,226,2.171,227,2.171,228,2.171,229,3.388,230,2.171,231,2.171,232,2.171,233,2.171,234,2.171,235,2.171,236,2.171,237,2.171,238,2.171,239,2.171,240,1.855,241,1.855,242,2.171]],["title/modules/AuthModule.html",[0,1.341,11,1.943]],["body/modules/AuthModule.html",[0,2.199,2,1.893,3,1.893,4,2.163,5,2.163,6,1.893,7,3.186,8,3.186,11,3.997,12,0.022,14,3.375,15,3.375,16,3.375,17,2.849,18,2.02,19,2.163,20,0.24,21,0.185,22,0.212,24,3.064,25,0.43,26,0.641,40,1.411,42,2.082,43,0.24,44,0.14,48,2.673,49,0.015,50,0.015,52,4.044,153,2.516,243,3.415,244,3.415,245,3.998,246,3.415,247,3.375,248,4.204,249,4.204,250,4.204,251,3.998,252,3.998,253,2.02,254,1.893,255,2.745,256,3.998,257,3.032,258,3.032,259,3.032,260,3.998,261,3.998,262,3.032,263,3.998,264,3.998,265,3.998,266,2.163,267,2.516,268,3.998,269,3.415,270,3.998]],["title/injectables/AuthService.html",[48,1.341,271,0.576]],["body/injectables/AuthService.html",[12,0.022,18,1.208,20,0.085,21,0.066,22,0.075,25,0.357,26,0.227,43,0.085,44,0.049,46,1.653,47,1.976,48,0.892,49,0.007,50,0.007,56,0.105,57,0.608,58,1.946,69,2.652,71,2.652,72,2.042,73,2.042,76,0.471,79,0.608,81,1.461,82,0.647,83,0.81,85,1.43,86,1.382,106,0.809,117,1.208,118,1.954,119,1.954,121,2.493,123,1.679,124,2.592,128,1.972,134,2.042,135,1.844,138,2.652,139,2.042,140,1.932,143,2.652,145,0.765,149,0.823,163,0.716,164,1.093,171,1.433,187,1.491,189,2.035,197,0.981,206,2.271,207,1.908,208,1.208,209,0.499,216,3.118,217,2.273,247,2.382,253,0.715,266,1.293,269,1.208,271,0.383,272,0.499,273,1.208,274,3.104,275,2.39,276,2.39,277,3.104,278,3.104,279,2.39,280,2.39,281,2.39,282,1.414,283,2.743,284,1.414,285,1.414,286,2.506,287,3.118,288,1.414,289,2.504,290,1.414,291,2.39,292,1.414,293,1.414,294,1.414,295,2.39,296,1.414,297,1.414,298,1.414,299,1.414,300,1.414,301,1.414,302,1.414,303,2.39,304,1.414,305,3.04,306,2.39,307,1.414,308,2.39,309,1.414,310,0.89,311,0.765,312,1.208,313,1.208,314,1.641,315,1.414,316,1.641,317,1.414,318,1.208,319,1.208,320,1.414,321,1.641,322,2.042,323,1.414,324,1.414,325,1.208,326,1.569,327,0.971,328,1.293,329,1.072,330,0.971,331,1.414,332,3.649,333,2.652,334,1.208,335,1.414,336,2.207,337,2.39,338,1.414,339,1.208,340,2.297,341,3.649,342,1.414,343,4.047,344,4.357,345,2.557,346,3.094,347,3.649,348,1.844,349,4.714,350,1.932,351,4.079,352,1.749,353,4.408,354,4.079,355,2.787,356,4.427,357,1.816,358,0.823,359,1.414,360,0.823,361,1.414,362,0.971,363,3.104,364,3.248,365,2.39,366,1.504,367,2.042,368,1.812,369,1.641,370,1.504,371,2.768,372,4.079,373,5.948,374,2.39,375,1.414,376,1.414,377,1.414,378,2.042,379,2.39,380,2.042,381,1.414,382,1.414,383,1.414,384,1.414,385,0.971,386,1.414,387,2.354,388,1.208,389,1.812,390,1.414,391,1.812,392,0.715,393,2.39,394,1.414,395,2.39,396,1.414,397,1.414,398,2.39,399,1.414,400,1.414,401,1.414,402,1.414,403,1.414,404,1.414,405,1.414,406,1.414,407,1.414,408,3.104,409,2.042,410,1.208,411,1.414,412,0.971,413,1.97,414,1.812,415,1.208,416,1.208,417,1.132,418,1.414,419,2.39,420,3.649,421,3.485,422,3.118,423,1.414,424,1.072,425,1.414,426,1.414,427,1.414,428,0.823,429,0.971,430,2.042,431,2.042,432,1.414,433,3.104,434,1.414,435,1.504,436,2.39,437,2.042,438,1.414,439,1.414,440,2.39,441,1.504,442,1.414,443,2.123,444,2.652,445,2.652,446,2.652,447,1.414,448,1.414,449,1.293,450,2.042,451,1.414,452,1.414,453,1.414,454,1.072,455,1.414,456,1.414,457,2.39,458,1.414,459,2.39,460,1.414,461,2.39,462,2.39,463,1.414,464,2.39,465,1.414,466,1.414,467,1.414,468,1.414,469,1.414,470,1.414,471,1.414,472,1.414,473,1.414,474,1.414,475,1.414]],["title/guards/AuthenticationGuard.html",[151,2.466,476,2.724]],["body/guards/AuthenticationGuard.html",[12,0.022,20,0.234,21,0.18,22,0.207,25,0.372,26,0.624,40,1.374,43,0.234,44,0.136,49,0.015,50,0.015,56,0.29,57,1.315,58,1.88,76,0.544,79,0.655,81,1.575,82,0.605,83,0.873,85,1.478,106,0.792,123,3.587,124,2.596,149,3.857,151,3.553,160,2.106,163,1.165,164,1.985,171,1.561,187,1.334,189,1.549,206,2.298,207,1.837,253,1.967,254,1.843,266,2.106,267,2.45,271,0.829,283,3.857,312,2.937,340,3.257,449,3.144,477,3.892,478,3.325,479,6.194,480,5.174,481,3.553,482,3.892,483,3.892,484,5.174,485,5.291,486,3.892,487,3.325,488,5.174,489,3.892,490,5.174,491,3.892,492,2.951,493,2.672,494,2.672,495,3.325,496,3.892,497,2.614,498,3.892,499,3.892,500,2.45,501,2.672,502,1.539,503,2.672,504,3.892,505,3.892]],["title/injectables/EmailService.html",[247,1.815,271,0.576]],["body/injectables/EmailService.html",[12,0.021,20,0.272,21,0.209,22,0.24,25,0.375,26,0.725,36,2.63,43,0.272,44,0.158,49,0.016,50,0.016,55,3.862,56,0.337,57,1.449,58,1.77,76,0.512,79,0.661,81,1.449,82,0.557,83,0.804,85,1.149,106,0.879,124,2.389,163,1.353,164,1.869,189,1.353,217,1.429,247,2.88,271,0.914,272,1.596,494,3.104,506,3.862,507,1.616,508,6.244,509,5.7,510,3.428,511,4.739,512,5.7,513,5.7,514,6.556,515,6.556,516,4.52,517,5.7,518,4.87,519,4.52,520,4.52,521,3.862,522,4.52,523,4.52,524,4.52,525,4.52,526,1.894,527,5.7,528,4.52,529,4.52,530,4.52]],["title/injectables/FacebookAuthStrategy.html",[248,2.261,271,0.576]],["body/injectables/FacebookAuthStrategy.html",[12,0.022,20,0.239,21,0.185,22,0.212,25,0.39,26,0.639,36,2.318,43,0.239,44,0.139,48,2.541,49,0.015,50,0.015,56,0.297,57,1.336,58,1.667,76,0.431,79,0.556,81,1.336,82,0.611,83,0.741,85,1.013,86,1.773,106,0.82,107,1.887,110,1.887,128,1.573,159,2.508,163,1.573,164,1.573,165,2.489,171,1.07,187,1.266,189,1.193,217,1.26,248,3.308,271,0.842,272,1.406,305,4.742,312,2.655,367,5.023,413,1.773,417,1.887,421,5.023,422,4.489,430,3.404,431,3.404,437,3.404,443,2.318,444,3.404,445,3.404,446,3.404,454,4.459,510,3.021,511,4.582,526,1.67,531,3.404,532,3.608,533,4.459,534,4.459,535,3.701,536,3.984,537,3.021,538,4.459,539,5.879,540,4.037,541,3.984,542,3.985,543,3.021,544,2.736,545,3.021,546,3.984,547,3.984,548,3.984,549,3.984,550,3.021,551,3.984,552,3.984,553,2.736,554,3.984,555,3.404,556,3.984,557,2.318,558,3.984,559,3.984,560,3.984,561,3.984,562,3.984,563,3.984]],["title/injectables/GithubAuthStrategy.html",[249,2.261,271,0.576]],["body/injectables/GithubAuthStrategy.html",[12,0.021,20,0.25,21,0.193,22,0.221,25,0.413,26,0.667,36,2.421,43,0.25,44,0.145,46,2.374,48,2.567,49,0.015,50,0.015,56,0.31,57,1.374,58,1.703,76,0.443,79,0.572,81,1.374,82,0.528,83,0.762,85,1.058,86,1.852,106,0.83,107,1.97,110,1.97,159,2.619,163,1.618,164,1.903,165,3.011,171,1.117,187,0.896,189,1.246,206,1.645,207,1.315,217,2.01,249,3.403,253,2.102,271,0.867,272,1.469,283,4,305,4.721,312,2.732,417,1.97,424,4.554,510,3.155,511,4.637,532,3.712,533,3.155,534,3.155,535,3.403,537,4.099,538,4.554,542,3.155,543,3.155,544,2.857,545,3.155,550,3.155,564,3.554,565,4.618,566,4.554,567,4.16,568,4.16,569,4.16,570,4.16,571,4.16,572,4.16,573,4.16,574,4.16,575,4.16]],["title/injectables/GoogleAuthStrategy.html",[250,2.261,271,0.576]],["body/injectables/GoogleAuthStrategy.html",[12,0.021,20,0.262,21,0.202,22,0.232,25,0.402,26,0.699,36,2.537,43,0.262,44,0.152,48,2.553,49,0.016,50,0.016,56,0.325,57,1.417,58,1.741,76,0.457,79,0.59,81,1.417,82,0.544,83,0.785,85,1.109,86,1.941,106,0.84,107,2.065,110,2.065,128,1.306,159,2.745,163,1.668,164,1.668,165,2.639,171,1.171,187,0.939,189,1.306,206,1.724,207,1.379,217,1.941,250,3.507,271,0.893,272,1.539,305,4.833,312,2.816,417,2.065,511,4.773,532,3.826,533,3.307,534,3.307,535,3.507,537,4.226,538,4.657,542,3.307,543,3.307,544,2.995,545,3.307,550,3.307,565,4.76,576,3.726,577,5.246,578,4.361,579,4.361,580,4.361,581,3.726,582,4.361,583,4.361,584,4.361,585,4.361]],["title/classes/HttpExceptionFilter.html",[44,0.126,586,2.724]],["body/classes/HttpExceptionFilter.html",[12,0.021,20,0.29,21,0.224,22,0.256,25,0.357,26,0.774,43,0.29,44,0.169,49,0.017,50,0.017,56,0.36,57,1.51,76,0.396,79,0.511,81,1.227,82,0.471,83,0.68,85,1.227,92,4.503,149,3.455,160,2.611,187,1.445,493,4.077,500,3.046,502,1.908,521,5.494,586,4.503,587,1.526,588,5.073,589,4.123,590,6.431,591,5.938,592,5.089,593,6.71,594,4.826,595,4.826,596,4.826,597,4.826,598,4.826,599,4.826,600,4.826,601,4.826,602,4.077,603,4.826,604,4.826,605,4.123,606,2.286,607,4.826,608,4.826]],["title/injectables/ImageService.html",[33,1.598,271,0.576]],["body/injectables/ImageService.html",[12,0.022,20,0.279,21,0.215,22,0.246,25,0.409,26,0.743,33,2.578,43,0.279,44,0.162,46,1.731,49,0.017,50,0.017,56,0.346,57,1.473,58,1.791,76,0.38,79,0.613,81,1.179,82,0.453,83,0.653,85,1.179,86,2.063,106,0.853,160,3.133,163,1.891,171,1.555,187,0.998,189,1.388,217,1.466,271,0.928,272,1.637,313,3.961,330,3.183,345,2.063,352,2.23,413,2.811,502,2.497,526,1.943,609,3.961,610,5.791,611,4.636,612,5.791,613,3.976,614,4.636,615,3.516,616,4.636,617,4.392,618,4.636,619,4.636,620,4.636,621,4.636,622,4.636,623,4.636,624,4.636]],["title/injectables/IndexManagementService.html",[271,0.576,625,2.261]],["body/injectables/IndexManagementService.html",[12,0.022,20,0.247,21,0.19,22,0.218,25,0.38,26,0.658,28,1.297,40,2.375,43,0.247,44,0.143,49,0.015,50,0.015,56,0.306,57,1.362,58,1.907,76,0.337,79,0.631,81,1.043,82,0.401,83,0.578,85,1.362,140,2.537,163,1.228,164,1.228,189,2.052,206,2.358,217,1.297,271,0.859,272,1.448,330,2.817,435,2.582,441,2.582,443,2.387,493,2.817,497,3.014,500,2.825,502,2.66,625,3.372,626,3.505,627,6.323,628,6.727,629,3.505,630,3.98,631,4.102,632,4.102,633,4.102,634,2.582,635,1.622,636,2.817,637,4.102,638,4.102,639,4.102,640,5.095,641,5.964,642,4.102,643,4.102,644,5.964,645,3.47,646,4.095,647,5.095]],["title/controllers/PaypalController.html",[51,1.505,648,2.466]],["body/controllers/PaypalController.html",[12,0.021,20,0.274,21,0.212,22,0.243,25,0.345,26,0.732,42,1.804,43,0.274,44,0.16,49,0.016,50,0.016,51,1.913,54,2.873,56,0.34,57,1.458,58,1.962,76,0.374,77,1.54,79,0.607,81,1.16,82,0.446,83,0.643,85,1.458,86,2.552,106,0.77,144,2.873,148,2.655,165,2.161,171,1.54,187,1.235,189,1.717,413,2.552,494,3.134,602,3.938,648,3.938,649,3.899,650,3.899,651,4.899,652,5.621,653,3.899,654,5.735,655,5.735,656,4.564,657,4.349,658,5.735,659,5.358,660,4.564,661,3.134,662,3.649,663,3.899,664,4.564,665,4.564,666,4.564,667,4.564,668,4.564,669,4.564,670,4.564,671,3.899,672,4.564,673,4.564,674,4.564,675,4.564,676,4.564]],["title/modules/PaypalModule.html",[0,1.341,13,2.261]],["body/modules/PaypalModule.html",[0,2.386,2,2.253,3,2.253,4,2.574,5,2.574,6,2.253,7,3.457,8,2.574,12,0.022,13,4.506,17,3.184,18,2.404,19,2.574,20,0.286,21,0.221,22,0.253,24,2.768,25,0.42,26,0.763,27,2.995,28,1.504,42,2.327,43,0.286,44,0.166,49,0.017,50,0.017,82,0.465,648,4.388,662,4.067,663,4.065,677,4.065,678,4.065,679,4.067,680,4.758,681,4.758,682,4.042,683,2.995,684,4.065,685,3.608,686,4.065,687,3.267,688,4.758,689,2.253]],["title/injectables/PaypalService.html",[271,0.576,662,2.09]],["body/injectables/PaypalService.html",[12,0.022,20,0.23,21,0.177,22,0.203,25,0.37,26,0.614,43,0.23,44,0.134,49,0.015,50,0.015,56,0.285,57,1.301,58,1.871,76,0.473,79,0.651,81,1.301,82,0.5,83,0.721,85,1.301,86,2.278,106,0.708,149,2.977,163,1.146,164,1.726,171,1.374,187,1.381,189,1.726,207,2.027,271,0.82,272,1.351,494,2.629,507,1.451,602,2.629,650,4.372,651,4.372,652,5.257,653,4.372,657,3.881,659,3.271,662,2.977,671,4.372,679,3.839,686,3.271,690,3.271,691,5.764,692,3.828,693,5.117,694,3.828,695,3.828,696,5.117,697,4.372,698,3.881,699,4.372,700,6.413,701,3.828,702,3.271,703,3.828,704,5.117,705,5.117,706,3.828,707,3.828,708,3.828,709,3.828,710,3.828,711,5.117,712,3.828,713,3.828,714,4.372,715,3.828,716,3.828,717,2.629,718,3.828,719,2.903,720,3.828,721,3.828,722,3.828,723,3.828,724,3.828,725,3.828,726,4.372,727,3.828,728,3.828,729,3.828,730,5.117,731,3.828,732,3.828,733,3.828,734,3.828,735,3.828,736,3.828,737,3.271,738,3.828,739,3.271,740,3.828,741,3.271,742,3.828,743,3.828,744,3.828,745,3.828]],["title/classes/PaypalTransaction.html",[44,0.126,683,2.261]],["body/classes/PaypalTransaction.html",[12,0.022,20,0.243,21,0.187,22,0.215,25,0.319,28,1.277,40,2.557,43,0.356,44,0.141,49,0.015,50,0.015,56,0.301,76,0.58,77,1.86,79,0.733,106,0.869,187,0.87,348,2.991,392,2.679,449,2.868,507,1.503,557,2.35,587,1.277,602,4.064,635,1.597,657,4.489,682,2.773,683,3.726,689,2.511,714,5.057,737,5.057,739,5.057,741,5.057,746,2.773,747,5.057,748,3.726,749,2.542,750,3.641,751,4.039,752,2.679,753,4.6,754,4.039,755,2.542,756,4.039,757,4.039,758,4.039,759,4.039,760,4.039,761,4.039,762,4.41,763,2.542,764,3.641,765,3.063,766,3.624,767,2.185,768,4.039,769,3.45]],["title/injectables/PaypalTransactionService.html",[271,0.576,679,2.09]],["body/injectables/PaypalTransactionService.html",[12,0.021,20,0.289,21,0.223,22,0.256,25,0.403,26,0.772,28,1.523,43,0.289,44,0.168,49,0.017,50,0.017,56,0.359,57,1.508,58,1.822,76,0.487,79,0.628,81,1.508,82,0.579,83,0.836,85,1.225,124,2.485,163,1.775,164,1.442,171,1.293,187,1.037,207,1.523,271,0.951,272,1.7,617,3.652,630,4.221,634,3.032,635,1.904,679,3.45,683,3.032,684,4.115,685,4.873,765,3.652,770,4.115,771,5.93,772,4.816,773,4.816,774,5.93,775,5.93,776,4.816,777,4.816,778,4.816,779,4.816,780,4.816]],["title/classes/Project.html",[44,0.126,197,1.135]],["body/classes/Project.html",[12,0.021,20,0.252,21,0.194,22,0.223,25,0.362,28,1.325,40,2.431,43,0.326,44,0.19,49,0.016,50,0.016,56,0.312,76,0.565,77,1.817,79,0.716,82,0.588,106,0.858,107,2.853,110,2.853,187,0.902,197,1.717,209,2.127,348,3.045,417,2.853,449,2.267,507,1.54,526,2.276,532,2.877,557,2.438,587,1.325,635,2.147,646,3.729,689,2.572,748,3.418,749,2.637,750,3.729,753,3.729,755,2.637,762,4.335,763,2.637,764,3.729,766,2.938,767,2.267,781,3.177,782,4.19,783,4.19,784,4.19,785,5.43,786,4.19,787,4.19,788,2.572,789,4.19,790,4.19,791,4.19,792,2.466,793,3.506,794,4.639,795,3.045,796,1.479,797,4.19,798,3.177,799,2.637,800,3.58]],["title/injectables/ProjectService.html",[45,1.815,271,0.576]],["body/injectables/ProjectService.html",[12,0.022,20,0.145,21,0.112,22,0.128,25,0.353,26,0.387,28,0.762,40,1.571,43,0.145,44,0.084,45,1.857,49,0.011,50,0.011,56,0.18,57,0.934,58,1.949,76,0.482,79,0.621,81,1.493,82,0.606,83,0.827,85,1.435,106,0.876,107,1.74,110,1.74,124,2.733,135,2.249,163,1.1,164,1.1,171,1.516,187,1.46,189,1.925,197,2.186,206,2.681,207,2.16,271,0.589,272,0.851,289,2.515,310,2.313,311,2.899,322,3.139,328,3.354,329,1.829,336,3.176,345,1.073,357,3.019,378,2.06,388,2.06,409,2.06,413,3.019,415,2.06,417,1.74,428,2.896,497,2.515,500,2.357,502,1.968,526,1.011,630,3.695,634,1.518,635,0.953,645,1.403,801,2.06,802,3.285,803,3.674,804,3.803,805,2.59,806,2.896,807,2.411,808,2.411,809,2.06,810,4.691,811,2.411,812,3.803,813,3.139,814,2.411,815,3.674,816,2.411,817,3.674,818,2.411,819,2.138,820,2.411,821,1.656,822,4.253,823,2.411,824,1.518,825,2.06,826,2.411,827,2.06,828,5.358,829,4.253,830,2.411,831,2.411,832,2.411,833,2.411,834,4.253,835,3.139,836,2.411,837,4.253,838,2.411,839,4.978,840,2.411,841,1.74,842,2.411,843,1.829,844,2.06,845,1.829,846,5.358,847,4.978,848,3.674,849,2.411,850,2.411,851,3.139,852,2.411,853,3.674,854,3.139,855,2.786,856,2.411,857,2.06,858,2.06]],["title/controllers/ProjectsController.html",[51,1.505,859,2.466]],["body/controllers/ProjectsController.html",[12,0.022,20,0.142,21,0.11,22,0.126,25,0.362,26,0.38,42,0.936,43,0.142,44,0.083,45,2.224,46,1.353,47,1.519,49,0.01,50,0.01,51,0.992,54,1.49,56,0.176,57,0.921,58,1.999,76,0.494,77,1.566,79,0.637,81,1.53,82,0.588,83,0.848,85,1.53,106,0.887,123,1.96,124,2.833,144,2.771,148,2.561,157,1.49,161,1.626,163,0.709,164,1.746,165,2.335,171,1.656,187,1.493,189,2.075,197,1.392,206,2.101,207,1.68,217,1.772,253,1.196,254,1.121,255,1.626,266,1.281,267,1.49,283,2.561,286,3.022,310,1.49,311,1.281,312,1.196,328,3.156,336,2.381,340,3.787,345,1.613,346,3.338,357,2.495,362,3.022,385,1.626,412,2.488,413,2.849,428,2.561,481,2.488,497,1.196,500,1.121,501,1.626,502,0.936,503,1.626,566,1.796,645,2.108,661,1.626,802,1.378,804,3.096,805,2.869,806,2.561,809,2.023,810,4.235,812,3.76,819,1.378,821,1.626,822,4.212,824,1.49,835,4.212,841,1.716,859,2.488,860,2.023,861,4.401,862,4.401,863,2.771,864,5.164,865,2.368,866,2.368,867,2.748,868,2.368,869,2.368,870,2.368,871,2.368,872,3.623,873,2.368,874,1.49,875,2.748,876,2.368,877,2.748,878,2.368,879,3.623,880,2.368,881,2.748,882,2.368,883,1.796,884,1.626,885,2.368,886,1.796,887,2.368,888,2.023,889,4.251,890,4.251,891,4.03,892,3.623,893,2.368,894,1.796,895,2.748,896,2.368,897,2.368,898,2.368,899,2.368,900,2.368,901,2.368,902,2.368,903,3.338,904,2.368,905,3.096,906,3.623,907,2.748,908,3.623,909,2.368,910,2.368,911,2.368,912,2.368,913,3.623,914,1.796]],["title/modules/ProjectsModule.html",[0,1.341,14,1.815]],["body/modules/ProjectsModule.html",[0,2.317,2,2.112,3,2.112,4,2.413,5,2.413,6,2.112,7,3.357,8,3.357,11,2.413,12,0.022,14,3.53,15,2.856,16,2.856,17,3.058,18,2.254,19,2.413,20,0.268,21,0.207,22,0.237,24,2.595,25,0.435,26,0.715,27,3.558,28,1.41,42,2.235,43,0.268,44,0.156,45,3.675,46,1.665,49,0.016,50,0.016,82,0.436,140,2.112,157,2.807,197,1.41,257,3.382,258,3.382,319,3.81,328,2.413,329,3.382,687,3.063,689,2.112,799,3.558,824,2.807,859,4.261,886,3.382,915,3.81,916,3.81,917,3.81,918,4.46,919,4.706,920,4.46,921,3.81,922,4.46]],["title/injectables/ResponseInterceptor.html",[271,0.576,923,2.724]],["body/injectables/ResponseInterceptor.html",[12,0.022,20,0.242,21,0.187,22,0.214,25,0.355,26,0.646,43,0.242,44,0.141,49,0.015,50,0.015,56,0.301,57,1.347,76,0.434,79,0.56,81,1.347,82,0.517,83,0.747,85,1.347,92,3.058,106,0.651,148,2.346,149,3.081,164,1.771,171,1.798,187,1.352,209,1.423,271,0.849,272,1.423,485,5.83,487,5.573,493,2.769,495,3.445,502,2.338,553,4.061,605,5.72,606,1.91,617,3.058,752,2.988,767,2.181,802,2.346,884,2.769,923,4.016,924,3.445,925,5.296,926,5.296,927,5.296,928,4.032,929,5.296,930,6.28,931,4.032,932,5.914,933,5.296,934,3.445,935,4.032,936,4.032,937,4.032,938,4.032,939,4.032,940,4.032,941,4.032,942,5.296,943,4.032,944,4.032,945,6.28,946,5.914,947,5.914,948,5.365,949,5.296,950,4.032,951,6.523,952,4.032,953,4.032,954,3.058,955,4.032]],["title/classes/SignInRequest.html",[44,0.126,130,2.466]],["body/classes/SignInRequest.html",[12,0.021,20,0.315,21,0.243,22,0.278,25,0.315,43,0.315,44,0.218,49,0.018,50,0.018,56,0.39,76,0.512,77,1.675,79,0.66,106,0.847,121,2.792,128,1.995,130,4.283,507,1.768,587,1.655,792,2.488,796,1.848,956,4.472,957,3.367,958,5.234,959,5.234]],["title/classes/SignInTenantResponse.html",[44,0.126,316,2.466]],["body/classes/SignInTenantResponse.html",[12,0.021,20,0.262,21,0.202,22,0.231,25,0.262,43,0.262,44,0.195,49,0.016,50,0.016,56,0.324,76,0.577,77,1.889,79,0.744,82,0.599,83,0.992,106,0.904,128,1.837,316,3.822,345,2.73,348,3.1,350,2.906,352,2.166,358,3.57,360,3.57,507,1.578,587,1.376,792,2.692,795,3.377,796,1.537,957,3.1,960,3.719,961,4.353,962,3.762,963,4.353,964,4.353,965,4.353,966,4.353,967,4.353,968,4.353,969,4.353]],["title/classes/SignInUserResponse.html",[44,0.126,314,2.466]],["body/classes/SignInUserResponse.html",[12,0.021,20,0.266,21,0.205,22,0.235,25,0.338,43,0.266,44,0.197,49,0.016,50,0.016,56,0.33,76,0.572,77,1.873,79,0.738,82,0.604,83,0.968,106,0.892,128,1.851,314,3.863,326,2.237,327,3.04,345,2.752,348,3.125,350,2.929,352,2.183,355,3.892,507,1.595,587,1.4,752,2.843,792,2.661,795,3.288,796,1.563,957,3.125,962,3.273,970,3.782,971,4.426,972,3.04,973,4.426,974,4.426,975,4.426,976,4.426,977,4.426,978,4.426,979,2.786,980,3.863]],["title/classes/Tenant.html",[44,0.126,357,1.598]],["body/classes/Tenant.html",[12,0.022,20,0.164,21,0.126,22,0.145,25,0.355,26,0.436,28,0.86,40,2.408,43,0.288,44,0.141,49,0.012,50,0.012,56,0.203,76,0.571,77,1.831,79,0.722,82,0.551,83,0.943,106,0.875,121,2.216,128,1.769,145,1.472,171,1.515,187,0.586,197,1.513,207,1.272,209,1.69,345,2.13,348,2.419,350,2.505,352,1.69,357,2.354,358,3.077,360,3.077,364,3.013,366,3.719,369,2.763,370,3.013,392,2.033,429,3.287,449,3.196,502,1.076,507,1.141,526,1.686,535,2.532,540,3.287,553,3.875,557,1.583,587,0.86,606,1.905,635,1.892,640,2.325,646,4.057,689,1.905,717,3.287,726,2.325,748,2.532,749,2.532,750,2.763,752,1.375,753,3.631,755,1.713,762,4.466,763,1.713,764,2.763,766,2.861,767,2.59,788,1.905,792,1.016,796,1.69,798,2.064,799,2.532,841,2.267,981,1.869,982,3.287,983,3.287,984,2.721,985,2.721,986,2.721,987,2.721,988,2.721,989,2.721,990,2.721,991,2.721,992,2.325,993,2.721,994,2.721,995,2.721,996,2.721,997,2.721,998,2.721,999,2.721,1000,2.064,1001,4.787,1002,2.064,1003,2.325,1004,3.63,1005,4.089,1006,1.869,1007,2.325,1008,2.785,1009,2.325,1010,2.325,1011,1.713,1012,3.437,1013,1.713,1014,2.325,1015,2.325,1016,2.325,1017,2.325,1018,3.437,1019,1.869,1020,2.325,1021,2.721,1022,2.721,1023,2.721,1024,2.721,1025,1.869,1026,2.325,1027,2.721,1028,2.325,1029,2.325,1030,3.437,1031,2.325,1032,2.721,1033,2.721,1034,2.721,1035,2.721,1036,2.721,1037,2.721,1038,2.721,1039,2.721,1040,2.721,1041,2.721,1042,4.023,1043,2.721,1044,2.721]],["title/controllers/TenantController.html",[51,1.505,1045,2.466]],["body/controllers/TenantController.html",[12,0.022,20,0.127,21,0.098,22,0.113,25,0.337,26,0.34,42,0.838,43,0.127,44,0.074,47,1.72,49,0.01,50,0.01,51,0.889,54,1.335,56,0.158,57,0.846,58,2.025,76,0.501,77,1.602,79,0.658,81,1.552,82,0.596,83,0.86,85,1.582,86,0.944,106,0.871,107,2.201,110,1.944,123,1.8,124,2.856,128,0.996,135,2.349,144,2.584,145,1.8,147,1.608,148,1.234,156,1.811,160,1.147,161,1.456,163,0.635,164,1.512,165,1.575,166,2.842,171,1.671,187,1.438,189,1.964,206,2.566,207,2.052,240,1.811,241,1.811,253,1.071,254,1.004,255,1.456,266,1.147,267,1.335,283,2.388,289,2.074,311,1.8,312,1.071,333,1.811,336,3.031,340,3.179,352,1.641,357,2.972,362,1.456,410,1.811,413,2.582,417,1.575,481,2.284,497,2.708,500,2.538,501,1.456,502,2.293,503,1.456,592,3.829,613,2.584,645,1.234,661,1.456,802,1.935,805,2.704,806,2.938,810,3.192,819,1.234,863,2.094,864,4.629,867,2.522,874,1.335,875,2.522,877,2.522,881,2.522,883,1.608,884,2.818,889,3.113,890,3.113,891,2.522,894,1.608,895,1.608,903,2.522,907,1.608,914,1.608,1045,2.284,1046,1.811,1047,3.506,1048,3.192,1049,2.842,1050,2.842,1051,3.326,1052,2.818,1053,3.506,1054,1.811,1055,3.326,1056,2.842,1057,2.12,1058,2.12,1059,1.811,1060,2.842,1061,2.12,1062,1.811,1063,2.12,1064,3.326,1065,2.12,1066,2.12,1067,2.12,1068,2.12,1069,2.12,1070,4.578,1071,2.12,1072,2.926,1073,2.842,1074,2.12,1075,1.811,1076,1.811,1077,2.12,1078,2.12,1079,1.811,1080,2.842,1081,1.811,1082,1.608,1083,2.12,1084,2.12,1085,2.12,1086,1.811,1087,2.12,1088,5.358,1089,4.578,1090,1.811,1091,5.358,1092,2.12,1093,2.284,1094,2.842,1095,1.811,1096,2.842,1097,3.971,1098,2.842,1099,3.971,1100,2.12,1101,2.12,1102,2.522,1103,1.811,1104,2.12,1105,2.12,1106,2.12,1107,2.12,1108,1.811,1109,1.811,1110,2.12]],["title/modules/TenantModule.html",[0,1.341,15,1.815]],["body/modules/TenantModule.html",[0,2.254,2,1.991,3,1.991,4,2.275,5,2.275,6,1.991,7,3.265,8,3.265,11,2.275,12,0.022,14,2.75,15,3.679,16,2.75,17,2.945,18,2.125,19,2.275,20,0.253,21,0.195,22,0.223,24,2.447,25,0.431,26,0.674,27,3.426,28,1.329,33,3.21,42,2.152,43,0.253,44,0.147,47,3.023,48,2.529,49,0.016,50,0.016,82,0.411,153,2.647,161,2.887,247,3.422,257,3.189,259,3.189,262,3.189,357,1.871,687,2.887,689,1.991,825,3.592,919,4.577,921,3.592,1025,3.738,1045,4.144,1111,3.592,1112,3.592,1113,3.592,1114,4.205,1115,4.205,1116,2.887,1117,3.592]],["title/injectables/TenantsService.html",[47,1.505,271,0.576]],["body/injectables/TenantsService.html",[12,0.022,20,0.116,21,0.09,22,0.103,25,0.348,26,0.311,28,0.613,33,2.408,40,1.561,43,0.116,44,0.068,47,1.299,49,0.009,50,0.009,56,0.144,57,0.788,58,2.006,76,0.498,79,0.654,81,1.543,82,0.651,83,0.856,85,1.543,106,0.862,107,2.289,110,2.094,118,2.436,119,2.436,121,1.299,124,2.848,128,1.735,135,3.003,145,2.094,163,0.928,164,0.928,171,1.63,187,1.413,189,1.996,197,0.98,206,2.617,207,2.093,209,1.366,217,1.224,254,0.918,271,0.497,272,0.684,289,1.566,310,1.95,311,2.094,321,2.128,336,3.041,343,1.47,344,1.47,348,0.98,352,1.561,357,2.946,366,1.22,368,2.35,369,3.54,370,1.95,371,2.35,380,3.777,412,2.128,413,2.645,416,1.656,428,1.803,429,2.128,492,1.47,497,2.605,500,1.467,502,2.4,526,1.299,613,2.436,630,2.783,634,1.22,635,1.225,805,1.803,806,2.572,819,1.803,821,2.128,827,1.656,834,3.777,843,1.47,845,1.47,855,2.35,863,1.95,874,1.95,895,2.935,907,3.909,954,2.35,1000,1.47,1002,1.47,1019,1.331,1047,3.306,1048,3.036,1052,2.658,1054,1.656,1056,2.647,1070,5.078,1072,2.783,1093,3.319,1102,2.35,1117,2.647,1118,1.656,1119,2.647,1120,2.647,1121,2.647,1122,3.098,1123,1.938,1124,1.938,1125,2.647,1126,1.938,1127,1.938,1128,3.098,1129,1.938,1130,1.938,1131,1.938,1132,2.647,1133,1.938,1134,2.647,1135,1.938,1136,3.098,1137,1.938,1138,1.938,1139,1.938,1140,1.938,1141,1.656,1142,1.938,1143,1.938,1144,1.938,1145,1.938,1146,1.938,1147,1.938,1148,1.938,1149,1.938,1150,4.834,1151,3.87,1152,1.938,1153,1.656,1154,3.098,1155,1.938,1156,2.647,1157,2.647,1158,3.098,1159,1.938,1160,3.098,1161,3.098,1162,3.87,1163,1.938,1164,2.647,1165,2.647,1166,2.35,1167,1.938,1168,1.938,1169,1.938,1170,2.647,1171,1.938,1172,3.87,1173,1.656,1174,1.656,1175,1.656,1176,1.656,1177,1.938,1178,1.938,1179,1.938,1180,3.098,1181,1.938,1182,1.938,1183,1.938,1184,3.098,1185,1.656,1186,1.938,1187,1.938,1188,1.938,1189,1.938,1190,1.938,1191,1.656,1192,1.656]],["title/classes/User.html",[44,0.126,217,1.135]],["body/classes/User.html",[12,0.022,20,0.168,21,0.129,22,0.148,25,0.322,28,0.882,40,2.537,43,0.292,44,0.143,49,0.012,50,0.012,56,0.208,76,0.582,77,1.877,79,0.74,82,0.474,83,0.924,106,0.887,121,2.243,123,2.627,128,1.602,171,0.749,187,0.6,209,1.714,217,1.692,326,2.704,345,2.161,348,2.454,350,2.535,352,1.714,355,3.588,360,1.623,364,3.057,366,3.588,370,2.579,392,2.07,429,3.334,435,3.057,441,3.057,443,2.825,449,3.333,507,1.162,526,1.717,535,2.579,540,2.813,553,2.813,557,1.623,587,0.882,606,1.94,635,1.62,636,1.915,646,3.915,647,5.092,689,1.94,717,3.334,748,2.579,749,2.579,750,2.813,752,2.454,753,3.675,755,1.755,762,4.51,763,1.755,764,1.915,766,2.895,767,1.509,788,1.94,792,1.041,796,1.714,798,2.115,841,2.3,982,3.334,983,3.334,992,2.383,1003,2.383,1004,3.107,1005,3.5,1006,1.915,1007,2.383,1008,1.623,1009,2.383,1010,2.383,1011,1.755,1012,3.5,1013,1.755,1014,2.383,1015,2.383,1016,2.383,1017,2.383,1018,3.5,1019,1.915,1020,2.383,1028,2.383,1029,2.383,1030,2.383,1031,2.383,1193,1.915,1194,2.789,1195,2.789,1196,4.097,1197,2.789,1198,2.789,1199,2.789,1200,2.789,1201,4.856,1202,2.789,1203,2.789,1204,2.789,1205,2.789,1206,2.789,1207,2.789,1208,2.789,1209,2.789,1210,2.789,1211,2.789,1212,2.789,1213,2.789,1214,2.789,1215,2.789,1216,3.5,1217,4.097,1218,1.915,1219,2.383,1220,2.789]],["title/controllers/UserController.html",[51,1.505,1221,2.466]],["body/controllers/UserController.html",[12,0.022,20,0.107,21,0.083,22,0.095,25,0.356,26,0.286,33,1.628,40,0.629,42,0.705,43,0.107,44,0.062,45,1.848,46,1.081,48,1.366,49,0.008,50,0.008,51,0.747,54,1.122,56,0.133,57,0.736,58,1.987,75,2.474,76,0.504,77,1.59,79,0.639,81,1.506,82,0.578,83,0.835,85,1.536,86,2.062,106,0.863,123,1.567,124,2.531,128,0.867,140,1.994,144,3.291,145,1.567,147,1.352,148,2.128,153,1.122,155,1.523,157,1.122,160,0.964,163,0.534,164,1.631,171,1.649,187,1.443,188,1.352,189,2.006,197,1.331,206,2.595,207,2.076,209,0.629,217,2.153,253,0.901,254,0.844,255,1.224,266,0.964,267,1.122,283,2.128,286,3.591,287,2.474,289,1.848,311,1.567,312,0.901,330,1.224,336,3.047,340,3.291,346,2.196,352,1.487,362,1.989,385,1.224,412,1.224,413,2.734,414,1.352,481,1.989,497,2.846,500,2.667,501,1.224,502,2.342,503,1.224,526,0.747,566,1.352,592,4.39,606,0.844,613,2.302,645,1.037,661,1.224,802,1.685,805,2.45,806,2.695,819,1.037,863,1.823,864,4.843,867,2.196,874,1.122,875,2.196,877,2.196,881,2.196,883,1.352,884,2.512,886,1.352,889,3.513,890,3.513,891,3.194,894,1.352,903,2.774,905,1.523,914,1.352,948,1.523,1048,2.892,1049,2.474,1050,2.474,1052,2.512,1053,3.125,1059,1.523,1060,2.474,1062,1.523,1073,2.474,1075,1.523,1076,1.523,1079,1.523,1080,2.474,1081,1.523,1082,1.352,1086,1.523,1089,4.655,1090,1.523,1093,1.989,1094,1.523,1095,1.523,1096,3.125,1097,4.655,1098,3.125,1099,4.655,1102,2.196,1103,1.523,1108,1.523,1109,1.523,1116,1.224,1221,1.989,1222,1.523,1223,3.658,1224,2.896,1225,3.658,1226,1.783,1227,1.783,1228,1.783,1229,1.783,1230,1.783,1231,1.783,1232,2.896,1233,1.783,1234,1.783,1235,1.783,1236,2.896,1237,1.783,1238,1.783,1239,1.783,1240,1.783,1241,4.239,1242,1.783,1243,2.651,1244,1.783,1245,1.783,1246,1.783,1247,1.783,1248,1.783,1249,1.783,1250,1.783,1251,5.229,1252,3.658,1253,1.783,1254,1.783,1255,1.783,1256,3.658,1257,1.783,1258,1.783,1259,1.783,1260,1.783,1261,1.783,1262,1.783,1263,1.783,1264,4.962,1265,1.783,1266,1.783,1267,1.783,1268,1.783,1269,3.125,1270,2.896,1271,1.783,1272,2.896,1273,1.783,1274,1.783]],["title/modules/UserModule.html",[0,1.341,16,1.815]],["body/modules/UserModule.html",[0,2.208,2,1.91,3,1.91,4,2.181,5,2.181,6,1.91,7,3.2,8,3.2,12,0.022,14,2.676,15,3.448,16,3.71,17,2.865,18,2.037,19,2.181,20,0.242,21,0.187,22,0.214,24,3.081,25,0.431,26,0.646,27,2.538,28,1.674,33,3.191,42,2.094,43,0.242,44,0.141,46,2.677,48,2.5,49,0.015,50,0.015,82,0.394,153,2.538,157,2.538,217,1.275,247,3.383,258,3.058,259,3.058,262,3.058,344,3.058,625,4.214,687,2.769,689,2.508,919,4.485,1116,2.769,1218,3.637,1221,4.061,1275,3.445,1276,4.032,1277,3.445,1278,3.445,1279,4.032,1280,3.445,1281,4.032,1282,4.032]],["title/classes/UserProject.html",[44,0.126,326,1.815]],["body/classes/UserProject.html",[12,0.021,20,0.244,21,0.188,22,0.216,25,0.357,28,1.284,43,0.32,44,0.186,49,0.015,50,0.015,56,0.303,76,0.581,77,1.883,79,0.742,82,0.58,83,0.977,106,0.882,187,0.874,197,1.682,209,2.095,289,2.999,326,2.688,387,4.5,389,4.5,391,4.5,392,2.688,417,2.81,449,2.196,507,1.508,526,2.23,557,2.362,587,1.284,635,2.103,689,2.52,747,5.069,748,3.735,749,2.555,755,2.555,762,4.597,763,2.555,767,2.196,788,2.52,792,1.986,796,1.433,1283,3.079,1284,5.934,1285,4.06,1286,4.06,1287,4.06,1288,4.06,1289,4.06,1290,4.06,1291,4.06,1292,4.06,1293,5.32,1294,4.06,1295,4.06,1296,3.079,1297,3.468]],["title/injectables/UsersService.html",[46,1.341,271,0.576]],["body/injectables/UsersService.html",[12,0.022,20,0.097,21,0.075,22,0.086,25,0.337,26,0.26,28,0.512,33,2.234,40,1.674,43,0.097,44,0.057,46,1,47,1.667,49,0.008,50,0.008,56,0.121,57,0.681,58,2.052,76,0.524,79,0.687,81,1.623,82,0.623,83,0.9,85,1.637,106,0.87,121,1.123,124,2.942,128,0.802,140,2.88,145,1.852,163,0.802,164,1.42,171,1.729,187,1.387,188,3.596,189,2.018,197,1.392,206,2.523,207,2.036,217,2.15,254,0.767,271,0.429,272,0.572,286,2.351,289,1.353,310,2.155,311,1.852,318,1.384,321,1.839,334,2.288,336,2.839,339,2.925,343,1.229,352,1.404,353,1.384,357,1.77,366,1.02,368,2.031,369,1.839,371,2.031,385,3.257,413,2.706,414,2.031,428,1.558,435,1.686,441,1.686,443,1.558,450,2.288,492,1.229,497,2.225,500,1.621,502,2.322,526,1.123,613,2.155,629,1.384,630,2.503,634,1.02,635,0.641,636,1.113,802,1.992,805,1.558,806,2.314,813,2.288,819,1.558,821,1.839,829,1.384,837,1.384,841,0.767,843,1.229,844,3.397,845,1.229,851,1.384,854,1.384,855,2.596,857,1.384,858,1.384,863,1.686,874,1.686,888,2.925,954,2.031,1000,1.229,1019,1.113,1048,2.731,1052,2.351,1093,3.024,1116,1.113,1119,2.288,1120,2.288,1121,2.288,1125,2.288,1132,2.288,1134,2.288,1141,1.384,1153,1.384,1156,2.288,1157,2.288,1164,2.288,1165,2.288,1170,2.288,1173,1.384,1174,1.384,1175,1.384,1176,1.384,1185,1.384,1191,1.384,1192,1.384,1241,4.483,1243,2.503,1269,4.051,1280,1.384,1298,1.384,1299,2.678,1300,3.976,1301,2.678,1302,2.678,1303,2.678,1304,2.678,1305,2.678,1306,2.678,1307,2.678,1308,1.621,1309,1.621,1310,2.678,1311,1.621,1312,2.678,1313,2.678,1314,1.621,1315,1.621,1316,1.621,1317,1.621,1318,1.621,1319,2.678,1320,1.621,1321,2.678,1322,1.621,1323,2.678,1324,1.621,1325,1.621,1326,2.678,1327,1.621,1328,2.678,1329,1.621,1330,2.678,1331,1.621,1332,2.678,1333,1.621,1334,2.678,1335,1.621,1336,1.621,1337,1.621,1338,1.621,1339,1.621,1340,1.621,1341,1.621,1342,2.678,1343,2.678,1344,2.678,1345,1.621,1346,1.621,1347,3.423,1348,2.678,1349,1.621,1350,3.423,1351,4.403,1352,1.621,1353,1.621,1354,2.678,1355,1.621,1356,1.621,1357,1.621,1358,4.742,1359,5.018,1360,3.976,1361,2.678,1362,2.678,1363,3.423,1364,1.621,1365,1.621,1366,3.423,1367,2.678,1368,1.621,1369,2.678,1370,2.678,1371,1.621,1372,1.621,1373,1.621,1374,1.621,1375,1.621,1376,1.621,1377,1.621,1378,1.621]],["title/coverage.html",[1379,3.717]],["body/coverage.html",[6,1.645,12,0.022,22,0.185,33,1.545,44,0.249,45,1.755,46,1.297,47,1.455,48,1.297,49,0.014,50,0.014,51,2.598,52,2.384,53,2.966,76,0.285,130,2.384,135,1.755,140,1.645,151,2.384,197,1.098,207,1.098,217,1.098,247,1.755,248,2.186,249,2.186,250,2.186,254,1.645,271,1.13,273,2.966,314,2.384,316,2.384,326,1.755,328,1.879,357,1.545,476,2.633,478,2.966,506,2.966,531,2.966,540,2.384,564,2.966,576,2.966,586,2.633,588,2.966,589,2.966,609,2.966,615,2.633,625,2.186,626,2.966,648,2.384,649,2.966,662,2.02,679,2.02,682,2.384,683,2.186,685,2.633,690,2.966,746,3.289,770,2.966,781,3.632,799,2.186,801,2.966,859,2.384,860,2.966,923,2.633,924,2.966,956,2.966,960,2.966,970,2.966,981,3.289,1025,2.384,1045,2.384,1046,2.966,1072,2.186,1118,2.966,1193,3.289,1218,2.384,1221,2.384,1222,2.966,1243,2.186,1283,3.632,1296,2.633,1298,2.966,1379,2.633,1380,3.472,1381,3.472,1382,3.472,1383,2.966,1384,6.792,1385,7.506,1386,6.875,1387,5.482,1388,4.789,1389,3.472,1390,3.472,1391,3.472,1392,6.692,1393,5.482,1394,4.789,1395,4.789,1396,4.789,1397,4.789,1398,3.472,1399,4.683,1400,2.966,1401,2.966,1402,2.966,1403,4.789,1404,4.789,1405,2.966,1406,2.966,1407,2.966,1408,2.966,1409,3.472,1410,2.966,1411,2.966,1412,2.633,1413,3.472,1414,3.472,1415,3.472]],["title/dependencies.html",[3,2.046,1416,2.562]],["body/dependencies.html",[3,2.231,12,0.022,26,0.755,28,1.489,36,2.74,44,0.205,49,0.017,50,0.017,159,2.965,160,2.548,253,2.38,321,3.234,325,4.024,424,3.572,454,3.572,518,4.024,544,4.788,577,4.024,581,4.024,635,1.862,697,4.024,698,3.572,699,4.024,796,1.663,934,4.024,1082,3.572,1417,6.362,1418,4.71,1419,4.71,1420,4.71,1421,4.71,1422,4.71,1423,4.71,1424,4.71,1425,4.71,1426,4.71,1427,4.71,1428,4.71,1429,4.71,1430,3.572,1431,4.71,1432,4.71,1433,4.71,1434,5.849,1435,4.71,1436,4.71,1437,4.71,1438,4.71,1439,4.71,1440,4.71,1441,4.71,1442,4.71,1443,4.71,1444,4.71,1445,4.71,1446,4.71,1447,4.71,1448,4.71,1449,4.71,1450,4.71,1451,4.71,1452,4.71,1453,4.71,1454,4.71]],["title/miscellaneous/functions.html",[1455,1.745,1456,3.69]],["body/miscellaneous/functions.html",[6,3.276,12,0.019,49,0.019,50,0.019,56,0.427,1402,4.897,1455,3.335,1456,4.897,1457,5.732]],["title/index.html",[56,0.224,1458,2.999,1459,2.999]],["body/index.html",[12,0.021,21,0.219,49,0.017,50,0.017,197,1.495,358,2.752,555,4.04,698,3.586,702,4.04,719,3.586,1004,3.586,1379,3.586,1460,4.729,1461,4.729,1462,5.864,1463,4.729,1464,4.729,1465,4.729,1466,4.729,1467,4.729,1468,6.373,1469,4.729,1470,4.729,1471,4.729,1472,6.373,1473,7.076,1474,4.729,1475,4.729,1476,4.729,1477,6.98,1478,4.729,1479,4.729,1480,5.864,1481,4.729,1482,4.729,1483,4.729,1484,5.864,1485,5.864,1486,4.729,1487,4.729,1488,4.729,1489,5.864,1490,5.864,1491,4.729,1492,4.729,1493,4.729,1494,4.729,1495,4.04,1496,4.729,1497,4.729,1498,4.729,1499,4.729,1500,4.729,1501,4.729,1502,4.729,1503,4.729,1504,4.729,1505,4.04,1506,4.729,1507,4.729,1508,4.729,1509,4.729,1510,4.729,1511,4.04]],["title/modules.html",[2,2.321]],["body/modules.html",[1,3.727,2,2.57,11,2.936,12,0.018,13,3.416,14,2.743,15,2.743,16,2.743,49,0.018,50,0.018,1495,6.158,1512,7.208,1513,7.208,1514,7.208]],["title/overview.html",[1515,4.187]],["body/overview.html",[0,1.43,1,4.884,2,1.813,3,1.813,4,2.071,5,2.071,6,1.813,7,2.071,8,2.071,9,3.271,10,3.271,11,3.972,12,0.021,13,4.241,14,3.405,15,3.651,16,3.69,17,2.769,18,1.935,19,2.071,33,3.117,42,1.514,45,3.405,46,2.516,47,2.824,48,2.589,49,0.015,50,0.015,243,3.271,244,3.271,246,3.271,247,3.24,248,3.628,249,3.628,250,3.628,272,1.351,476,2.903,587,1.21,625,3.628,645,2.227,662,3.354,677,3.271,678,3.271,679,3.354,915,3.271,916,3.271,917,3.271,1111,3.271,1112,3.271,1113,3.271,1216,3.271,1275,3.271,1277,3.271,1278,3.271,1515,3.271,1516,3.828,1517,3.828,1518,3.828]],["title/classes/projectModel.html",[44,0.126,328,1.943]],["body/classes/projectModel.html",[12,0.021,20,0.272,21,0.21,22,0.241,25,0.272,43,0.272,44,0.2,49,0.016,50,0.016,56,0.338,76,0.566,77,1.854,79,0.731,82,0.61,83,1,106,0.885,107,2.96,110,2.96,209,2.206,328,3.088,417,2.96,507,1.618,587,1.432,788,2.703,792,2.578,793,3.636,794,4.876,795,3.418,796,1.599,810,4.291,1405,3.869,1519,4.529,1520,4.529,1521,6.249,1522,4.529,1523,4.529,1524,2.851,1525,4.529,1526,4.529,1527,4.529,1528,4.529,1529,3.592]],["title/properties.html",[507,1.225,1416,2.562]],["body/properties.html",[12,0.021,49,0.019,50,0.019,507,1.613,719,4.315,1505,4.861,1511,4.861,1530,5.69,1531,5.69,1532,5.69]],["title/classes/tenantModel.html",[44,0.126,135,1.815]],["body/classes/tenantModel.html",[12,0.021,20,0.207,21,0.16,22,0.183,25,0.328,40,1.217,43,0.207,44,0.191,49,0.014,50,0.014,56,0.257,76,0.585,77,1.878,79,0.745,82,0.533,83,1.009,106,0.892,121,2.747,128,1.635,135,2.408,165,3.029,197,1.863,209,1.928,345,2.43,350,2.586,352,1.928,358,3.177,360,3.177,364,3.437,392,2.408,507,1.351,587,1.09,606,2.586,752,2.408,766,1.865,788,2.257,792,2.494,793,3.428,795,3.427,796,1.217,824,2.17,841,2.586,957,2.759,962,3.428,972,2.367,979,2.999,980,3.272,982,3.75,983,3.75,1008,2.772,1011,2.999,1013,2.999,1406,2.945,1430,2.614,1524,2.17,1529,2.999,1533,3.447,1534,3.447,1535,3.447,1536,3.447,1537,3.447,1538,3.447,1539,2.614,1540,2.945,1541,4.071,1542,4.071,1543,4.071,1544,3.613,1545,3.613,1546,3.613,1547,3.447,1548,3.447,1549,3.447,1550,3.447,1551,3.447,1552,2.945,1553,3.447,1554,3.447,1555,3.447,1556,3.447,1557,3.447,1558,3.613,1559,2.367,1560,2.614,1561,4.071,1562,2.614,1563,2.945,1564,2.945]],["title/miscellaneous/typealiases.html",[1455,1.745,1565,4.319]],["body/miscellaneous/typealiases.html",[12,0.019,49,0.019,50,0.019,56,0.419,76,0.461,636,4.466,746,3.861,765,4.933,981,3.861,1002,4.933,1193,3.861,1455,3.271,1566,5.622,1567,4.803,1568,4.803,1569,4.803]],["title/classes/updateTenantModel.html",[44,0.126,1072,2.261]],["body/classes/updateTenantModel.html",[12,0.021,20,0.209,21,0.161,22,0.185,25,0.33,40,1.229,43,0.209,44,0.192,49,0.014,50,0.014,56,0.26,76,0.579,77,1.865,79,0.735,82,0.536,83,1.031,106,0.888,118,3.456,119,3.456,121,2.011,128,1.644,165,3.524,197,1.871,209,1.938,350,2.6,352,1.938,358,3.195,360,3.195,507,1.361,587,1.101,606,2.273,788,2.273,792,2.538,793,2.026,795,3.54,796,1.229,824,2.192,841,2.6,957,2.425,962,3.825,979,3.021,1006,3.295,1008,2.792,1072,3.021,1166,4.164,1407,2.975,1430,2.641,1524,2.192,1529,3.021,1559,3.295,1561,4.1,1564,2.975,1570,3.483,1571,3.483,1572,3.483,1573,3.483,1574,3.483,1575,3.483,1576,3.483,1577,3.483,1578,4.1,1579,4.1,1580,4.799,1581,3.483,1582,3.483,1583,3.483,1584,3.483,1585,3.483,1586,3.483,1587,3.483]],["title/classes/updateUserModel.html",[44,0.126,1243,2.261]],["body/classes/updateUserModel.html",[12,0.021,20,0.205,21,0.158,22,0.181,25,0.284,43,0.205,44,0.165,49,0.014,50,0.014,56,0.254,76,0.562,77,1.839,79,0.725,82,0.601,83,0.965,106,0.869,118,3.876,119,3.876,121,2.457,128,1.956,207,1.853,209,1.916,326,2.742,327,2.34,350,2.57,352,1.916,355,3.416,507,1.34,587,1.077,606,3.277,752,3.22,766,3.535,788,2.239,792,2.44,793,3.707,795,3.22,796,1.203,841,2.57,957,2.388,962,2.75,972,2.34,979,2.975,980,3.246,1006,4.025,1008,3.41,1011,3.69,1013,3.69,1166,4.67,1243,2.975,1408,2.911,1524,2.145,1529,2.975,1539,3.584,1544,4.445,1545,4.445,1546,4.445,1559,3.727,1560,2.584,1562,3.584,1578,5.008,1579,5.008,1588,3.407,1589,4.727,1590,4.727,1591,3.407,1592,3.407,1593,4.038,1594,4.038,1595,2.911,1596,2.911,1597,3.407,1598,3.407,1599,4.038,1600,3.407,1601,3.407,1602,3.407,1603,3.407,1604,2.911,1605,3.407,1606,2.911]],["title/classes/userModel.html",[44,0.126,140,1.701]],["body/classes/userModel.html",[12,0.021,20,0.197,21,0.152,22,0.174,25,0.277,43,0.197,44,0.161,49,0.013,50,0.013,56,0.244,76,0.581,77,1.889,79,0.749,82,0.593,83,1.019,106,0.893,121,2.71,128,1.936,140,2.179,209,1.877,326,2.687,327,2.251,345,2.366,350,2.518,352,1.877,355,3.347,364,3.347,392,2.325,435,3.347,441,3.347,443,3.093,507,1.305,587,1.037,606,3.062,752,2.913,766,3.119,788,2.179,792,2.565,793,3.354,795,3.471,796,1.157,841,2.518,957,2.325,962,3.663,972,2.251,979,2.897,980,3.16,982,3.651,983,3.651,1008,2.677,1011,2.897,1013,2.897,1410,2.801,1524,2.064,1529,2.897,1539,2.486,1540,2.801,1541,3.931,1542,3.931,1543,3.931,1544,3.49,1545,3.49,1546,3.49,1552,2.801,1558,3.49,1559,2.251,1560,2.486,1562,2.486,1563,2.801,1593,3.931,1594,3.931,1595,2.801,1596,2.801,1599,2.801,1604,2.801,1606,2.801,1607,3.279,1608,3.279,1609,3.279,1610,3.279,1611,3.279,1612,3.279,1613,3.279,1614,3.279,1615,3.279,1616,3.279,1617,3.279,1618,3.279,1619,3.279,1620,3.279,1621,3.279]],["title/classes/userProjectModel.html",[44,0.126,1412,2.724]],["body/classes/userProjectModel.html",[12,0.021,20,0.294,21,0.226,22,0.26,25,0.36,43,0.294,44,0.209,49,0.017,50,0.017,56,0.364,76,0.553,77,1.81,79,0.713,106,0.828,289,3.268,387,4.904,389,4.904,391,4.904,392,3.023,507,1.696,587,1.545,635,1.932,792,2.661,796,1.725,957,2.469,1411,4.174,1412,4.537,1558,4.904,1622,4.886,1623,4.886,1624,4.886,1625,6.467,1626,4.886]],["title/miscellaneous/variables.html",[1455,1.745,1627,3.69]],["body/miscellaneous/variables.html",[12,0.021,21,0.218,49,0.017,50,0.017,56,0.35,76,0.521,106,0.718,254,2.767,266,3.161,370,2.959,428,2.735,615,4.43,682,4.012,717,4.978,746,3.228,767,3.896,769,4.016,781,3.565,799,3.677,800,4.016,981,3.228,1025,4.012,1026,4.016,1193,3.228,1218,4.012,1219,4.016,1283,3.565,1296,4.43,1297,4.016,1383,4.016,1399,4.016,1400,5.43,1401,4.991,1455,2.735,1567,4.016,1568,4.016,1569,4.016,1627,4.016,1628,4.701,1629,4.701,1630,6.356,1631,4.701,1632,4.701,1633,4.701,1634,4.701,1635,4.701,1636,4.701,1637,4.701,1638,4.701,1639,4.701,1640,4.701,1641,4.701,1642,4.701,1643,4.701]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1385,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1531,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1432,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1450,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1431,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1386,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1391,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1409,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1404,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1397,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1394,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1389,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1403,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1390,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1413,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1398,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1392,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1395,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1393,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1388,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1396,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1387,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":645,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.0.0",{"_index":1447,"title":{},"body":{"dependencies.html":{}}}],["1.0.3",{"_index":1423,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":1442,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["10.0.0",{"_index":1454,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1422,"title":{},"body":{"dependencies.html":{}}}],["10.0.6",{"_index":1421,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1420,"title":{},"body":{"dependencies.html":{}}}],["10.3.9",{"_index":1417,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1217,"title":{},"body":{"classes/User.html":{}}}],["1000",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["11000",{"_index":1036,"title":{},"body":{"classes/Tenant.html":{}}}],["13",{"_index":1216,"title":{},"body":{"classes/User.html":{},"overview.html":{}}}],["15",{"_index":1518,"title":{},"body":{"overview.html":{}}}],["15.11.0",{"_index":1453,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["1h",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["2.0.0",{"_index":1443,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1429,"title":{},"body":{"dependencies.html":{}}}],["2.43.4",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":946,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["201",{"_index":947,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["20|0)?1[0125]\\d{8",{"_index":1020,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["24",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["27",{"_index":641,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["3.0.0",{"_index":1441,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1418,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":623,"title":{},"body":{"injectables/ImageService.html":{}}}],["3600000",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.0.1",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1517,"title":{},"body":{"overview.html":{}}}],["5.00",{"_index":718,"title":{},"body":{"injectables/PaypalService.html":{}}}],["5.1.1",{"_index":1427,"title":{},"body":{"dependencies.html":{}}}],["587",{"_index":524,"title":{},"body":{"injectables/EmailService.html":{}}}],["6",{"_index":1516,"title":{},"body":{"overview.html":{}}}],["6.9.14",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["7.8.1",{"_index":1451,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1015,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["8.4.3",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1023,"title":{},"body":{"classes/Tenant.html":{}}}],["_id",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{}}}],["access_token",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accesstoken",{"_index":542,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["add",{"_index":1263,"title":{},"body":{"controllers/UserController.html":{}}}],["added",{"_index":1262,"title":{},"body":{"controllers/UserController.html":{}}}],["addimage",{"_index":1119,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["addimage(id",{"_index":1125,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["addprojecttouserbyprojectid",{"_index":1223,"title":{},"body":{"controllers/UserController.html":{}}}],["addprojecttouserbyprojectid(body",{"_index":1226,"title":{},"body":{"controllers/UserController.html":{}}}],["address",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["admin",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["admins",{"_index":911,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["age",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInUserResponse.html":{},"classes/User.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["aliases",{"_index":1566,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":1496,"title":{},"body":{"index.html":{}}}],["amount",{"_index":714,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["another",{"_index":1161,"title":{},"body":{"injectables/TenantsService.html":{}}}],["app",{"_index":1475,"title":{},"body":{"index.html":{}}}],["application_context",{"_index":722,"title":{},"body":{"injectables/PaypalService.html":{}}}],["applications",{"_index":1467,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":593,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array.isarray(tenant.projects",{"_index":856,"title":{},"body":{"injectables/ProjectService.html":{}}}],["array.isarray(user.projects",{"_index":1375,"title":{},"body":{"injectables/UsersService.html":{}}}],["async",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{}}}],["auth.module",{"_index":921,"title":{},"body":{"modules/ProjectsModule.html":{},"modules/TenantModule.html":{}}}],["auth_token",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcode",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontroller",{"_index":52,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticationguard",{"_index":151,"title":{"guards/AuthenticationGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authguard",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader",{"_index":864,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["authheader.split",{"_index":914,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1505,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":850,"title":{},"body":{"injectables/ProjectService.html":{}}}],["authorizationaccesstoken",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProject.html":{},"classes/userProjectModel.html":{}}}],["authorizationcode",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProject.html":{},"classes/userProjectModel.html":{}}}],["authorizeclient",{"_index":1047,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["authorizeclient(clientid",{"_index":1054,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["authservice",{"_index":48,"title":{"injectables/AuthService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":750,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["available",{"_index":858,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":1497,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('failed",{"_index":837,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('new",{"_index":1175,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('old",{"_index":1173,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('only",{"_index":910,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["badrequestexception('passwords",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('tenant",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1368,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(oldpassword",{"_index":1171,"title":{},"body":{"injectables/TenantsService.html":{}}}],["bcrypt.compare(password",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":1176,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(newpassword",{"_index":1177,"title":{},"body":{"injectables/TenantsService.html":{}}}],["bcrypt.hash(password",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(updateuserdto.newpassword",{"_index":1371,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(uuidv4",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcryptjs",{"_index":1428,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":505,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["body",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["body('clientid",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["body('clientsecret",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["body('confirmnewpassword",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('newpassword",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('token",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":788,"title":{},"body":{"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1514,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1512,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1463,"title":{},"body":{"index.html":{}}}],["buy",{"_index":720,"title":{},"body":{"injectables/PaypalService.html":{}}}],["cachecontrol",{"_index":622,"title":{},"body":{"injectables/ImageService.html":{}}}],["callback",{"_index":725,"title":{},"body":{"injectables/PaypalService.html":{}}}],["callbackurl",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{}}}],["callhandler",{"_index":930,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["canactivate",{"_index":479,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":484,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cancel",{"_index":729,"title":{},"body":{"injectables/PaypalService.html":{}}}],["cancel_url",{"_index":727,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture",{"_index":671,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["capture.id",{"_index":673,"title":{},"body":{"controllers/PaypalController.html":{}}}],["capture.payer",{"_index":676,"title":{},"body":{"controllers/PaypalController.html":{}}}],["capture.result",{"_index":745,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.id",{"_index":734,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.payer.email_address",{"_index":740,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.payer.name.given_name",{"_index":742,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.payer.name.surname",{"_index":743,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.purchase_units[0].amount.currency_code",{"_index":738,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.purchase_units[0].amount.value",{"_index":736,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.status",{"_index":735,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.status",{"_index":674,"title":{},"body":{"controllers/PaypalController.html":{}}}],["captureorder",{"_index":651,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["captureorder(@param('orderid",{"_index":670,"title":{},"body":{"controllers/PaypalController.html":{}}}],["captureorder(orderid",{"_index":653,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["case",{"_index":945,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["catch",{"_index":500,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":591,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":597,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["character",{"_index":1546,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["characters",{"_index":1016,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["class",{"_index":44,"title":{"classes/HttpExceptionFilter.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["classes",{"_index":587,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"overview.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["click",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["client",{"_index":1056,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["clientid",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/projectModel.html":{}}}],["clientsecret",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/projectModel.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_paypalmodule",{"_index":677,"title":{},"body":{"modules/PaypalModule.html":{},"overview.html":{}}}],["cluster_paypalmodule_providers",{"_index":678,"title":{},"body":{"modules/PaypalModule.html":{},"overview.html":{}}}],["cluster_projectsmodule",{"_index":915,"title":{},"body":{"modules/ProjectsModule.html":{},"overview.html":{}}}],["cluster_projectsmodule_exports",{"_index":916,"title":{},"body":{"modules/ProjectsModule.html":{},"overview.html":{}}}],["cluster_projectsmodule_providers",{"_index":917,"title":{},"body":{"modules/ProjectsModule.html":{},"overview.html":{}}}],["cluster_tenantmodule",{"_index":1111,"title":{},"body":{"modules/TenantModule.html":{},"overview.html":{}}}],["cluster_tenantmodule_exports",{"_index":1112,"title":{},"body":{"modules/TenantModule.html":{},"overview.html":{}}}],["cluster_tenantmodule_providers",{"_index":1113,"title":{},"body":{"modules/TenantModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1275,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1278,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1276,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1277,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coffee",{"_index":721,"title":{},"body":{"injectables/PaypalService.html":{}}}],["completed",{"_index":949,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["complex",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":511,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('facebook_callback_url",{"_index":548,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["configservice.get('facebook_client_id",{"_index":546,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["configservice.get('facebook_client_secret",{"_index":547,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["configservice.get('github_callback_url",{"_index":573,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["configservice.get('github_client_id",{"_index":571,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["configservice.get('github_client_secret",{"_index":572,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["configservice.get('google_callback_url",{"_index":584,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_client_id",{"_index":582,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_client_secret",{"_index":583,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["confirm",{"_index":1590,"title":{},"body":{"classes/updateUserModel.html":{}}}],["confirmnewpassword",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["confirmpassword",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["conflictexception",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["conflictexception('email",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["conflictexception('name",{"_index":1160,"title":{},"body":{"injectables/TenantsService.html":{}}}],["conflictexception('password",{"_index":1043,"title":{},"body":{"classes/Tenant.html":{}}}],["conflictexception('project",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["conflictexception('tenant",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('error",{"_index":1164,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["const",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":492,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":637,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["constructor(authservice",{"_index":578,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["constructor(configservice",{"_index":510,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{}}}],["constructor(jwtservice",{"_index":482,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(paypaltransactionmodel",{"_index":772,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["constructor(paypaltransactionservice",{"_index":692,"title":{},"body":{"injectables/PaypalService.html":{}}}],["constructor(private",{"_index":494,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["constructor(projectmodel",{"_index":807,"title":{},"body":{"injectables/ProjectService.html":{}}}],["constructor(tenantmodel",{"_index":1123,"title":{},"body":{"injectables/TenantsService.html":{}}}],["constructor(usermodel",{"_index":629,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["contain",{"_index":1010,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["context",{"_index":487,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ResponseInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":495,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":939,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["controller",{"_index":51,"title":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('paypal",{"_index":664,"title":{},"body":{"controllers/PaypalController.html":{}}}],["controller('projects",{"_index":887,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["controller('tenants",{"_index":1084,"title":{},"body":{"controllers/TenantController.html":{}}}],["controller('users",{"_index":1248,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":1379,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["create(createprojectdto",{"_index":809,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["create(createtenantdto",{"_index":1128,"title":{},"body":{"injectables/TenantsService.html":{}}}],["create(createuserdto",{"_index":1310,"title":{},"body":{"injectables/UsersService.html":{}}}],["createclient(supabaseurl",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["created",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["createdat",{"_index":747,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/UserProject.html":{}}}],["createdproject",{"_index":831,"title":{},"body":{"injectables/ProjectService.html":{}}}],["createdtenant",{"_index":1147,"title":{},"body":{"injectables/TenantsService.html":{}}}],["createdtenant.save",{"_index":1149,"title":{},"body":{"injectables/TenantsService.html":{}}}],["createduser",{"_index":1342,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":1344,"title":{},"body":{"injectables/UsersService.html":{}}}],["creategithubuser",{"_index":1299,"title":{},"body":{"injectables/UsersService.html":{}}}],["creategithubuser(createuserdto",{"_index":1313,"title":{},"body":{"injectables/UsersService.html":{}}}],["createorder",{"_index":652,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["createprojectdto",{"_index":812,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["createtenantdto",{"_index":1130,"title":{},"body":{"injectables/TenantsService.html":{}}}],["createtransaction",{"_index":771,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["createtransaction(data",{"_index":775,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["createuserdto",{"_index":1312,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":950,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["credentials",{"_index":1184,"title":{},"body":{"injectables/TenantsService.html":{}}}],["crypto",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["crypto.randombytes(16).tostring('hex",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["crypto.randombytes(32).tostring('hex",{"_index":830,"title":{},"body":{"injectables/ProjectService.html":{}}}],["ctx",{"_index":598,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":601,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":600,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["currency",{"_index":737,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["currency_code",{"_index":715,"title":{},"body":{"injectables/PaypalService.html":{}}}],["data",{"_index":617,"title":{},"body":{"injectables/ImageService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ResponseInterceptor.html":{}}}],["date",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"classes/PaypalTransaction.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["date(date.now",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["date.now",{"_index":768,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"controllers/ProjectsController.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["default",{"_index":767,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["delete",{"_index":802,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":875,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["delete('project/:id",{"_index":1236,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(id",{"_index":813,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["deleted",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Project.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["deleting",{"_index":955,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":719,"title":{},"body":{"injectables/PaypalService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1476,"title":{},"body":{"index.html":{}}}],["digit",{"_index":1014,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["disable",{"_index":552,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["displayname",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["doc",{"_index":1033,"title":{},"body":{"classes/Tenant.html":{}}}],["document",{"_index":764,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["documentation",{"_index":1380,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["domain/entities/tenant.entity",{"_index":1144,"title":{},"body":{"injectables/TenantsService.html":{}}}],["domain/entities/user.entity",{"_index":1280,"title":{},"body":{"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["don't",{"_index":848,"title":{},"body":{"injectables/ProjectService.html":{}}}],["done",{"_index":539,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["done(new",{"_index":562,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["done(null",{"_index":563,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["dtos/project.model",{"_index":885,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["dtos/signinrequest.model",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/tenant.model",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["dtos/updatetenant.model",{"_index":1083,"title":{},"body":{"controllers/TenantController.html":{}}}],["dtos/updateuser.model",{"_index":1247,"title":{},"body":{"controllers/UserController.html":{}}}],["dtos/user.model",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["due",{"_index":849,"title":{},"body":{"injectables/ProjectService.html":{}}}],["e2e",{"_index":1486,"title":{},"body":{"index.html":{}}}],["each",{"_index":1564,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["efficient",{"_index":1464,"title":{},"body":{"index.html":{}}}],["email",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["email.service",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["emails",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["emails[0",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["emails[0].value",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["emailservice",{"_index":247,"title":{"injectables/EmailService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["ensureindexes",{"_index":627,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["environment",{"_index":700,"title":{},"body":{"injectables/PaypalService.html":{}}}],["error",{"_index":502,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["error('passwords",{"_index":1031,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["error('project",{"_index":1188,"title":{},"body":{"injectables/TenantsService.html":{}}}],["error('tenant",{"_index":1183,"title":{},"body":{"injectables/TenantsService.html":{}}}],["error(`user",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.code",{"_index":640,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/Tenant.html":{}}}],["error.getstatus",{"_index":1095,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["error.message",{"_index":1096,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["error.message.includes('email",{"_index":1039,"title":{},"body":{"classes/Tenant.html":{}}}],["error.message.includes('name",{"_index":1037,"title":{},"body":{"classes/Tenant.html":{}}}],["error.message.includes('password",{"_index":1041,"title":{},"body":{"classes/Tenant.html":{}}}],["error.name",{"_index":1034,"title":{},"body":{"classes/Tenant.html":{}}}],["error.status",{"_index":1098,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["eslint",{"_index":551,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["eslint/ban",{"_index":556,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["example",{"_index":1472,"title":{},"body":{"index.html":{}}}],["exception",{"_index":595,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":589,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":594,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":608,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":603,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":607,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":590,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exchangecodewithtoken",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["exchangecodewithtoken(@body",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["exchangecodewithtoken(obj",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["exchangetokenforuserdata",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{}}}],["exchangetokenforuserdata(@body",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["exchangetokenforuserdata(obj",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["exclude",{"_index":1557,"title":{},"body":{"classes/tenantModel.html":{}}}],["exec",{"_index":844,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":485,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ResponseInterceptor.html":{}}}],["exist",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["existingtenant",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{}}}],["existingtenant.email",{"_index":1155,"title":{},"body":{"injectables/TenantsService.html":{}}}],["existinguser",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["existinguserproject",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserproject.authorizationaccesstoken",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserproject.authorizationcode",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserproject.expiredate",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":1156,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["expired",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["expiredate",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProject.html":{},"classes/userProjectModel.html":{}}}],["expiresin",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":613,"title":{},"body":{"injectables/ImageService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["extends",{"_index":532,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{}}}],["extracttokenfromheader",{"_index":480,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["extracttokenfromheader(request",{"_index":488,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpc3mioijzdxbhymfzzsisinjlzii6inbxdnz0bxzxendzzxdsagjnzhpyiiwicm9szsi6imfub24ilcjpyxqioje3mtgymtixnjqsimv4cci6mjazmzc4ode2nh0.jvdwxdzzzvowfq3pfqflymugrcqucqed2mvq9ejqmpo",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebook",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"dependencies.html":{}}}],["facebookauthcallback",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookauthcallback(@req",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookauthcallback(req",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookauthstrategy",{"_index":248,"title":{"injectables/FacebookAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/FacebookAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["facebookid",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/IndexManagementService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/userModel.html":{}}}],["failed",{"_index":1097,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["false",{"_index":526,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/ImageService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["fileinterceptor",{"_index":1081,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["find",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["findall",{"_index":1048,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["findallprojectspertenant",{"_index":803,"title":{},"body":{"injectables/ProjectService.html":{}}}],["findallprojectspertenant(tenantid",{"_index":815,"title":{},"body":{"injectables/ProjectService.html":{}}}],["findalluserswithprojects",{"_index":1300,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail",{"_index":1120,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":1132,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbyfacebookid",{"_index":1301,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyfacebookid(facebookid",{"_index":1319,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbygithubid",{"_index":1302,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbygithubid(githubid",{"_index":1321,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbygoogleid",{"_index":1303,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbygoogleid(googleid",{"_index":1323,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid",{"_index":1121,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":1134,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbyidandupdate(id",{"_index":1365,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyidwithprojects",{"_index":1304,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyidwithprojects(id",{"_index":1326,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":804,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["findone(@param('id",{"_index":901,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["findone(id",{"_index":866,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["findone(projectid",{"_index":817,"title":{},"body":{"injectables/ProjectService.html":{}}}],["findtenantbyprojectid",{"_index":1122,"title":{},"body":{"injectables/TenantsService.html":{}}}],["findtenantbyprojectid(projectid",{"_index":1136,"title":{},"body":{"injectables/TenantsService.html":{}}}],["finduserbyprojectid",{"_index":1305,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyprojectid(projectid",{"_index":1328,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["following",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["forwardref",{"_index":919,"title":{},"body":{"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["found",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1462,"title":{},"body":{"index.html":{}}}],["from('authgateimages",{"_index":619,"title":{},"body":{"injectables/ImageService.html":{}}}],["frontendurl",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["function",{"_index":540,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"classes/Tenant.html":{},"classes/User.html":{},"coverage.html":{}}}],["functions",{"_index":1456,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generalresponse",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":867,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["get('email/:email",{"_index":1060,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["get('facebook",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('facebook')@useguards(undefined",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('facebook/callback",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('facebook/callback')@useguards(undefined",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github')@useguards(undefined",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github/callback",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github/callback')@useguards(undefined",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@useguards(undefined",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback')@useguards(undefined",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('projects/:id",{"_index":1232,"title":{},"body":{"controllers/UserController.html":{}}}],["get('tenantprojects",{"_index":872,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getall",{"_index":861,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getall(authheader",{"_index":869,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getallpertenant",{"_index":862,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getallpertenant(authheader",{"_index":871,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getbyemail",{"_index":1049,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyemail(@param('email",{"_index":1090,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyemail(email",{"_index":1059,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyid",{"_index":1050,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyid(@param('id",{"_index":1086,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyid(id",{"_index":1062,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyidwithprojects",{"_index":1224,"title":{},"body":{"controllers/UserController.html":{}}}],["getbyidwithprojects(@param('id",{"_index":1253,"title":{},"body":{"controllers/UserController.html":{}}}],["getbyidwithprojects(id",{"_index":1231,"title":{},"body":{"controllers/UserController.html":{}}}],["getmessage",{"_index":925,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["getmessage(statuscode",{"_index":927,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["getprofile",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["gettenantbyprojectid",{"_index":1051,"title":{},"body":{"controllers/TenantController.html":{}}}],["gettenantbyprojectid(projectid",{"_index":1064,"title":{},"body":{"controllers/TenantController.html":{}}}],["getting",{"_index":1458,"title":{"index.html":{}},"body":{}}],["getuserprojects",{"_index":1306,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserprojects(projectref",{"_index":1330,"title":{},"body":{"injectables/UsersService.html":{}}}],["github",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubAuthStrategy.html":{},"dependencies.html":{}}}],["githubauthcallback",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback(@req",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback(req",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthstrategy",{"_index":249,"title":{"injectables/GithubAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GithubAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["githubid",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IndexManagementService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/userModel.html":{}}}],["given",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{}}}],["global",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{}}}],["google",{"_index":577,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["googleauthcallback",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(@req",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(req",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthstrategy",{"_index":250,"title":{"injectables/GoogleAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IndexManagementService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/userModel.html":{}}}],["grow",{"_index":1492,"title":{},"body":{"index.html":{}}}],["guard",{"_index":476,"title":{"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":477,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards/auth.guard",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["hashedpassword",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers",{"_index":883,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["headers('authorization",{"_index":889,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["here",{"_index":1502,"title":{},"body":{"index.html":{}}}],["host",{"_index":521,"title":{},"body":{"injectables/EmailService.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":599,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http://localhost:4200",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["http://localhost:4200/authorize",{"_index":1106,"title":{},"body":{"controllers/TenantController.html":{}}}],["http://localhost:4200/paypal/callback",{"_index":724,"title":{},"body":{"injectables/PaypalService.html":{}}}],["http://localhost:4200/paypal/cancel",{"_index":728,"title":{},"body":{"injectables/PaypalService.html":{}}}],["http://localhost:4200/reset",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpcode",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('authcode",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('login",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('registertenant",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('registeruser",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('token/user",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":592,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpexception('tenant",{"_index":1088,"title":{},"body":{"controllers/TenantController.html":{}}}],["httpexception('user",{"_index":1251,"title":{},"body":{"controllers/UserController.html":{}}}],["httpexception(error.message",{"_index":1094,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpexceptionfilter",{"_index":586,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":1508,"title":{},"body":{"index.html":{}}}],["https://pqvvtmvqzwsewlhbgdzr.supabase.co",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://pqvvtmvqzwsewlhbgdzr.supabase.co/storage/v1/object/public/authgateimages",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpstatus.internal_server_error",{"_index":1099,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpstatus.not_found",{"_index":1089,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpstatus.unauthorized",{"_index":1107,"title":{},"body":{"controllers/TenantController.html":{}}}],["id",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1381,"title":{},"body":{"coverage.html":{}}}],["id}provided@github.com",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["image",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["image.buffer",{"_index":621,"title":{},"body":{"injectables/ImageService.html":{}}}],["image.originalname",{"_index":1192,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["image.service",{"_index":1145,"title":{},"body":{"injectables/TenantsService.html":{}}}],["imageservice",{"_index":33,"title":{"injectables/ImageService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ImageService.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["imageurl",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implements",{"_index":493,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/IndexManagementService.html":{},"injectables/ResponseInterceptor.html":{}}}],["import",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["imports",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":1544,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["incorrect",{"_index":1174,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["index",{"_index":56,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["indexmanagementservice",{"_index":625,"title":{"injectables/IndexManagementService.html":{}},"body":{"injectables/IndexManagementService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["info",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["infrastructure/services/image.service",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":271,"title":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":634,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(paypaltransaction.name",{"_index":777,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["injectmodel(project.name",{"_index":826,"title":{},"body":{"injectables/ProjectService.html":{}}}],["injectmodel(tenant.name",{"_index":827,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{}}}],["injectmodel(user.name",{"_index":1341,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1471,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1474,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1093,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["instead",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intent",{"_index":712,"title":{},"body":{"injectables/PaypalService.html":{}}}],["intercept",{"_index":926,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["intercept(context",{"_index":929,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["internalservererrorexception",{"_index":1000,"title":{},"body":{"classes/Tenant.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception('failed",{"_index":1165,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["invalid",{"_index":1606,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["invalid'})@isnotempty({message",{"_index":1595,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isarray",{"_index":979,"title":{},"body":{"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isarray()@validatenested({each",{"_index":1549,"title":{},"body":{"classes/tenantModel.html":{}}}],["isboolean",{"_index":1529,"title":{},"body":{"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isdate",{"_index":1558,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["isemail",{"_index":957,"title":{},"body":{"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["isglobal",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatch",{"_index":1170,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["isnameinuse",{"_index":1158,"title":{},"body":{"injectables/TenantsService.html":{}}}],["isnotempty",{"_index":793,"title":{},"body":{"classes/Project.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isnumber",{"_index":980,"title":{},"body":{"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional",{"_index":795,"title":{},"body":{"classes/Project.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isarray",{"_index":1604,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":1584,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["isoptional()@isboolean",{"_index":1524,"title":{},"body":{"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isdate",{"_index":1552,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isemail",{"_index":1573,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["isoptional()@isnumber",{"_index":972,"title":{},"body":{"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isstring",{"_index":962,"title":{},"body":{"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isstring()@matches(/^(?=.*[a",{"_index":1577,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["ispasswordmatch",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":792,"title":{},"body":{"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["isstring()@isnotempty",{"_index":1526,"title":{},"body":{"classes/projectModel.html":{}}}],["isstring()@isnotempty({message",{"_index":1599,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isstring()@isoptional",{"_index":1521,"title":{},"body":{"classes/projectModel.html":{}}}],["isstring()@isurl()@isnotempty",{"_index":1519,"title":{},"body":{"classes/projectModel.html":{}}}],["isstring()@minlength(8)@isnotempty({message",{"_index":1539,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["istenant",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["istenant(clientid",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["isurl",{"_index":794,"title":{},"body":{"classes/Project.html":{},"classes/projectModel.html":{}}}],["item",{"_index":897,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["item.projects.length",{"_index":898,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["join",{"_index":1499,"title":{},"body":{"index.html":{}}}],["js",{"_index":1425,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["jwtconstants",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.imageurl",{"_index":1191,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["jwtconstants.secret",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["jwtmodule",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["kamil",{"_index":1506,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["letter",{"_index":1012,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["license",{"_index":1511,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1490,"title":{},"body":{"index.html":{}}}],["line",{"_index":554,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["link",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["links",{"_index":668,"title":{},"body":{"controllers/PaypalController.html":{}}}],["list",{"_index":857,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["local",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["login",{"_index":1157,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["loginwithfacebook",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithgithub",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithgoogle",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["long",{"_index":1017,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["lowercase",{"_index":1013,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["lts.1",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["map",{"_index":935,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["map((data",{"_index":938,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["match",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":1559,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["matches(/^(?=.[a",{"_index":1563,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["matches(/^\\s+@\\s+\\.\\s",{"_index":1593,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["matching",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1196,"title":{},"body":{"classes/User.html":{}}}],["message",{"_index":606,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["metadata",{"_index":1449,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":942,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["methods",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":1215,"title":{},"body":{"classes/User.html":{}}}],["minlength",{"_index":1560,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["minlength(8",{"_index":1562,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["miscellaneous",{"_index":1455,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1489,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1480,"title":{},"body":{"index.html":{}}}],["model",{"_index":630,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/paypal.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/project.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/tenant.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":635,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"classes/userProjectModel.html":{}}}],["mongoose.schema.types.objectid",{"_index":798,"title":{},"body":{"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["mongoosemodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":687,"title":{},"body":{"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot('mongodb://localhost:27017/authgate",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoservererror",{"_index":1035,"title":{},"body":{"classes/Tenant.html":{}}}],["more",{"_index":1501,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1507,"title":{},"body":{"index.html":{}}}],["name",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["name.familyname",{"_index":560,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["name.givenname",{"_index":559,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["nest",{"_index":1468,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1510,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":933,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1419,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"injectables/IndexManagementService.html":{},"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1082,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateUserModel.html":{}}}],["newemail",{"_index":1359,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["newpayload",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["newtransaction",{"_index":778,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["newtransaction.save",{"_index":780,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["newuserproject",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuserproject.authorizationaccesstoken",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuserproject.authorizationcode",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuserproject.expiredate",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":553,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["next(error",{"_index":1044,"title":{},"body":{"classes/Tenant.html":{}}}],["next(new",{"_index":1030,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["next.handle().pipe",{"_index":937,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["node.js",{"_index":1461,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":518,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":520,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailer.transporter",{"_index":517,"title":{},"body":{"injectables/EmailService.html":{}}}],["notacceptableexception",{"_index":1001,"title":{},"body":{"classes/Tenant.html":{}}}],["notfoundexception",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":840,"title":{},"body":{"injectables/ProjectService.html":{}}}],["notfoundexception('tenant",{"_index":907,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["notfoundexception('user",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`project",{"_index":851,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`tenant",{"_index":829,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["npm",{"_index":1473,"title":{},"body":{"index.html":{}}}],["null",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":752,"title":{},"body":{"classes/PaypalTransaction.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["oauth20",{"_index":581,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["obj",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["object",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(project",{"_index":852,"title":{},"body":{"injectables/ProjectService.html":{}}}],["object.assign(tenant",{"_index":1179,"title":{},"body":{"injectables/TenantsService.html":{}}}],["object.assign(user",{"_index":1373,"title":{},"body":{"injectables/UsersService.html":{}}}],["objectid",{"_index":1625,"title":{},"body":{"classes/userProjectModel.html":{}}}],["observable",{"_index":932,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["oldpassword",{"_index":1166,"title":{},"body":{"injectables/TenantsService.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["one",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{}}}],["onmoduleinit",{"_index":628,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["open",{"_index":1491,"title":{},"body":{"index.html":{}}}],["optional",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["order",{"_index":659,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["order.id",{"_index":666,"title":{},"body":{"controllers/PaypalController.html":{}}}],["order.links",{"_index":669,"title":{},"body":{"controllers/PaypalController.html":{}}}],["order.result",{"_index":731,"title":{},"body":{"injectables/PaypalService.html":{}}}],["order.status",{"_index":667,"title":{},"body":{"controllers/PaypalController.html":{}}}],["order/:orderid",{"_index":655,"title":{},"body":{"controllers/PaypalController.html":{}}}],["orderid",{"_index":657,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["out",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["outside",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1515,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1355,"title":{},"body":{"injectables/UsersService.html":{}}}],["p._id.tostring",{"_index":1356,"title":{},"body":{"injectables/UsersService.html":{}}}],["package",{"_index":1416,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":661,"title":{},"body":{"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":903,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["pass",{"_index":528,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":544,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":533,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["passportstrategy(strategy",{"_index":565,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["password",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInRequest.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["password/${resettoken",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["password/request",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["password:\\n",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":1019,"title":{},"body":{"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":884,"title":{},"body":{"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":879,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["patch('undelete/:id",{"_index":877,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["patch('updatewithpassword",{"_index":1073,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["pattern",{"_index":1594,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["payer",{"_index":675,"title":{},"body":{"controllers/PaypalController.html":{}}}],["payeremail",{"_index":739,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["payername",{"_index":741,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["payload",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["payload.role",{"_index":894,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["payload.sub",{"_index":891,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["paypal",{"_index":650,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["paypal.core.liveenvironment",{"_index":703,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.core.paypalhttpclient",{"_index":696,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.core.paypalhttpclient(environment",{"_index":708,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.core.sandboxenvironment",{"_index":706,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.orders.orderscapturerequest(orderid",{"_index":732,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.orders.orderscreaterequest",{"_index":709,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal/checkout",{"_index":697,"title":{},"body":{"injectables/PaypalService.html":{},"dependencies.html":{}}}],["paypalclient",{"_index":691,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypalcontroller",{"_index":648,"title":{"controllers/PaypalController.html":{}},"body":{"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"coverage.html":{}}}],["paypalmodule",{"_index":13,"title":{"modules/PaypalModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaypalModule.html":{},"modules.html":{},"overview.html":{}}}],["paypalservice",{"_index":662,"title":{"injectables/PaypalService.html":{}},"body":{"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"coverage.html":{},"overview.html":{}}}],["paypaltransaction",{"_index":683,"title":{"classes/PaypalTransaction.html":{}},"body":{"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"coverage.html":{}}}],["paypaltransaction.name",{"_index":688,"title":{},"body":{"modules/PaypalModule.html":{}}}],["paypaltransactiondocument",{"_index":765,"title":{},"body":{"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"miscellaneous/typealiases.html":{}}}],["paypaltransactionmodel",{"_index":774,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["paypaltransactionschema",{"_index":682,"title":{},"body":{"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paypaltransactionservice",{"_index":679,"title":{"injectables/PaypalTransactionService.html":{}},"body":{"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"coverage.html":{},"overview.html":{}}}],["phone",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["photos",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["photos[0",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["photos[0].value",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["picture",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["please",{"_index":1004,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"index.html":{}}}],["port",{"_index":523,"title":{},"body":{"injectables/EmailService.html":{}}}],["post",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["post('authcode",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('authorize",{"_index":1055,"title":{},"body":{"controllers/TenantController.html":{}}}],["post('capture",{"_index":654,"title":{},"body":{"controllers/PaypalController.html":{}}}],["post('create",{"_index":658,"title":{},"body":{"controllers/PaypalController.html":{}}}],["post('image/:id",{"_index":1108,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["post('image/:id')@useinterceptors(undefined",{"_index":1076,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["post('istenant",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('registertenant",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('registeruser",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/user",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["presentation/controllers/user.controller",{"_index":1281,"title":{},"body":{"modules/UserModule.html":{}}}],["presentation/dtos/tenant.model",{"_index":1143,"title":{},"body":{"injectables/TenantsService.html":{}}}],["presentation/dtos/user.model",{"_index":1339,"title":{},"body":{"injectables/UsersService.html":{}}}],["private",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":701,"title":{},"body":{"injectables/PaypalService.html":{}}}],["process.env.password_reset_jwt_secret",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.paypal_client_id",{"_index":704,"title":{},"body":{"injectables/PaypalService.html":{}}}],["process.env.paypal_client_secret",{"_index":705,"title":{},"body":{"injectables/PaypalService.html":{}}}],["processauth",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["processauth(projectid",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["production",{"_index":702,"title":{},"body":{"injectables/PaypalService.html":{},"index.html":{}}}],["profile",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["profile.email",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile.id",{"_index":558,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["profilefields",{"_index":549,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["progressive",{"_index":1460,"title":{},"body":{"index.html":{}}}],["proj",{"_index":845,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["proj._id.tostring",{"_index":846,"title":{},"body":{"injectables/ProjectService.html":{}}}],["proj.clientid",{"_index":1186,"title":{},"body":{"injectables/TenantsService.html":{}}}],["proj.clientsecret",{"_index":1187,"title":{},"body":{"injectables/TenantsService.html":{}}}],["proj.projectid.tostring",{"_index":1377,"title":{},"body":{"injectables/UsersService.html":{}}}],["project",{"_index":197,"title":{"classes/Project.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["project._id.tostring",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{}}}],["project.authorizationaccesstoken",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["project.authorizationcode",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["project.deleted",{"_index":854,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["project.entity",{"_index":999,"title":{},"body":{"classes/Tenant.html":{}}}],["project.module",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["project.name",{"_index":922,"title":{},"body":{"modules/ProjectsModule.html":{}}}],["project.projectid",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["projectid",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/userProjectModel.html":{}}}],["projectlist",{"_index":835,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["projectlist.push(item",{"_index":899,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["projectmodel",{"_index":328,"title":{"classes/projectModel.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"coverage.html":{},"classes/projectModel.html":{}}}],["projectname",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["projectref",{"_index":1332,"title":{},"body":{"injectables/UsersService.html":{}}}],["projects",{"_index":841,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/Tenant.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["projects._id",{"_index":843,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["projects.clientid",{"_index":1181,"title":{},"body":{"injectables/TenantsService.html":{}}}],["projects.clientsecret",{"_index":1182,"title":{},"body":{"injectables/TenantsService.html":{}}}],["projectsafterupdate",{"_index":853,"title":{},"body":{"injectables/ProjectService.html":{}}}],["projectschema",{"_index":799,"title":{},"body":{"classes/Project.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projectscontroller",{"_index":859,"title":{"controllers/ProjectsController.html":{}},"body":{"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"coverage.html":{}}}],["projectservice",{"_index":45,"title":{"injectables/ProjectService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["projectsmodule",{"_index":14,"title":{"modules/ProjectsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["projetlistcreated",{"_index":892,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["projref",{"_index":1352,"title":{},"body":{"injectables/UsersService.html":{}}}],["projref.projectid",{"_index":1354,"title":{},"body":{"injectables/UsersService.html":{}}}],["promise",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":762,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["prop()@isstring",{"_index":1291,"title":{},"body":{"classes/UserProject.html":{}}}],["prop()@isstring()@isoptional",{"_index":785,"title":{},"body":{"classes/Project.html":{}}}],["prop({default",{"_index":755,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["prop({match",{"_index":992,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["prop({min",{"_index":1195,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":753,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["prop({type",{"_index":749,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["prop({unique",{"_index":1201,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":507,"title":{"properties.html":{}},"body":{"injectables/EmailService.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["purchase_units",{"_index":713,"title":{},"body":{"injectables/PaypalService.html":{}}}],["put",{"_index":952,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["read",{"_index":1500,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["redirecturl",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["ref",{"_index":1293,"title":{},"body":{"classes/UserProject.html":{}}}],["reflect",{"_index":1448,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":538,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["registered",{"_index":1040,"title":{},"body":{"classes/Tenant.html":{}}}],["remove",{"_index":863,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":1103,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":874,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["removeproject",{"_index":1225,"title":{},"body":{"controllers/UserController.html":{}}}],["removeproject(id",{"_index":1235,"title":{},"body":{"controllers/UserController.html":{}}}],["repository",{"_index":1470,"title":{},"body":{"index.html":{}}}],["req",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaypalService.html":{},"injectables/ResponseInterceptor.html":{}}}],["request.headers.authorization?.split",{"_index":504,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["request.method",{"_index":943,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["request.prefer('return=representation",{"_index":710,"title":{},"body":{"injectables/PaypalService.html":{}}}],["request.requestbody",{"_index":711,"title":{},"body":{"injectables/PaypalService.html":{}}}],["request['user",{"_index":499,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["required",{"_index":766,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["required'})@isemail",{"_index":1596,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["required'})@matches(/^(?=.*[a",{"_index":1589,"title":{},"body":{"classes/updateUserModel.html":{}}}],["required'})@matches(/^(?=.[a",{"_index":1540,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["res",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.redirect(redirecturl",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resetlink",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassword",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(token",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpasswordexpires",{"_index":982,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["resetpasswordtoken",{"_index":983,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["resettoken",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["resource",{"_index":951,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["response",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["response.status(status).json",{"_index":604,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.statuscode",{"_index":940,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["responseinterceptor",{"_index":923,"title":{"injectables/ResponseInterceptor.html":{}},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["result",{"_index":1256,"title":{},"body":{"controllers/UserController.html":{}}}],["results",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1252,"title":{},"body":{"controllers/UserController.html":{}}}],["return",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["return_url",{"_index":723,"title":{},"body":{"injectables/PaypalService.html":{}}}],["returns",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["run",{"_index":1477,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":934,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":936,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["s+@\\s+\\.\\s",{"_index":1003,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["s3",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["safe",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salt",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["save",{"_index":1307,"title":{},"body":{"injectables/UsersService.html":{}}}],["save(user",{"_index":1334,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":1465,"title":{},"body":{"index.html":{}}}],["schema",{"_index":689,"title":{},"body":{"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"modules/TenantModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{}}}],["schemafactory",{"_index":763,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["schemafactory.createforclass(paypaltransaction",{"_index":769,"title":{},"body":{"classes/PaypalTransaction.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(project",{"_index":800,"title":{},"body":{"classes/Project.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(tenant",{"_index":1026,"title":{},"body":{"classes/Tenant.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1219,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(userproject",{"_index":1297,"title":{},"body":{"classes/UserProject.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":550,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["sdk",{"_index":699,"title":{},"body":{"injectables/PaypalService.html":{},"dependencies.html":{}}}],["secret",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["secure",{"_index":525,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail",{"_index":509,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(to",{"_index":513,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendpasswordresetemail",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendpasswordresetemail(@body('email",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendpasswordresetemail(email",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendresetpasswordresetemail",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendresetpasswordresetemail(email",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":698,"title":{},"body":{"injectables/PaypalService.html":{},"dependencies.html":{},"index.html":{}}}],["services/auth.service",{"_index":543,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["services/users.service",{"_index":570,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["side",{"_index":1466,"title":{},"body":{"index.html":{}}}],["signin",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(email",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(signindto",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto.password",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinrequest",{"_index":130,"title":{"classes/SignInRequest.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignInRequest.html":{},"coverage.html":{}}}],["signinresponse",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["signintenantresponse",{"_index":316,"title":{"classes/SignInTenantResponse.html":{}},"body":{"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"coverage.html":{}}}],["signinuserresponse",{"_index":314,"title":{"classes/SignInUserResponse.html":{}},"body":{"injectables/AuthService.html":{},"classes/SignInUserResponse.html":{},"coverage.html":{}}}],["signinwithfacebook",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithfacebook(user",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithgithub",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithgithub(user",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithgoogle",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithgoogle(user",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{}}}],["signupastenant",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupastenant(@body",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupastenant(tenantsignupdto",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupasuser",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupasuser(@body",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupasuser(usersignupdto",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["smtp.office365.com",{"_index":522,"title":{},"body":{"injectables/EmailService.html":{}}}],["source",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["sparse",{"_index":647,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/User.html":{}}}],["special",{"_index":1545,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["sponsors",{"_index":1494,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1457,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../paypal.entity.ts",{"_index":1567,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../project.entity.ts",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabaseclient.ts",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tenant.entity.ts",{"_index":1568,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":1569,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../userproject.entity.ts",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["src/constants",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["src/constants.ts",{"_index":1383,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/paypal.entity",{"_index":684,"title":{},"body":{"modules/PaypalModule.html":{},"injectables/PaypalTransactionService.html":{}}}],["src/domain/entities/paypal.entity.ts",{"_index":746,"title":{},"body":{"classes/PaypalTransaction.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/paypal.entity.ts:12",{"_index":758,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:15",{"_index":761,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:18",{"_index":754,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:21",{"_index":757,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:24",{"_index":759,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:27",{"_index":760,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:30",{"_index":756,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:9",{"_index":751,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/project.entity",{"_index":824,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["src/domain/entities/project.entity.ts",{"_index":781,"title":{},"body":{"classes/Project.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/project.entity.ts:13",{"_index":786,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:18",{"_index":787,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:23",{"_index":791,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:29",{"_index":784,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:32",{"_index":789,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:8",{"_index":782,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/tenant.entity",{"_index":825,"title":{},"body":{"injectables/ProjectService.html":{},"modules/TenantModule.html":{}}}],["src/domain/entities/tenant.entity.ts",{"_index":981,"title":{},"body":{"classes/Tenant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/tenant.entity.ts:17",{"_index":984,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:20",{"_index":990,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:27",{"_index":988,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:46",{"_index":991,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:49",{"_index":986,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:52",{"_index":996,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:55",{"_index":995,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:60",{"_index":993,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:63",{"_index":985,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:71",{"_index":998,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:74",{"_index":989,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:77",{"_index":994,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:80",{"_index":997,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:83",{"_index":987,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/user.entity",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/UserController.html":{}}}],["src/domain/entities/user.entity.ts",{"_index":1193,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/user.entity.ts:11",{"_index":1194,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:14",{"_index":1206,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:21",{"_index":1200,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:40",{"_index":1207,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:43",{"_index":1198,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:46",{"_index":1211,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:49",{"_index":1210,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:54",{"_index":1208,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:57",{"_index":1213,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:60",{"_index":1205,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:66",{"_index":1197,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:69",{"_index":1204,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:72",{"_index":1203,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:75",{"_index":1202,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:78",{"_index":1199,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:81",{"_index":1212,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:84",{"_index":1209,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/userproject.entity",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInUserResponse.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["src/domain/entities/userproject.entity.ts",{"_index":1283,"title":{},"body":{"classes/UserProject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/userproject.entity.ts:11",{"_index":1286,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:14",{"_index":1285,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:17",{"_index":1290,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:21",{"_index":1292,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:24",{"_index":1287,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:27",{"_index":1288,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:30",{"_index":1295,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:33",{"_index":1289,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:8",{"_index":1294,"title":{},"body":{"classes/UserProject.html":{}}}],["src/infrastructure/paypal/paypal",{"_index":685,"title":{},"body":{"modules/PaypalModule.html":{},"injectables/PaypalTransactionService.html":{},"coverage.html":{}}}],["src/infrastructure/paypal/paypal.service",{"_index":663,"title":{},"body":{"controllers/PaypalController.html":{},"modules/PaypalModule.html":{}}}],["src/infrastructure/paypal/paypal.service.ts",{"_index":690,"title":{},"body":{"injectables/PaypalService.html":{},"coverage.html":{}}}],["src/infrastructure/paypal/paypal.service.ts:26",{"_index":695,"title":{},"body":{"injectables/PaypalService.html":{}}}],["src/infrastructure/paypal/paypal.service.ts:50",{"_index":694,"title":{},"body":{"injectables/PaypalService.html":{}}}],["src/infrastructure/paypal/paypal.service.ts:8",{"_index":693,"title":{},"body":{"injectables/PaypalService.html":{}}}],["src/infrastructure/services/auth.service",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["src/infrastructure/services/auth.service.ts",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/services/auth.service.ts:122",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:152",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:226",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:24",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:251",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:275",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:297",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:32",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:321",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:355",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:376",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:400",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:92",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/email.service",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["src/infrastructure/services/email.service.ts",{"_index":506,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/infrastructure/services/email.service.ts:21",{"_index":516,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/infrastructure/services/email.service.ts:7",{"_index":512,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/infrastructure/services/image.service",{"_index":1116,"title":{},"body":{"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/services/image.service.ts",{"_index":609,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{}}}],["src/infrastructure/services/image.service.ts:11",{"_index":614,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/infrastructure/services/image.service.ts:8",{"_index":611,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/infrastructure/services/indexmanagement.service",{"_index":1282,"title":{},"body":{"modules/UserModule.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts",{"_index":626,"title":{},"body":{"injectables/IndexManagementService.html":{},"coverage.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts:10",{"_index":633,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts:14",{"_index":632,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts:7",{"_index":631,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["src/infrastructure/services/project.service",{"_index":886,"title":{},"body":{"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/UserController.html":{}}}],["src/infrastructure/services/project.service.ts",{"_index":801,"title":{},"body":{"injectables/ProjectService.html":{},"coverage.html":{}}}],["src/infrastructure/services/project.service.ts:114",{"_index":820,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:136",{"_index":814,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:14",{"_index":808,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:20",{"_index":811,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:50",{"_index":816,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:62",{"_index":818,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:79",{"_index":823,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/tenants.service",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{}}}],["src/infrastructure/services/tenants.service.ts",{"_index":1118,"title":{},"body":{"injectables/TenantsService.html":{},"coverage.html":{}}}],["src/infrastructure/services/tenants.service.ts:156",{"_index":1138,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:166",{"_index":1139,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:176",{"_index":1127,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:18",{"_index":1124,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:198",{"_index":1126,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:213",{"_index":1137,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:24",{"_index":1129,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:29",{"_index":1135,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:33",{"_index":1133,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:37",{"_index":1131,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:41",{"_index":1140,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:97",{"_index":1142,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/users.service",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["src/infrastructure/services/users.service.ts",{"_index":1298,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/services/users.service.ts:103",{"_index":1337,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:145",{"_index":1338,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:19",{"_index":1308,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:202",{"_index":1333,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:212",{"_index":1315,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:240",{"_index":1336,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:250",{"_index":1309,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:26",{"_index":1311,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:263",{"_index":1329,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:31",{"_index":1314,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:36",{"_index":1316,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:44",{"_index":1317,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:49",{"_index":1325,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:53",{"_index":1327,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:64",{"_index":1318,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:68",{"_index":1331,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:87",{"_index":1322,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:91",{"_index":1324,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:95",{"_index":1320,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:99",{"_index":1335,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/strategies/facebookauth.strategy",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/strategies/facebookauth.strategy.ts",{"_index":531,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/strategies/facebookauth.strategy.ts:11",{"_index":536,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["src/infrastructure/strategies/facebookauth.strategy.ts:24",{"_index":541,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["src/infrastructure/strategies/githubauth.strategy",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/strategies/githubauth.strategy.ts",{"_index":564,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/strategies/githubauth.strategy.ts:10",{"_index":567,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["src/infrastructure/strategies/githubauth.strategy.ts:25",{"_index":568,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["src/infrastructure/strategies/googleauth.strategy",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/strategies/googleauth.strategy.ts",{"_index":576,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/strategies/googleauth.strategy.ts:21",{"_index":580,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["src/infrastructure/strategies/googleauth.strategy.ts:8",{"_index":579,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["src/infrastructure/supabase/supabaseclient.ts",{"_index":1399,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1402,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth.module.ts",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/paypal.module.ts",{"_index":680,"title":{},"body":{"modules/PaypalModule.html":{}}}],["src/modules/project.module.ts",{"_index":918,"title":{},"body":{"modules/ProjectsModule.html":{}}}],["src/modules/tenant.module.ts",{"_index":1114,"title":{},"body":{"modules/TenantModule.html":{}}}],["src/modules/user.module.ts",{"_index":1279,"title":{},"body":{"modules/UserModule.html":{}}}],["src/presentation/controllers/auth.controller",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/presentation/controllers/auth.controller.ts",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/presentation/controllers/auth.controller.ts:105",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:109",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:121",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:125",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:137",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:141",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:152",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:157",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:170",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:36",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:42",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:48",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:54",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:60",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:81",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/paypal.controller",{"_index":681,"title":{},"body":{"modules/PaypalModule.html":{}}}],["src/presentation/controllers/paypal.controller.ts",{"_index":649,"title":{},"body":{"controllers/PaypalController.html":{},"coverage.html":{}}}],["src/presentation/controllers/paypal.controller.ts:19",{"_index":656,"title":{},"body":{"controllers/PaypalController.html":{}}}],["src/presentation/controllers/paypal.controller.ts:9",{"_index":660,"title":{},"body":{"controllers/PaypalController.html":{}}}],["src/presentation/controllers/project.controller",{"_index":920,"title":{},"body":{"modules/ProjectsModule.html":{}}}],["src/presentation/controllers/project.controller.ts",{"_index":860,"title":{},"body":{"controllers/ProjectsController.html":{},"coverage.html":{}}}],["src/presentation/controllers/project.controller.ts:117",{"_index":876,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:141",{"_index":882,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:32",{"_index":865,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:46",{"_index":870,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:62",{"_index":873,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:71",{"_index":868,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:76",{"_index":880,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:92",{"_index":878,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/tenant.controller",{"_index":1115,"title":{},"body":{"modules/TenantModule.html":{}}}],["src/presentation/controllers/tenant.controller.ts",{"_index":1046,"title":{},"body":{"controllers/TenantController.html":{},"coverage.html":{}}}],["src/presentation/controllers/tenant.controller.ts:110",{"_index":1067,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:132",{"_index":1066,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:148",{"_index":1057,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:167",{"_index":1077,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:174",{"_index":1065,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:182",{"_index":1078,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:33",{"_index":1058,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:38",{"_index":1063,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:47",{"_index":1061,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:56",{"_index":1069,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:86",{"_index":1074,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/user.controller.ts",{"_index":1222,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/presentation/controllers/user.controller.ts:138",{"_index":1240,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:159",{"_index":1244,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:183",{"_index":1238,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:205",{"_index":1234,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:221",{"_index":1237,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:245",{"_index":1245,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:252",{"_index":1246,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:40",{"_index":1228,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:45",{"_index":1230,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:61",{"_index":1233,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:77",{"_index":1229,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:93",{"_index":1227,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/dtos/project.model",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"modules/ProjectsModule.html":{}}}],["src/presentation/dtos/project.model.ts",{"_index":1405,"title":{},"body":{"coverage.html":{},"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:12",{"_index":1528,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:16",{"_index":1522,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:20",{"_index":1523,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:24",{"_index":1527,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:29",{"_index":1520,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:33",{"_index":1525,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/signinrequest.model.ts",{"_index":956,"title":{},"body":{"classes/SignInRequest.html":{},"coverage.html":{}}}],["src/presentation/dtos/signinrequest.model.ts:5",{"_index":958,"title":{},"body":{"classes/SignInRequest.html":{}}}],["src/presentation/dtos/signinrequest.model.ts:8",{"_index":959,"title":{},"body":{"classes/SignInRequest.html":{}}}],["src/presentation/dtos/signintenantresponse.model",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts",{"_index":960,"title":{},"body":{"classes/SignInTenantResponse.html":{},"coverage.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:11",{"_index":964,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:15",{"_index":967,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:19",{"_index":963,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:23",{"_index":969,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:27",{"_index":965,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:30",{"_index":968,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:5",{"_index":961,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:8",{"_index":966,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts",{"_index":970,"title":{},"body":{"classes/SignInUserResponse.html":{},"coverage.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:12",{"_index":971,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:15",{"_index":976,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:18",{"_index":974,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:22",{"_index":977,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:26",{"_index":975,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:30",{"_index":973,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:33",{"_index":978,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/tenant.model",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/presentation/dtos/tenant.model.ts",{"_index":1406,"title":{},"body":{"coverage.html":{},"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:19",{"_index":1538,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:22",{"_index":1536,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:31",{"_index":1547,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:32",{"_index":1534,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:36",{"_index":1554,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:40",{"_index":1553,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:44",{"_index":1537,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:48",{"_index":1548,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:52",{"_index":1533,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:56",{"_index":1556,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:62",{"_index":1551,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:65",{"_index":1555,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:69",{"_index":1535,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model",{"_index":1146,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/presentation/dtos/updatetenant.model.ts",{"_index":1407,"title":{},"body":{"coverage.html":{},"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:17",{"_index":1576,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:21",{"_index":1574,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:25",{"_index":1583,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:29",{"_index":1570,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:33",{"_index":1587,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:37",{"_index":1575,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:43",{"_index":1586,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:47",{"_index":1572,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:51",{"_index":1582,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:61",{"_index":1581,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:65",{"_index":1571,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updateuser.model",{"_index":1340,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/presentation/dtos/updateuser.model.ts",{"_index":1408,"title":{},"body":{"coverage.html":{},"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:17",{"_index":1600,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:24",{"_index":1597,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:28",{"_index":1603,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:32",{"_index":1598,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:36",{"_index":1588,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:40",{"_index":1605,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:44",{"_index":1592,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:48",{"_index":1602,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:60",{"_index":1601,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:72",{"_index":1591,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/user.model",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"modules/ProjectsModule.html":{}}}],["src/presentation/dtos/user.model.ts",{"_index":1410,"title":{},"body":{"coverage.html":{},"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:18",{"_index":1615,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:27",{"_index":1616,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:28",{"_index":1608,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:32",{"_index":1620,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:36",{"_index":1619,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:43",{"_index":1610,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:47",{"_index":1617,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:51",{"_index":1612,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:55",{"_index":1613,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:59",{"_index":1611,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:63",{"_index":1614,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:67",{"_index":1607,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:71",{"_index":1618,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:74",{"_index":1621,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:78",{"_index":1609,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/userproject.model.ts",{"_index":1411,"title":{},"body":{"coverage.html":{},"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.model.ts:12",{"_index":1622,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.model.ts:15",{"_index":1624,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.model.ts:6",{"_index":1626,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.model.ts:9",{"_index":1623,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/filters/http",{"_index":588,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/presentation/guards/auth.guard.ts",{"_index":478,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/presentation/guards/auth.guard.ts:12",{"_index":483,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/presentation/guards/auth.guard.ts:15",{"_index":486,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/presentation/guards/auth.guard.ts:30",{"_index":491,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/presentation/guards/auth.guard.ts:40",{"_index":489,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/presentation/interceptors/response.interceptor.ts",{"_index":924,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/presentation/interceptors/response.interceptor.ts:12",{"_index":931,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/presentation/interceptors/response.interceptor.ts:27",{"_index":928,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["start",{"_index":1478,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1481,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1482,"title":{},"body":{"index.html":{}}}],["started",{"_index":1459,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1469,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1382,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":602,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["statuscode",{"_index":605,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["stay",{"_index":1503,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":534,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["string",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["stripe",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["strong",{"_index":1042,"title":{},"body":{"classes/Tenant.html":{}}}],["sub",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":514,"title":{},"body":{"injectables/EmailService.html":{}}}],["success",{"_index":1261,"title":{},"body":{"controllers/UserController.html":{}}}],["successfully",{"_index":948,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"controllers/UserController.html":{}}}],["supabase",{"_index":615,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["supabase.storage",{"_index":618,"title":{},"body":{"injectables/ImageService.html":{}}}],["supabase/supabase",{"_index":1424,"title":{},"body":{"dependencies.html":{}}}],["supabase/supabaseclient",{"_index":616,"title":{},"body":{"injectables/ImageService.html":{}}}],["supabasekey",{"_index":1400,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["supabaseurl",{"_index":1401,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":545,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["support",{"_index":1495,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1513,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":944,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["t.name",{"_index":1169,"title":{},"body":{"injectables/TenantsService.html":{}}}],["table",{"_index":1415,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1414,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":1038,"title":{},"body":{"classes/Tenant.html":{}}}],["targetproject",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["targetproject.callbackurl",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetproject.deleted",{"_index":1258,"title":{},"body":{"controllers/UserController.html":{}}}],["targetproject.name",{"_index":1259,"title":{},"body":{"controllers/UserController.html":{}}}],["targetproject.push(project",{"_index":1357,"title":{},"body":{"injectables/UsersService.html":{}}}],["targettenant",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["targettenant.projects.find",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["targetuser",{"_index":1269,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["targetuser._id",{"_index":1273,"title":{},"body":{"controllers/UserController.html":{}}}],["targetuser.email",{"_index":1362,"title":{},"body":{"injectables/UsersService.html":{}}}],["targetuserid",{"_index":1272,"title":{},"body":{"controllers/UserController.html":{}}}],["targetuserproject",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["targetuserproject.authorizationaccesstoken",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["targetuserproject.deleted",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["targetuserproject.expiredate",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["tenant",{"_index":357,"title":{"classes/Tenant.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tenant._id",{"_index":908,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["tenant.confirmpassword",{"_index":1178,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.deleted",{"_index":1180,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.email",{"_index":1167,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.image",{"_index":1190,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.module",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/UserModule.html":{}}}],["tenant.name",{"_index":1117,"title":{},"body":{"modules/TenantModule.html":{},"injectables/TenantsService.html":{}}}],["tenant.password",{"_index":1172,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.projects",{"_index":839,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.projects.find",{"_index":1185,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["tenant.projects.find((proj",{"_index":847,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.projects.length",{"_index":838,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.projects.push(createdproject",{"_index":833,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.save",{"_index":834,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{}}}],["tenantafterupdate",{"_index":1162,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenantcontroller",{"_index":1045,"title":{"controllers/TenantController.html":{}},"body":{"controllers/TenantController.html":{},"modules/TenantModule.html":{},"coverage.html":{}}}],["tenantdocument",{"_index":1002,"title":{},"body":{"classes/Tenant.html":{},"injectables/TenantsService.html":{},"miscellaneous/typealiases.html":{}}}],["tenantid",{"_index":810,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"classes/projectModel.html":{}}}],["tenantmodel",{"_index":135,"title":{"classes/tenantModel.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"coverage.html":{},"classes/tenantModel.html":{}}}],["tenantmodule",{"_index":15,"title":{"modules/TenantModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["tenants",{"_index":895,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["tenants.service",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["tenants.some",{"_index":1159,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenants.some((t",{"_index":1168,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenantschema",{"_index":1025,"title":{},"body":{"classes/Tenant.html":{},"modules/TenantModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tenantschema.post('save",{"_index":1032,"title":{},"body":{"classes/Tenant.html":{}}}],["tenantschema.pre('save",{"_index":1027,"title":{},"body":{"classes/Tenant.html":{}}}],["tenantservice",{"_index":888,"title":{},"body":{"controllers/ProjectsController.html":{},"injectables/UsersService.html":{}}}],["tenantsignupdto",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tenantsservice",{"_index":47,"title":{"injectables/TenantsService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["tenanttocreate",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":1485,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1488,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1487,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1484,"title":{},"body":{"index.html":{}}}],["text",{"_index":515,"title":{},"body":{"injectables/EmailService.html":{}}}],["thanks",{"_index":1493,"title":{},"body":{"index.html":{}}}],["this.authservice.processauth",{"_index":1260,"title":{},"body":{"controllers/UserController.html":{}}}],["this.authservice.resetpassword",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendresetpasswordresetemail(email",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto.email",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinwithfacebook(user1",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinwithgithub(user1",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinwithgoogle(user1",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupastenant(tenantsignupdto",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupasuser(usersignupdto",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validatefacebookuser(user",{"_index":561,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["this.authservice.validategithubuser(profile",{"_index":575,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["this.authservice.validategoogleuser(profile",{"_index":585,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["this.configservice.get('gmail_pass",{"_index":529,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('gmail_user",{"_index":527,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.confirmpassword",{"_index":1018,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["this.emailservice.sendmail",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ensureindexes",{"_index":638,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.extracttokenfromheader(request",{"_index":496,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.findall",{"_index":1102,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{}}}],["this.findallprojectspertenant(tenantid",{"_index":836,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.findbyemail(email",{"_index":1154,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.findbyemail(newemail",{"_index":1361,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findbyid(id",{"_index":1153,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["this.frontendurl}/auth/facebook/callback?token=${access_token}&user=${encodeuricomponent(json.stringify(user",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.frontendurl}/auth/github/callback?token=${access_token}&user=${json.stringify(user",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.frontendurl}/auth/google/callback?token=${access_token}&user=${json.stringify(user",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.getmessage(statuscode",{"_index":941,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["this.getuserprojects(user.projects",{"_index":1348,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.imageservice.upload('tenants",{"_index":1189,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.imageservice.upload('users",{"_index":1378,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.ismodified('password",{"_index":1028,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["this.jwtservice.sign",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(newpayload",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":501,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["this.password",{"_index":1029,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["this.paypalclient",{"_index":707,"title":{},"body":{"injectables/PaypalService.html":{}}}],["this.paypalclient.execute(request",{"_index":730,"title":{},"body":{"injectables/PaypalService.html":{}}}],["this.paypalservice.captureorder(orderid",{"_index":672,"title":{},"body":{"controllers/PaypalController.html":{}}}],["this.paypalservice.createorder",{"_index":665,"title":{},"body":{"controllers/PaypalController.html":{}}}],["this.paypaltransactionmodel(data",{"_index":779,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["this.paypaltransactionservice.createtransaction(transactiondata",{"_index":744,"title":{},"body":{"injectables/PaypalService.html":{}}}],["this.projectmodel",{"_index":832,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectservice.create",{"_index":893,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.delete(id",{"_index":913,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.findallprojectspertenant(tenantid",{"_index":900,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.findone(id",{"_index":902,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.findone(projectid",{"_index":1257,"title":{},"body":{"controllers/UserController.html":{}}}],["this.projectservice.undelete(id",{"_index":909,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.update",{"_index":904,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.signin(email",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tenantmodel",{"_index":842,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.tenantmodel(createtenantdto",{"_index":1148,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantmodel.find",{"_index":1152,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantmodel.findbyid(id",{"_index":1150,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantmodel.findbyid(tenantid",{"_index":828,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.tenantmodel.findone",{"_index":1151,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantmodel.findoneandupdate",{"_index":1163,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantservice.findall",{"_index":896,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.tenantservice.findbyid(userid",{"_index":912,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.tenantservice.findtenantbyprojectid",{"_index":1353,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.tenantservice.findtenantbyprojectid(id",{"_index":906,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.tenantsservice.addimage(id",{"_index":1110,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.authorizeclient",{"_index":1105,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.authorizeclient(clientid",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.tenantsservice.create(tenanttocreate",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tenantsservice.findall",{"_index":1085,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.findbyemail(decoded.email",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tenantsservice.findbyemail(email",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TenantController.html":{}}}],["this.tenantsservice.findbyid(id",{"_index":1087,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.findtenantbyprojectid(projectid",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TenantController.html":{}}}],["this.tenantsservice.remove(id",{"_index":1104,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.undelete(id",{"_index":1101,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.update",{"_index":1092,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.updatewithpassword",{"_index":1100,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.transporter",{"_index":519,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.transporter.sendmail",{"_index":530,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.usermodel",{"_index":1364,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel(createuserdto",{"_index":1343,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.collection.createindex",{"_index":644,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.usermodel.collection.dropindex('facebookid_1",{"_index":643,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.usermodel.collection.dropindex('githubid_1",{"_index":642,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.usermodel.collection.dropindex('googleid_1",{"_index":639,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.usermodel.find",{"_index":1346,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().populate('projects",{"_index":1349,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id",{"_index":1350,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id).exec",{"_index":1366,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid",{"_index":1374,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1351,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.addimage(id",{"_index":1274,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.delete(id",{"_index":1270,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1249,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":1255,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(id",{"_index":1250,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(userid",{"_index":905,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/UserController.html":{}}}],["this.userservice.findbyidwithprojects(id",{"_index":1254,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduserbyprojectid(id",{"_index":1271,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":1268,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.undelete(id",{"_index":1267,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":1265,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatewithpassword",{"_index":1266,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.create",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(usertocreate",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.creategithubuser",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findalluserswithprojects",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.findbyemail(decoded.email",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyemail(email",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyfacebookid(facebookid",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbygithubid(id",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbygoogleid(id",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyid(userid",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.save(user",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.verifytokenandgetpayload(authheader",{"_index":890,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["this.verifytokenandgetpayload(token",{"_index":498,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["throw",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["timestamps",{"_index":797,"title":{},"body":{"classes/Project.html":{}}}],["token",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["touch",{"_index":1504,"title":{},"body":{"index.html":{}}}],["transaction.service",{"_index":686,"title":{},"body":{"modules/PaypalModule.html":{},"injectables/PaypalService.html":{}}}],["transaction.service.ts",{"_index":770,"title":{},"body":{"injectables/PaypalTransactionService.html":{},"coverage.html":{}}}],["transaction.service.ts:10",{"_index":773,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["transaction.service.ts:16",{"_index":776,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["transactiondata",{"_index":733,"title":{},"body":{"injectables/PaypalService.html":{}}}],["transformer",{"_index":1430,"title":{},"body":{"dependencies.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["transporter",{"_index":508,"title":{},"body":{"injectables/EmailService.html":{}}}],["true",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/IndexManagementService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["true})@isstring()@isnotempty",{"_index":790,"title":{},"body":{"classes/Project.html":{}}}],["true})@isstring()@isurl()@isnotempty",{"_index":783,"title":{},"body":{"classes/Project.html":{}}}],["true})@type(undefined",{"_index":1585,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["true})@type(undefined)@isoptional",{"_index":1550,"title":{},"body":{"classes/tenantModel.html":{}}}],["try",{"_index":497,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1509,"title":{},"body":{"index.html":{}}}],["type",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1565,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":557,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["types.objectid",{"_index":748,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["typescript",{"_index":555,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["unauthorizedexception('account",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":503,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["unauthorizedexception('unable",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["undelete",{"_index":805,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["undelete(id",{"_index":819,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["unique",{"_index":646,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["unit",{"_index":1483,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["unlicensed",{"_index":1532,"title":{},"body":{"properties.html":{}}}],["update",{"_index":806,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["update(id",{"_index":821,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["update(updatetenantdto",{"_index":1068,"title":{},"body":{"controllers/TenantController.html":{}}}],["update(updateuserdto",{"_index":1239,"title":{},"body":{"controllers/UserController.html":{}}}],["updated",{"_index":953,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["updatedat",{"_index":1284,"title":{},"body":{"classes/UserProject.html":{}}}],["updatedtenant",{"_index":1091,"title":{},"body":{"controllers/TenantController.html":{}}}],["updateduser",{"_index":1264,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprojectdto",{"_index":822,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["updatetenantdto",{"_index":1070,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["updatetenantmodel",{"_index":1072,"title":{"classes/updateTenantModel.html":{}},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"coverage.html":{},"classes/updateTenantModel.html":{}}}],["updateuserdto",{"_index":1241,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["updateuserdto.confirmnewpassword",{"_index":1370,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.email",{"_index":1360,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.newpassword",{"_index":1369,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.oldpassword",{"_index":1367,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateusermodel",{"_index":1243,"title":{"classes/updateUserModel.html":{}},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateUserModel.html":{}}}],["updatewithpassword",{"_index":1052,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["updatewithpassword(id",{"_index":1141,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["updatewithpassword(updatetenantdto",{"_index":1071,"title":{},"body":{"controllers/TenantController.html":{}}}],["updatewithpassword(updateuserdto",{"_index":1242,"title":{},"body":{"controllers/UserController.html":{}}}],["updating",{"_index":954,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":610,"title":{},"body":{"injectables/ImageService.html":{}}}],["upload(`${role}/${id}/${image.originalname",{"_index":620,"title":{},"body":{"injectables/ImageService.html":{}}}],["upload(role",{"_index":612,"title":{},"body":{"injectables/ImageService.html":{}}}],["uploadedfile",{"_index":1080,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["uploadimage",{"_index":1053,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["uploadimage(id",{"_index":1075,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["uppercase",{"_index":1011,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["upsert",{"_index":624,"title":{},"body":{"injectables/ImageService.html":{}}}],["url",{"_index":726,"title":{},"body":{"injectables/PaypalService.html":{},"classes/Tenant.html":{}}}],["usd",{"_index":716,"title":{},"body":{"injectables/PaypalService.html":{}}}],["use",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authenticationguard",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authenticationguard)@get('profile",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('facebook",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('github",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('google",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":1079,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":1109,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":217,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user._id",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.address",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.age",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.confirmpassword",{"_index":1372,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.deleted",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.email",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["user.facebookid",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.githubid",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.googleid",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.image",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.module",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{}}}],["user.name",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"modules/UserModule.html":{}}}],["user.password",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.phone",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.projects",{"_index":1347,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.projects.find",{"_index":1376,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.projects.push(newuserproject",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.projects.some",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.projects.some((project",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.projects?.find",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.resetpasswordexpires",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.resetpasswordtoken",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{}}}],["user.save",{"_index":1358,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.website",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["user1",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["user:email",{"_index":574,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["userafterupdate",{"_index":1363,"title":{},"body":{"injectables/UsersService.html":{}}}],["usercontroller",{"_index":1221,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":636,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":140,"title":{"classes/userModel.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/IndexManagementService.html":{},"modules/ProjectsModule.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/userModel.html":{}}}],["usermodule",{"_index":16,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["userproject",{"_index":326,"title":{"classes/UserProject.html":{}},"body":{"injectables/AuthService.html":{},"classes/SignInUserResponse.html":{},"classes/User.html":{},"classes/UserProject.html":{},"coverage.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["userproject.entity",{"_index":1214,"title":{},"body":{"classes/User.html":{}}}],["userprojectmodel",{"_index":1412,"title":{"classes/userProjectModel.html":{}},"body":{"coverage.html":{},"classes/userProjectModel.html":{}}}],["userprojectschema",{"_index":1296,"title":{},"body":{"classes/UserProject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["users.find((user",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["users.service",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{}}}],["userschema",{"_index":1218,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.pre('save",{"_index":1220,"title":{},"body":{"classes/User.html":{}}}],["userservice",{"_index":566,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{}}}],["usersignupdto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["usersservice",{"_index":46,"title":{"injectables/UsersService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertocreate",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithproject",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["userwithproject?.projects.find",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["uuid",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["v4",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":1005,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["validate",{"_index":535,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["validate(accesstoken",{"_index":537,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["validatebeforesave",{"_index":1345,"title":{},"body":{"injectables/UsersService.html":{}}}],["validatefacebookuser",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatefacebookuser(profile",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategithubuser",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategithubuser(profile",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategoogleuser",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategoogleuser(profile",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatemodifiedonly",{"_index":855,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["validatenested",{"_index":1561,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["validator",{"_index":796,"title":{},"body":{"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"dependencies.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["value",{"_index":717,"title":{},"body":{"injectables/PaypalService.html":{},"classes/Tenant.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1384,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1627,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifycallback",{"_index":569,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["verifytokenandgetpayload",{"_index":481,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["verifytokenandgetpayload(authheader",{"_index":881,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["verifytokenandgetpayload(token",{"_index":490,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["version",{"_index":1530,"title":{},"body":{"properties.html":{}}}],["void",{"_index":596,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["watch",{"_index":1479,"title":{},"body":{"index.html":{}}}],["weak",{"_index":1580,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["website",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"classes/Tenant.html":{},"index.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["www\\.[a",{"_index":1021,"title":{},"body":{"classes/Tenant.html":{}}}],["you'd",{"_index":1498,"title":{},"body":{"index.html":{}}}],["z",{"_index":1024,"title":{},"body":{"classes/Tenant.html":{}}}],["z0",{"_index":1022,"title":{},"body":{"classes/Tenant.html":{}}}],["z\\d@$!%*?&]{8",{"_index":1579,"title":{},"body":{"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["z\\d@$!%*?&]{8,}$/.test(value",{"_index":1009,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["z\\d@$!%?&]{8",{"_index":1543,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["z])(?=.*[a",{"_index":1006,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":1578,"title":{},"body":{"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["z])(?=.*\\d)[a",{"_index":1007,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["z])(?=.[a",{"_index":1541,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["z])(?=.\\d)(?=.[@$!%?&])[a",{"_index":1542,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["za",{"_index":1008,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["zoom",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPaypalModule\n\nPaypalModule\n\nAppModule -->\n\nPaypalModule->AppModule\n\n\n\n\n\nProjectsModule\n\nProjectsModule\n\nAppModule -->\n\nProjectsModule->AppModule\n\n\n\n\n\nTenantModule\n\nTenantModule\n\nAppModule -->\n\nTenantModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PaypalModule\n                        \n                        \n                            ProjectsModule\n                        \n                        \n                            TenantModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserModule } from './modules/user.module';\nimport { TenantModule } from './modules/tenant.module';\nimport { ProjectsModule } from './modules/project.module';\nimport { AuthModule } from './modules/auth.module';\nimport { ImageService } from './infrastructure/services/image.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { PaypalModule } from './modules/paypal.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRoot('mongodb://localhost:27017/AuthGate'),\n    UserModule,\n    ProjectsModule,\n    TenantModule,\n    AuthModule,\n    PaypalModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n// providers: [ProjectService, UsersService, TenantsService, AuthService],\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                exchangeCodeWithToken\n                            \n                            \n                                    \n                                    \n                                    Async\n                                exchangeTokenForUserData\n                            \n                            \n                                    \n                                    \n                                    Async\n                                facebookAuthCallback\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                githubAuthCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                googleAuthCallback\n                            \n                            \n                                    \n                                    Async\n                                isTenant\n                            \n                            \n                                    \n                                    \n                                    Async\n                                loginWithFacebook\n                            \n                            \n                                    \n                                    \n                                    Async\n                                loginWithGitHub\n                            \n                            \n                                    \n                                    \n                                    Async\n                                loginWithGoogle\n                            \n                            \n                                    \n                                    Async\n                                resetPassword\n                            \n                            \n                                    \n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    \n                                    \n                                signIn\n                            \n                            \n                                    \n                                    \n                                signUpAsTenant\n                            \n                            \n                                    \n                                    \n                                signUpAsUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        exchangeCodeWithToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    exchangeCodeWithToken(obj: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('authcode')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        exchangeTokenForUserData\n                        \n                    \n                \n            \n            \n                \n                        \n                    exchangeTokenForUserData(obj: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('token/user')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        facebookAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    facebookAuthCallback(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook/callback')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthenticationGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        githubAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    githubAuthCallback(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github/callback')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        googleAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuthCallback(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/callback')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        isTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    isTenant(clientId: string, clientSecret: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('istenant')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:170\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        loginWithFacebook\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginWithFacebook()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:137\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        loginWithGitHub\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginWithGitHub()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        loginWithGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginWithGoogle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:121\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(token: string, newPassword: string, confirmNewPassword: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmNewPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        sendPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendPasswordResetEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password/request')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signUpAsTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsTenant(tenantSignUpDto: tenantModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('registertenant')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantSignUpDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signUpAsUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsUser(userSignUpDto: userModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('registeruser')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userSignUpDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Req,\n  Request,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthenticationGuard } from '../guards/auth.guard';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { SignInRequest } from '../dtos/signInRequest.model';\nimport { userModel } from '../dtos/user.model';\nimport { tenantModel } from '../dtos/tenant.model';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Response } from 'express';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private usersService: UsersService,\n    private tenantsService: TenantsService,\n  ) {}\n\n  private readonly frontendUrl = 'http://localhost:4200';\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: SignInRequest) {\n    return this.authService.signIn(signInDto.email, signInDto.password);\n  }\n\n  @UseGuards(AuthenticationGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('registeruser')\n  signUpAsUser(@Body() userSignUpDto: userModel) {\n    return this.authService.signUpAsUser(userSignUpDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('registertenant')\n  signUpAsTenant(@Body() tenantSignUpDto: tenantModel) {\n    return this.authService.signUpAsTenant(tenantSignUpDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('authcode')\n  async exchangeCodeWithToken(@Body() obj: { authCode: string }) {\n    const { authCode } = obj;\n\n    const users = await this.usersService.findAllUsersWithProjects();\n\n    const userWithProject = users.find((user) =>\n      user.projects.some((project) => project.authorizationCode === authCode),\n    );\n\n    const targetUserProject = userWithProject?.projects.find(\n      (project) => project.authorizationCode === authCode,\n    );\n\n    return {\n      auth_token: targetUserProject.authorizationAccessToken,\n      userWithProject,\n    };\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('token/user')\n  async exchangeTokenForUserData(@Body() obj: { token: string }) {\n    const { token } = obj;\n\n    const users = await this.usersService.findAllUsersWithProjects();\n\n    const userWithProject = users.find((user) =>\n      user.projects.some(\n        (project) => project.authorizationAccessToken === token,\n      ),\n    );\n\n    const targetUserProject = userWithProject?.projects.find(\n      (project) => project.authorizationAccessToken === token,\n    );\n\n    if (!targetUserProject.expireDate && !targetUserProject.deleted) {\n      return userWithProject;\n    } else {\n      throw new ConflictException('project may be deleted or token expired');\n    }\n  }\n\n  @Get('github')\n  @UseGuards(AuthGuard('github'))\n  async loginWithGitHub() {}\n\n  @Get('github/callback')\n  @UseGuards(AuthGuard('github'))\n  async githubAuthCallback(@Req() req, @Res() res: Response) {\n    const user1 = req.user;\n    const { access_token, user } =\n      await this.authService.signInWithGitHub(user1);\n\n    const redirectUrl = `${this.frontendUrl}/auth/github/callback?token=${access_token}&user=${JSON.stringify(user)}`;\n\n    return res.redirect(redirectUrl);\n  }\n\n  @Get('google')\n  @UseGuards(AuthGuard('google'))\n  async loginWithGoogle() {}\n\n  @Get('google/callback')\n  @UseGuards(AuthGuard('google'))\n  async googleAuthCallback(@Req() req, @Res() res: Response) {\n    const user1 = req.user;\n    const { access_token, user } =\n      await this.authService.signInWithGoogle(user1);\n\n    const redirectUrl = `${this.frontendUrl}/auth/google/callback?token=${access_token}&user=${JSON.stringify(user)}`;\n\n    return res.redirect(redirectUrl);\n  }\n\n  @Get('facebook')\n  @UseGuards(AuthGuard('facebook'))\n  async loginWithFacebook() {}\n\n  @Get('facebook/callback')\n  @UseGuards(AuthGuard('facebook'))\n  async facebookAuthCallback(@Req() req, @Res() res: Response) {\n    const user1 = req.user;\n    const { access_token, user } =\n      await this.authService.signInWithFacebook(user1);\n\n    const redirectUrl = `${this.frontendUrl}/auth/facebook/callback?token=${access_token}&user=${encodeURIComponent(JSON.stringify(user))}`;\n\n    return res.redirect(redirectUrl);\n  }\n\n  @Post('reset-password/request')\n  async sendPasswordResetEmail(@Body('email') email: string): Promise {\n    await this.authService.sendResetPasswordResetEmail(email);\n  }\n\n  @Post('reset-password')\n  async resetPassword(\n    @Body('token') token: string,\n    @Body('newPassword') newPassword: string,\n    @Body('confirmNewPassword') confirmNewPassword: string,\n  ): Promise {\n    await this.authService.resetPassword(\n      token,\n      newPassword,\n      confirmNewPassword,\n    );\n  }\n\n  @Post('istenant')\n  async isTenant(\n    @Body('clientId') clientId: string,\n    @Body('clientSecret') clientSecret: string,\n  ) {\n    this.tenantsService.authorizeClient(clientId, clientSecret);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nProjectsModule\n\nProjectsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nProjectsModule->AuthModule\n\n\n\n\n\nTenantModule\n\nTenantModule\n\nAuthModule -->\n\nTenantModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\n\n\nFacebookAuthStrategy\n\nFacebookAuthStrategy\n\nAuthModule -->\n\nFacebookAuthStrategy->AuthModule\n\n\n\n\n\nGithubAuthStrategy\n\nGithubAuthStrategy\n\nAuthModule -->\n\nGithubAuthStrategy->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            FacebookAuthStrategy\n                        \n                        \n                            GithubAuthStrategy\n                        \n                        \n                            GoogleAuthStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ProjectsModule\n                        \n                        \n                            TenantModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from 'src/constants';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { AuthController } from 'src/presentation/controllers/auth.controller';\nimport { UserModule } from './user.module';\nimport { TenantModule } from './tenant.module';\nimport { ProjectsModule } from './project.module';\nimport { GithubAuthStrategy } from 'src/infrastructure/Strategies/githubAuth.strategy';\nimport { GoogleAuthStrategy } from 'src/infrastructure/Strategies/googleAuth.strategy';\nimport { EmailService } from 'src/infrastructure/services/email.service';\nimport { FacebookAuthStrategy } from 'src/infrastructure/Strategies/facebookAuth.strategy';\n\n@Module({\n  imports: [\n    UserModule,\n    TenantModule,\n    ProjectsModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1d' },\n    }),\n  ],\n  providers: [\n    AuthService,\n    GithubAuthStrategy,\n    GoogleAuthStrategy,\n    FacebookAuthStrategy,\n    EmailService,\n  ],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                processAuth\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                sendResetPasswordResetEmail\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signInWithFacebook\n                            \n                            \n                                    Async\n                                signInWithGitHub\n                            \n                            \n                                    Async\n                                signInWithGoogle\n                            \n                            \n                                    Async\n                                signUpAsTenant\n                            \n                            \n                                    Async\n                                signUpAsUser\n                            \n                            \n                                    Async\n                                validateFacebookUser\n                            \n                            \n                                    Async\n                                validateGitHubUser\n                            \n                            \n                                    Async\n                                validateGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, tenantsService: TenantsService, jwtService: JwtService, emailService: EmailService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/auth.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantsService\n                                                  \n                                                        \n                                                                        TenantsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    processAuth(projectId: any, userId: string, projectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                projectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(token: string, newPassword: string, confirmNewPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:400\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmNewPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendResetPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendResetPasswordResetEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:376\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInWithFacebook\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInWithFacebook(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:355\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInWithGitHub\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInWithGitHub(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:251\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInWithGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInWithGoogle(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:297\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUpAsTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsTenant(tenantSignUpDto: tenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantSignUpDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUpAsUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsUser(userSignUpDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userSignUpDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateFacebookUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateFacebookUser(profile: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:321\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateGitHubUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateGitHubUser(profile: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:226\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateGoogleUser(profile: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:275\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from './users.service';\nimport { SignInUserResponse } from 'src/presentation/dtos/signInUserResponse.model';\nimport { SignInTenantResponse } from 'src/presentation/dtos/signInTenantResponse.model';\nimport { TenantsService } from './tenants.service';\nimport { userModel } from 'src/presentation/dtos/user.model';\nimport { tenantModel } from 'src/presentation/dtos/tenant.model';\nimport * as bcrypt from 'bcrypt';\nimport * as crypto from 'crypto';\nimport { v4 as uuidv4 } from 'uuid';\nimport { UserProject } from 'src/domain/entities/userProject.entity';\nimport { projectModel } from 'src/presentation/dtos/project.model';\nimport { User } from 'src/domain/entities/user.entity';\nimport { EmailService } from './email.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private tenantsService: TenantsService,\n    private jwtService: JwtService,\n    private emailService: EmailService,\n  ) {}\n\n  async signIn(\n    email: string,\n    password: string,\n  ): Promise {\n    let user: any =\n      (await this.usersService.findByEmail(email)) ||\n      (await this.tenantsService.findByEmail(email));\n\n    if (!user || user.deleted) {\n      throw new UnauthorizedException('Account not found or has been deleted');\n    }\n\n    const isPasswordMatch = await bcrypt.compare(password, user.password);\n    if (!isPasswordMatch) throw new UnauthorizedException();\n\n    const payload = {\n      sub: user.id,\n      email: user.email,\n      name: user.name,\n      role: user.role,\n    };\n\n    const generalResponse = {\n      _id: user._id,\n      name: user.name,\n      email: user.email,\n      phone: user.phone,\n      image: user.image,\n      role: user.role,\n    };\n\n    let signInResponse: SignInUserResponse | SignInTenantResponse;\n\n    if (user.role === 'user') {\n      signInResponse = {\n        ...generalResponse,\n        age: user.age,\n      };\n    } else if (user.role === 'tenant') {\n      signInResponse = {\n        ...generalResponse,\n        website: user.website,\n        address: user.address,\n      };\n    } else if (user.role === 'admin') {\n      signInResponse = {\n        ...generalResponse,\n        age: user.age,\n      };\n    }\n\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n      user: signInResponse,\n    };\n  }\n\n  async signUpAsUser(userSignUpDto: userModel) {\n    const { email, password, confirmPassword } = userSignUpDto;\n\n    if (password !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const existingUser = await this.usersService.findByEmail(email);\n    if (existingUser) {\n      throw new ConflictException('Email already in use');\n    }\n\n    const salt = 10;\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    const userToCreate = {\n      ...userSignUpDto,\n      password: hashedPassword,\n      confirmPassword: hashedPassword,\n      role: 'user',\n    };\n\n    const user = await this.usersService.create(userToCreate);\n    if (!user) {\n      throw new BadRequestException('User could not be created');\n    }\n\n    return this.signIn(email, password);\n  }\n\n  async signUpAsTenant(tenantSignUpDto: tenantModel) {\n    const { email, password, confirmPassword } = tenantSignUpDto;\n\n    if (password !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const existingTenant = await this.tenantsService.findByEmail(email);\n    if (existingTenant) {\n      throw new ConflictException('Email already in use');\n    }\n\n    const salt = 10;\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    const tenantToCreate = {\n      ...tenantSignUpDto,\n      password: hashedPassword,\n      confirmPassword: hashedPassword,\n      role: 'tenant',\n    };\n\n    const tenant = await this.tenantsService.create(tenantToCreate);\n    if (!tenant) {\n      throw new BadRequestException('Tenant could not be created');\n    }\n\n    return this.signIn(email, password);\n  }\n\n  async processAuth(\n    projectId: any,\n    userId: string,\n    projectName: string,\n  ): Promise {\n    const user: userModel = await this.usersService.findById(userId);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const newPayload = {\n      email: user.email,\n      name: user.name,\n      phone: user.phone,\n      image: user.image,\n      age: user.age,\n    };\n\n    const projectID = projectId;\n    const authorizationCode = crypto.randomBytes(16).toString('hex');\n    const authorizationAccessToken: string =\n      await this.jwtService.signAsync(newPayload);\n    const name = projectName;\n    const expireDate: Date = new Date(Date.now() + 24 * 60 * 60 * 1000);\n\n    let newUserProject: UserProject = {\n      projectID,\n      authorizationCode,\n      authorizationAccessToken,\n      name,\n      expireDate,\n    };\n\n    const existingUserProject: UserProject = user.projects?.find(\n      (project) => project.projectID === projectID,\n    );\n\n    if (existingUserProject) {\n      existingUserProject.authorizationAccessToken =\n        newUserProject.authorizationAccessToken;\n      existingUserProject.authorizationCode = newUserProject.authorizationCode;\n      existingUserProject.expireDate = newUserProject.expireDate;\n    } else {\n      user.projects.push(newUserProject);\n    }\n\n    await this.usersService.save(user);\n\n    const targetTenant =\n      await this.tenantsService.findTenantByProjectId(projectID);\n\n    if (!targetTenant) {\n      throw new ConflictException('Tenant not found for the given project ID');\n    }\n\n    const targetProject: projectModel | any = targetTenant.projects.find(\n      (project) => project._id.toString() === projectID,\n    );\n\n    if (!targetProject) {\n      throw new ConflictException('Project not found in tenant');\n    }\n\n    const callbackUrl: string = targetProject.callBackUrl;\n\n    return {\n      userId,\n      projectID,\n      callbackUrl,\n      authorizationCode,\n    };\n  }\n\n  async validateGitHubUser(profile: any): Promise {\n    const { id, username, displayName, emails, photos } = profile;\n    // Find user by GitHub ID\n    let user = await this.usersService.findByGitHubId(id);\n    if (!user) {\n      // If user doesn't exist, create a new one\n      // let email;\n      // if (emails) email = emails && emails[0] && emails[0].value;\n      // else email = `${id}provided@github.com`;\n      const hashedPassword = await bcrypt.hash(uuidv4(), 10);\n\n      user = await this.usersService.createGithubUser({\n        name: displayName || username,\n        githubId: id,\n        image: photos && photos[0] && photos[0].value,\n        password: hashedPassword,\n        confirmPassword: hashedPassword,\n        role: 'user',\n        email: '',\n      });\n    }\n\n    return user;\n  }\n\n  async signInWithGitHub(\n    user: User,\n  ): Promise {\n    const payload = {\n      sub: user._id,\n      email: user.email,\n      name: user.name,\n      role: 'user',\n    };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n      user: {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        image: user.image,\n        age: user.age,\n        githubId: user.githubId,\n        role: 'user',\n      },\n    };\n  }\n\n  async validateGoogleUser(profile: any): Promise {\n    const { id, displayName, emails, photos } = profile;\n\n    let user = await this.usersService.findByGoogleId(id);\n    if (!user) {\n      const email = emails && emails[0] && emails[0].value;\n      const hashedPassword = await bcrypt.hash(uuidv4(), 10);\n\n      user = await this.usersService.create({\n        name: displayName,\n        email: email,\n        googleId: id,\n        image: photos && photos[0] && photos[0].value,\n        password: hashedPassword,\n        confirmPassword: hashedPassword,\n        role: 'user',\n      });\n    }\n\n    return user;\n  }\n\n  async signInWithGoogle(\n    user: User,\n  ): Promise {\n    const payload = {\n      sub: user._id,\n      email: user.email,\n      name: user.name,\n      role: 'user',\n    };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n      user: {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        image: user.image,\n        age: user.age,\n        googleId: user.googleId,\n        role: 'user',\n      },\n    };\n  }\n\n  async validateFacebookUser(profile: any): Promise {\n    const { facebookId, email, firstName, lastName, picture } = profile;\n    let user: any = await this.usersService.findByFacebookId(facebookId);\n    if (!user && email) {\n      user = await this.usersService.findByEmail(email);\n      if (user) {\n        user.facebookId = facebookId;\n        if (user.name === undefined || user.name === '' || user.name === null)\n          user.name = `${firstName} ${lastName}`;\n        if (\n          user.image === undefined ||\n          user.image === '' ||\n          user.image === null\n        )\n          user.image = picture;\n        await this.usersService.save(user);\n      } else {\n        const hashedPassword = await bcrypt.hash(uuidv4(), 10);\n        user = await this.usersService.create({\n          email: profile.email,\n          name: `${firstName} ${lastName}`,\n          facebookId: facebookId,\n          image: picture,\n          password: hashedPassword,\n          confirmPassword: hashedPassword,\n          role: 'user',\n        });\n      }\n    } else if (!user) {\n      throw new UnauthorizedException('Unable to authenticate with Facebook');\n    }\n    return user;\n  }\n\n  async signInWithFacebook(user: User) {\n    const payload = {\n      sub: user._id,\n      email: user.email,\n      name: user.name,\n      role: 'user',\n    };\n    return {\n      access_token: this.jwtService.sign(payload),\n      user: {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        image: user.image,\n        age: user.age,\n        role: 'user',\n      },\n    };\n  }\n\n  async sendResetPasswordResetEmail(email: string): Promise {\n    let user: any = await this.usersService.findByEmail(email);\n    if (!user) {\n      user = await this.tenantsService.findByEmail(email);\n    }\n    if (!user) {\n      throw new Error(`User ${email} not found`);\n    }\n\n    const resetToken = this.jwtService.sign(\n      { email },\n      { secret: process.env.PASSWORD_RESET_JWT_SECRET, expiresIn: '1h' },\n    );\n    user.resetPasswordToken = resetToken;\n    user.resetPasswordExpires = new Date(Date.now() + 3600000);\n    await this.usersService.save(user);\n    const resetLink = `http://localhost:4200/reset-password/${resetToken}`;\n    await this.emailService.sendMail(\n      user.email,\n      'Password Reset Request',\n      `Click the following link to reset your password:\\n ${resetLink}`,\n    );\n  }\n\n  async resetPassword(\n    token: string,\n    newPassword: string,\n    confirmNewPassword: string,\n  ): Promise {\n    const decoded = this.jwtService.verify(token, {\n      secret: process.env.PASSWORD_RESET_JWT_SECRET,\n    });\n    let user: any = await this.usersService.findByEmail(decoded.email);\n\n    if (!user) {\n      user = await this.tenantsService.findByEmail(decoded.email);\n    }\n\n    if (\n      !user ||\n      user.resetPasswordToken !== token ||\n      user.resetPasswordExpires \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/presentation/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                            \n                                    Private\n                                    Async\n                                verifyTokenAndGetPayload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/presentation/guards/auth.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/guards/auth.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/guards/auth.guard.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        verifyTokenAndGetPayload\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyTokenAndGetPayload(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/guards/auth.guard.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from '../../constants';\nimport { Request } from 'express';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(private jwtService: JwtService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.verifyTokenAndGetPayload(token);\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private async verifyTokenAndGetPayload(token: string): Promise {\n    try {\n      return await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n    } catch (error) {\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/email.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMail(to: string, subject: string, text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/email.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     nodemailer.Transporter\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/services/email.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as nodemailer from 'nodemailer';\n\n@Injectable()\nexport class EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor(private configService: ConfigService) {\n    this.transporter = nodemailer.createTransport({\n      host: 'smtp.office365.com',\n      port: 587,\n      secure: false,\n      auth: {\n        user: this.configService.get('GMAIL_USER'),\n        pass: this.configService.get('GMAIL_PASS'),\n      },\n    });\n  }\n\n  async sendMail(to: string, subject: string, text: string): Promise {\n    await this.transporter.sendMail({\n      from: this.configService.get('GMAIL_USER'),\n      to,\n      subject,\n      text,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookAuthStrategy.html":{"url":"injectables/FacebookAuthStrategy.html","title":"injectable - FacebookAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Strategies/facebookAuth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(\n  Strategy,\n  'facebook',\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/Strategies/facebookAuth.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: Function)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/Strategies/facebookAuth.strategy.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            Function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthService } from './../services/auth.service';\nimport { Strategy, Profile } from 'passport-facebook';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class FacebookAuthStrategy extends PassportStrategy(\n  Strategy,\n  'facebook',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      clientID: configService.get('FACEBOOK_CLIENT_ID'),\n      clientSecret: configService.get('FACEBOOK_CLIENT_SECRET'),\n      callbackURL: configService.get('FACEBOOk_CALLBACK_URL'),\n      profileFields: ['id', 'name', 'emails', 'photos'],\n      scope: ['email'],\n    });\n  }\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: Profile,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    done: Function,\n  ) {\n    const { name, emails, photos } = profile;\n    const user = {\n      facebookId: profile.id,\n      email: emails && emails[0] && emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n    };\n\n    const existingUser = await this.authService.validateFacebookUser(user);\n    if (!existingUser) {\n      return done(new UnauthorizedException(), false);\n    }\n    done(null, existingUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubAuthStrategy.html":{"url":"injectables/GithubAuthStrategy.html","title":"injectable - GithubAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GithubAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Strategies/githubAuth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'github')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, jwtService: JwtService, userService: UsersService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/Strategies/githubAuth.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/Strategies/githubAuth.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback, Profile } from 'passport-github';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from '../services/users.service';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class GithubAuthStrategy extends PassportStrategy(Strategy, 'github') {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly jwtService: JwtService,\n    private readonly userService: UsersService,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      clientID: configService.get('GITHUB_CLIENT_ID'),\n      clientSecret: configService.get('GITHUB_CLIENT_SECRET'),\n      callbackURL: configService.get('GITHUB_CALLBACK_URL'),\n      scope: ['user:email', 'user'],\n    });\n  }\n\n  async validate(accessToken: string, refreshToken: string, profile: Profile) {\n    const user = await this.authService.validateGitHubUser(profile);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthStrategy.html":{"url":"injectables/GoogleAuthStrategy.html","title":"injectable - GoogleAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Strategies/googleAuth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'google')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/Strategies/googleAuth.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/Strategies/googleAuth.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy, Profile } from 'passport-google-oauth20';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from '../services/auth.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class GoogleAuthStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      clientID: configService.get('GOOGLE_CLIENT_ID'),\n      clientSecret: configService.get('GOOGLE_CLIENT_SECRET'),\n      callbackURL: configService.get('GOOGLE_CALLBACK_URL'),\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(accessToken: string, refreshToken: string, profile: Profile) {\n    const user = await this.authService.validateGoogleUser(profile);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/filters/http-exception.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      message: exception.message,\n      error: exception.getResponse(),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImageService.html":{"url":"injectables/ImageService.html","title":"injectable - ImageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/image.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/image.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(role: string, id: string, image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/image.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { supabase } from '../supabase/supabaseClient';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Express } from 'express';\n\n@Injectable()\nexport class ImageService {\n  constructor() {}\n\n  async upload(role: string, id: string, image: Express.Multer.File) {\n    const { data, error } = await supabase.storage\n      .from('authgateimages')\n      .upload(`${role}/${id}/${image.originalname}`, image.buffer, {\n        cacheControl: '3600',\n        upsert: false,\n      });\n\n    if (error) {\n      return error;\n    }\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IndexManagementService.html":{"url":"injectables/IndexManagementService.html","title":"injectable - IndexManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IndexManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/indexManagement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ensureIndexes\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/indexManagement.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ensureIndexes\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureIndexes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/indexManagement.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/indexManagement.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from 'src/domain/entities/user.entity';\n\n@Injectable()\nexport class IndexManagementService implements OnModuleInit {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  async onModuleInit() {\n    await this.ensureIndexes();\n  }\n\n  async ensureIndexes() {\n    try {\n      await this.userModel.collection.dropIndex('googleId_1');\n    } catch (error) {\n      if (error.code !== 27) {\n        throw error;\n      }\n    }\n\n    try {\n      await this.userModel.collection.dropIndex('githubId_1');\n    } catch (error) {\n      if (error.code !== 27) {\n        throw error;\n      }\n    }\n\n    try {\n      await this.userModel.collection.dropIndex('facebookId_1');\n    } catch (error) {\n      if (error.code !== 27) {\n        throw error;\n      }\n    }\n\n    await this.userModel.collection.createIndex(\n      { googleId: 1 },\n      { unique: true, sparse: true },\n    );\n    await this.userModel.collection.createIndex(\n      { githubId: 1 },\n      { unique: true, sparse: true },\n    );\n    await this.userModel.collection.createIndex(\n      { facebookId: 1 },\n      { unique: true, sparse: true },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaypalController.html":{"url":"controllers/PaypalController.html","title":"controller - PaypalController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaypalController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/paypal.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                paypal\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                captureOrder\n                            \n                            \n                                    \n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        captureOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    captureOrder(orderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('capture-order/:orderId')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/paypal.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-order')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/paypal.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Param } from '@nestjs/common';\nimport { PaypalService } from 'src/infrastructure/paypal/paypal.service';\n\n@Controller('paypal')\nexport class PaypalController {\n  constructor(private readonly paypalService: PaypalService) {}\n\n  @Post('create-order')\n  async createOrder() {\n    const order = await this.paypalService.createOrder();\n    return {\n      id: order.id,\n      status: order.status,\n      links: order.links,\n    };\n  }\n\n  @Post('capture-order/:orderId')\n  async captureOrder(@Param('orderId') orderId: string) {\n    const capture = await this.paypalService.captureOrder(orderId);\n    return {\n      id: capture.id,\n      status: capture.status,\n      payer: capture.payer,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaypalModule.html":{"url":"modules/PaypalModule.html","title":"module - PaypalModule","body":"\n                   \n\n\n\n\n    Modules\n    PaypalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaypalModule\n\n\n\ncluster_PaypalModule_providers\n\n\n\n\nPaypalService\n\nPaypalService\n\n\n\nPaypalModule\n\nPaypalModule\n\nPaypalModule -->\n\nPaypalService->PaypalModule\n\n\n\n\n\nPaypalTransactionService\n\nPaypalTransactionService\n\nPaypalModule -->\n\nPaypalTransactionService->PaypalModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/paypal.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaypalService\n                        \n                        \n                            PaypalTransactionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaypalController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PaypalService } from 'src/infrastructure/paypal/paypal.service';\nimport { PaypalController } from 'src/presentation/controllers/paypal.controller';\nimport {\n  PaypalTransactionSchema,\n  PaypalTransaction,\n} from 'src/domain/entities/paypal.entity';\nimport { PaypalTransactionService } from 'src/infrastructure/paypal/paypal-transaction.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: PaypalTransaction.name, schema: PaypalTransactionSchema },\n    ]),\n  ],\n  controllers: [PaypalController],\n  providers: [PaypalService, PaypalTransactionService],\n})\nexport class PaypalModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaypalService.html":{"url":"injectables/PaypalService.html","title":"injectable - PaypalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaypalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/paypal/paypal.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                payPalClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                captureOrder\n                            \n                            \n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paypalTransactionService: PaypalTransactionService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/paypal/paypal.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paypalTransactionService\n                                                  \n                                                        \n                                                                        PaypalTransactionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        captureOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    captureOrder(orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/paypal/paypal.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/paypal/paypal.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        payPalClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     paypal.core.PayPalHttpClient\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/paypal/paypal.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as paypal from '@paypal/checkout-server-sdk';\nimport { Environment } from '@paypal/checkout-server-sdk';\nimport { PaypalTransactionService } from './paypal-transaction.service';\n\n@Injectable()\nexport class PaypalService {\n  private payPalClient: paypal.core.PayPalHttpClient;\n\n  constructor(private paypalTransactionService: PaypalTransactionService) {\n    let environment: Environment;\n    if (process.env.NODE_ENV === 'production') {\n      environment = new paypal.core.LiveEnvironment(\n        process.env.PAYPAL_CLIENT_ID,\n        process.env.PAYPAL_CLIENT_SECRET,\n      );\n    } else {\n      environment = new paypal.core.SandboxEnvironment(\n        process.env.PAYPAL_CLIENT_ID,\n        process.env.PAYPAL_CLIENT_SECRET,\n      );\n    }\n    this.payPalClient = new paypal.core.PayPalHttpClient(environment);\n  }\n\n  async createOrder() {\n    const request = new paypal.orders.OrdersCreateRequest();\n    request.prefer('return=representation');\n    request.requestBody({\n      intent: 'CAPTURE',\n      purchase_units: [\n        {\n          amount: {\n            currency_code: 'USD',\n            value: '5.00',\n            description: 'Buy me a coffee',\n          },\n        },\n      ],\n      application_context: {\n        return_url: 'http://localhost:4200/paypal/callback', // Your callback URL\n        cancel_url: 'http://localhost:4200/paypal/cancel', // Your cancel URL\n      },\n    });\n\n    const order = await this.payPalClient.execute(request);\n    return order.result;\n  }\n\n  async captureOrder(orderId: string) {\n    const request = new paypal.orders.OrdersCaptureRequest(orderId);\n    request.requestBody({});\n    const capture = await this.payPalClient.execute(request);\n\n    const transactionData = {\n      orderId: capture.result.id,\n      status: capture.result.status,\n      amount: capture.result.purchase_units[0].amount.value,\n      currency: capture.result.purchase_units[0].amount.currency_code,\n      payerEmail: capture.result.payer.email_address,\n      payerName: `${capture.result.payer.name.given_name} ${capture.result.payer.name.surname}`,\n    };\n\n    //await this.paypalTransactionService.createTransaction(transactionData);\n\n    return capture.result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaypalTransaction.html":{"url":"classes/PaypalTransaction.html","title":"class - PaypalTransaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaypalTransaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/paypal.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                currency\n                            \n                            \n                                    \n                                orderId\n                            \n                            \n                                    \n                                payerEmail\n                            \n                            \n                                    \n                                payerName\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        payerEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        payerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\n\nexport type PaypalTransactionDocument = PaypalTransaction & Document;\n\n@Schema()\nexport class PaypalTransaction {\n  @Prop({ type: Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop({ required: true })\n  orderId: string;\n\n  @Prop({ required: true })\n  status: string;\n\n  @Prop({ required: true })\n  amount: number;\n\n  @Prop({ required: true })\n  currency: string;\n\n  @Prop({ required: true })\n  payerEmail: string;\n\n  @Prop({ required: true })\n  payerName: string;\n\n  @Prop({ default: Date.now })\n  createdAt: Date;\n}\n\nexport const PaypalTransactionSchema =\n  SchemaFactory.createForClass(PaypalTransaction);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaypalTransactionService.html":{"url":"injectables/PaypalTransactionService.html","title":"injectable - PaypalTransactionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaypalTransactionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/paypal/paypal-transaction.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paypalTransactionModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/paypal/paypal-transaction.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paypalTransactionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransaction(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/paypal/paypal-transaction.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport {\n  PaypalTransaction,\n  PaypalTransactionDocument,\n} from 'src/domain/entities/paypal.entity';\n\n@Injectable()\nexport class PaypalTransactionService {\n  constructor(\n    @InjectModel(PaypalTransaction.name)\n    private paypalTransactionModel: Model,\n  ) {}\n\n  async createTransaction(data: any): Promise {\n    const newTransaction = new this.paypalTransactionModel(data);\n    return newTransaction.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Project.html":{"url":"classes/Project.html","title":"class - Project","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Project\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/project.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                callBackUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                clientID\n                            \n                            \n                                    \n                                    \n                                    \n                                clientSECRET\n                            \n                            \n                                    \n                                deleted\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        callBackUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@IsString()@IsUrl()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        clientID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        clientSECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document, Types } from 'mongoose';\nimport { IsString, IsNotEmpty, IsUrl, IsOptional } from 'class-validator';\n\n@Schema({ timestamps: true })\nexport class Project extends Document {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop()\n  @IsString()\n  @IsOptional()\n  clientID: string;\n\n  @Prop()\n  @IsString()\n  @IsOptional()\n  clientSECRET: string;\n\n  @Prop({ required: true, unique: true })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @Prop({ required: true })\n  @IsString()\n  @IsUrl()\n  @IsNotEmpty()\n  callBackUrl: string;\n\n  @Prop({ default: false })\n  deleted: boolean;\n}\n\nexport const projectSchema = SchemaFactory.createForClass(Project);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProjectService.html":{"url":"injectables/ProjectService.html","title":"injectable - ProjectService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProjectService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/project.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAllProjectsPerTenant\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                undelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(projectModel: Model, tenantModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/project.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        projectModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProjectDto: projectModel, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProjectsPerTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProjectsPerTenant(tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(projectID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProjectDto: projectModel, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Project } from 'src/domain/entities/project.entity';\nimport { Tenant } from 'src/domain/entities/tenant.entity';\nimport { projectModel } from 'src/presentation/dtos/project.model';\nimport * as crypto from 'crypto';\n\n@Injectable()\nexport class ProjectService {\n  constructor(\n    @InjectModel(Project.name) private projectModel: Model,\n    @InjectModel(Tenant.name) private tenantModel: Model,\n  ) {}\n\n  async create(\n    createProjectDto: projectModel,\n    tenantID: string,\n  ): Promise {\n    const { name, callBackUrl } = createProjectDto;\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant with ID ${tenantID} not found`);\n    }\n\n    const clientID = crypto.randomBytes(16).toString('hex');\n    const clientSECRET = crypto.randomBytes(32).toString('hex');\n\n    const createdProject = new this.projectModel({\n      tenantID,\n      clientID,\n      clientSECRET,\n      name,\n      callBackUrl,\n    });\n    try {\n      tenant.projects.push(createdProject);\n      await tenant.save();\n      const projectList = await this.findAllProjectsPerTenant(tenantID);\n      return projectList;\n    } catch (error) {\n      throw new BadRequestException('Failed to create project');\n    }\n  }\n\n  async findAllProjectsPerTenant(tenantID: string): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant with ID: ${tenantID} not found`);\n    }\n    if (tenant.projects.length >= 1) {\n      return tenant.projects;\n    } else {\n      throw new NotFoundException('no projects created yet');\n    }\n  }\n\n  async findOne(projectID: string): Promise {\n    const targetTenant = await this.tenantModel\n      .findOne({\n        'projects._id': projectID,\n      })\n      .exec();\n    const project = targetTenant.projects.find(\n      (proj) => proj._id.toString() === projectID,\n    );\n    if (!project) {\n      throw new NotFoundException(\n        `Project with ID: ${projectID} not found in tenant`,\n      );\n    }\n    return project;\n  }\n\n  async update(\n    id: string,\n    updateProjectDto: projectModel,\n    tenantID: string,\n  ): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (tenant) {\n      if (!tenant.projects.find((proj) => proj._id.toString() === id)) {\n        throw new NotFoundException(\n          `you are not able to delete this project, because you don't own it`,\n        );\n      }\n    }\n    if (!tenant) {\n      throw new NotFoundException(\n        `you are not able to delete this project, due to your authorization role`,\n      );\n    }\n\n    const project = tenant.projects.find((proj) => proj._id.toString() === id);\n    if (!project) {\n      throw new NotFoundException(`Project with ID: ${id} not found in tenant`);\n    }\n\n    Object.assign(project, updateProjectDto);\n\n    try {\n      await tenant.save();\n      const projectsAfterUpdate: any = tenant.projects;\n      return projectsAfterUpdate;\n    } catch (error) {\n      throw new BadRequestException('Failed to update project');\n    }\n  }\n\n  async undelete(id: string, tenantID: string): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant with ID: ${tenantID} not found`);\n    }\n\n    const project = tenant.projects.find((proj) => proj._id.toString() === id);\n    if (!project) {\n      throw new NotFoundException(\n        `you are not able to delete this project because you don't own it`,\n      );\n    }\n\n    project.deleted = false;\n    try {\n      await tenant.save({ validateModifiedOnly: true });\n      return project;\n    } catch (error) {\n      throw new BadRequestException('Failed to undelete project');\n    }\n  }\n\n  async delete(id: string, tenantID: string): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant not found`);\n    }\n\n    if (!tenant.projects || !Array.isArray(tenant.projects)) {\n      throw new BadRequestException(\n        'Projects list is not available for this tenant',\n      );\n    }\n\n    const project = tenant.projects.find((proj) => proj._id.toString() === id);\n    if (!project) {\n      throw new NotFoundException(`Project with ID: ${id} not found in tenant`);\n    }\n\n    project.deleted = true;\n    try {\n      await tenant.save({ validateModifiedOnly: true });\n      return tenant.projects;\n    } catch (error) {\n      throw new BadRequestException('Failed to delete project');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProjectsController.html":{"url":"controllers/ProjectsController.html","title":"controller - ProjectsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProjectsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/project.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                projects\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                getAllPerTenant\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                undelete\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                    Async\n                                verifyTokenAndGetPayload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProjectDto: projectModel, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll(authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllPerTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPerTenant(authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('tenantProjects')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('undelete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProjectDto: projectModel, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        verifyTokenAndGetPayload\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyTokenAndGetPayload(authHeader: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Headers,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { projectModel } from '../dtos/project.model';\nimport { Project } from 'src/domain/entities/project.entity';\nimport { ProjectService } from 'src/infrastructure/services/project.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { jwtConstants } from 'src/constants';\n\n@Controller('projects')\nexport class ProjectsController {\n  constructor(\n    private readonly projectService: ProjectService,\n    private readonly jwtService: JwtService,\n    private readonly tenantservice: TenantsService,\n    private readonly userservice: UsersService,\n  ) {}\n\n  @Post()\n  async create(\n    @Body() createProjectDto: projectModel,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const tenantID = payload.sub;\n    const projetListCreated: any = await this.projectService.create(\n      createProjectDto,\n      tenantID,\n    );\n    return projetListCreated;\n  }\n\n  @Get()\n  async getAll(\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    let payload = await this.verifyTokenAndGetPayload(authHeader);\n    let role = payload.role;\n    if (role === 'admin') {\n      const tenants = await this.tenantservice.findAll();\n      let projectList: any[] = [];\n      for (let item of tenants) {\n        if (item.projects.length >= 1) projectList.push(item);\n      }\n      return projectList;\n    }\n  }\n\n  @Get('tenantProjects')\n  async getAllPerTenant(\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const tenantID = payload.sub;\n    return await this.projectService.findAllProjectsPerTenant(tenantID);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string): Promise {\n    return await this.projectService.findOne(id);\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateProjectDto: projectModel,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const tenantID = payload.sub;\n    const projectList: any = await this.projectService.update(\n      id,\n      updateProjectDto,\n      tenantID,\n    );\n    return projectList;\n  }\n\n  @Patch('undelete/:id')\n  async undelete(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const userID = payload.sub;\n    const user = await this.userservice.findById(userID);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    if (user.role === 'admin') {\n      const tenant = await this.tenantservice.findTenantByProjectId(id);\n      if (!tenant) {\n        throw new NotFoundException('Tenant not found for given project ID');\n      }\n      const tenantId = tenant._id;\n      return await this.projectService.undelete(id, tenantId);\n    } else {\n      throw new BadRequestException('Only admins can undelete projects');\n    }\n  }\n\n  @Delete(':id')\n  async remove(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    let tenant: any = '';\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const userID = payload.sub;\n    const user = await this.tenantservice.findById(userID);\n    if (user && user.role === 'tenant') {\n      return await this.projectService.delete(id, userID);\n    } else {\n      const user = await this.userservice.findById(userID);\n\n      if (user && user.role === 'admin') {\n        tenant = await this.tenantservice.findTenantByProjectId(id);\n        if (!tenant) {\n          throw new NotFoundException('Tenant not found for given project ID');\n        }\n        let tenantId = tenant._id;\n        return await this.projectService.delete(id, tenantId);\n      }\n    }\n  }\n\n  private async verifyTokenAndGetPayload(authHeader: string): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      return payload;\n    } catch (error) {\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProjectsModule.html":{"url":"modules/ProjectsModule.html","title":"module - ProjectsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProjectsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProjectsModule\n\n\n\ncluster_ProjectsModule_exports\n\n\n\ncluster_ProjectsModule_providers\n\n\n\n\nProjectService \n\nProjectService \n\n\n\nProjectsModule\n\nProjectsModule\n\nProjectService  -->\n\nProjectsModule->ProjectService \n\n\n\n\n\nProjectService\n\nProjectService\n\nProjectsModule -->\n\nProjectService->ProjectsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/project.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProjectService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProjectsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProjectService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Project, projectSchema } from 'src/domain/entities/project.entity';\nimport { ProjectService } from 'src/infrastructure/services/project.service';\nimport { ProjectsController } from 'src/presentation/controllers/project.controller';\nimport { projectModel } from 'src/presentation/dtos/project.model';\nimport { TenantModule } from './tenant.module';\nimport { UserModule } from './user.module';\nimport { AuthModule } from './auth.module';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { userModel } from 'src/presentation/dtos/user.model';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Project.name, schema: projectSchema }]),\n    forwardRef(() => TenantModule),\n    forwardRef(() => UserModule),\n  ],\n  controllers: [ProjectsController],\n  providers: [ProjectService],\n  exports: [ProjectService, MongooseModule],\n})\nexport class ProjectsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseInterceptor.html":{"url":"injectables/ResponseInterceptor.html","title":"injectable - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getMessage\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMessage(statusCode: number, context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/response.interceptor.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                statusCode\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/response.interceptor.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => {\n        const response = context.switchToHttp().getResponse();\n        const statusCode = response.statusCode;\n\n        return {\n          statusCode,\n          message: this.getMessage(statusCode, context),\n          data,\n        };\n      }),\n    );\n  }\n\n  private getMessage(statusCode: number, context: ExecutionContext): string {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n\n    switch (method) {\n      case 'POST':\n        return statusCode === 200 || 201\n          ? 'successfully completed'\n          : 'Error creating resource';\n      case 'PUT':\n      case 'PATCH':\n        return statusCode === 200 || 201\n          ? 'Resource updated successfully'\n          : 'Error updating resource';\n      case 'DELETE':\n        return statusCode === 200 || 201\n          ? 'Resource deleted successfully'\n          : 'Error deleting resource';\n      default:\n        return 'Request completed successfully';\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInRequest.html":{"url":"classes/SignInRequest.html","title":"class - SignInRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/signInRequest.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInRequest.model.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInRequest.model.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString } from \"class-validator\";\n\nexport class SignInRequest {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInTenantResponse.html":{"url":"classes/SignInTenantResponse.html","title":"class - SignInTenantResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInTenantResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/signInTenantResponse.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsOptional, IsString } from 'class-validator';\n\nexport class SignInTenantResponse {\n  @IsString()\n  _id: string;\n\n  @IsString()\n  name: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  address?: string;\n\n  @IsOptional()\n  @IsString()\n  website?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsString()\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInUserResponse.html":{"url":"classes/SignInUserResponse.html","title":"class - SignInUserResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInUserResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/signInUserResponse.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                age\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEmail,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { UserProject } from 'src/domain/entities/userProject.entity';\n\nexport class SignInUserResponse {\n  @IsString()\n  _id: string;\n\n  @IsString()\n  name: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  age?: number;\n\n  @IsString()\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tenant.html":{"url":"classes/Tenant.html","title":"class - Tenant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tenant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/tenant.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                deleted\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                projects\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, match: undefined, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({match: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Project[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport * as mongoose from 'mongoose';\nimport { Project, projectSchema } from './project.entity';\nimport {\n  ConflictException,\n  InternalServerErrorException,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { IsString } from 'class-validator';\n\nexport type TenantDocument = Tenant & Document;\n\n@Schema()\nexport class Tenant {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop({ required: true, unique: true })\n  name: string;\n\n  @Prop({\n    required: true,\n    match: [/^\\S+@\\S+\\.\\S+$/, 'Please use a valid email address'],\n    unique: true,\n  })\n  email: string;\n\n  @Prop({\n    required: true,\n    validate: [\n      // {\n      //   validator: (value: string) =>\n      //     /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/.test(value),\n      //   message:\n      //     'Password must contain at least one uppercase letter, one lowercase letter, and one digit, and be at least 8 characters long',\n      // },\n      {\n        validator: function (this: Tenant, value: string) {\n          return value === this.confirmPassword;\n        },\n        message: 'Passwords do not match',\n      },\n    ],\n  })\n  password: string;\n\n  @Prop({ required: true })\n  confirmPassword: string;\n\n  @Prop()\n  resetPasswordToken?: string;\n\n  @Prop()\n  resetPasswordExpires?: Date;\n\n  @Prop({\n    match: [/^(?:\\+20|0)?1[0125]\\d{8}$/, 'Please use a valid phone number'],\n  })\n  phone?: string;\n\n  @Prop()\n  address?: string;\n\n  @Prop({\n    // match: [\n    //   /^www\\.[a-zA-Z0-9-]+(\\.[a-zA-Z]+)+$/,\n    //   'Please use a valid website URL',\n    // ],\n  })\n  website?: string;\n\n  @Prop()\n  image?: string;\n\n  @Prop({ type: [projectSchema], default: [] })\n  projects: Project[];\n\n  @Prop()\n  role: string;\n\n  @Prop({ default: false })\n  deleted: boolean;\n}\n\nexport const TenantSchema = SchemaFactory.createForClass(Tenant);\n\nTenantSchema.pre('save', function (next) {\n  if (this.isModified('password') && this.password !== this.confirmPassword) {\n    next(new Error('Passwords do not match'));\n  } else {\n    next();\n  }\n});\n\nTenantSchema.post('save', function (error, doc, next) {\n  if (error.name === 'MongoServerError') {\n    if (error.code === 11000) {\n      if (error.message.includes('name')) {\n        return next(\n          new NotAcceptableException(\n            'Name must be unique. This name is already taken.',\n          ),\n        );\n      } else if (error.message.includes('email')) {\n        return next(\n          new NotAcceptableException(\n            'Email must be unique. This email is already registered.',\n          ),\n        );\n      }\n    } else if (error.message.includes('Password must be strong')) {\n      return next(new ConflictException('Password must be strong.'));\n    }\n  }\n  return next(error);\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TenantController.html":{"url":"controllers/TenantController.html","title":"controller - TenantController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TenantController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/tenant.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tenants\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                authorizeClient\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                getByEmail\n                            \n                            \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getTenantByProjectId\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                undelete\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateWithPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadImage\n                            \n                            \n                                    Private\n                                    Async\n                                verifyTokenAndGetPayload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        authorizeClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizeClient(clientID: string, clientSECRET: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authorize-client')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSECRET\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTenantByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenantByProjectId(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:174\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('undelete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateTenantDto: tenantModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateTenantDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(updateTenantDto: updateTenantModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('updateWithPassword')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateTenantDto\n                                            \n                                                            updateTenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadImage(id: string, image: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image/:id')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:167\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        verifyTokenAndGetPayload\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyTokenAndGetPayload(authHeader: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:182\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpException,\n  HttpStatus,\n  UseInterceptors,\n  UploadedFile,\n  Headers,\n  NotFoundException,\n  ConflictException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { tenantModel } from '../dtos/tenant.model';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtService } from '@nestjs/jwt';\nimport { updateTenantModel } from '../dtos/updateTenant.model';\nimport { jwtConstants } from 'src/constants';\n\n@Controller('tenants')\nexport class TenantController {\n  constructor(\n    private readonly tenantsService: TenantsService,\n    private readonly jwtservice: JwtService,\n  ) {}\n\n  @Get()\n  async findAll(): Promise {\n    return this.tenantsService.findAll();\n  }\n\n  @Get(':id')\n  async getById(@Param('id') id: string): Promise {\n    const tenant = await this.tenantsService.findById(id);\n    if (!tenant) {\n      throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n    }\n    return tenant;\n  }\n\n  @Get('email/:email')\n  async getByEmail(@Param('email') email: string): Promise {\n    const tenant = await this.tenantsService.findByEmail(email);\n    if (!tenant) {\n      throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n    }\n    return tenant;\n  }\n\n  @Patch()\n  async update(\n    @Body() updateTenantDto: tenantModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      const tenantId = payload.sub;\n      const updatedTenant = await this.tenantsService.update(\n        tenantId,\n        updateTenantDto,\n      );\n      if (!updatedTenant) {\n        throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedTenant;\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw new HttpException(error.message, error.getStatus());\n      }\n      throw new HttpException(\n        error.message || 'Failed to update tenant',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch('updateWithPassword')\n  async updateWithPassword(\n    @Body() updateTenantDto: updateTenantModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      const tenantId = payload.sub;\n      const updatedTenant = await this.tenantsService.updateWithPassword(\n        tenantId,\n        updateTenantDto,\n      );\n      if (!updatedTenant) {\n        throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedTenant;\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Failed to update tenant',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch('undelete/:id')\n  async undelete(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      if (payload.role === 'admin') {\n        const tenant = await this.tenantsService.undelete(id);\n        if (!tenant) {\n          throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n        }\n        return await this.findAll();\n      }\n    } catch (error) {\n      throw new HttpException(\n        'Failed to undelete tenant',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise {\n    try {\n      const tenant = await this.tenantsService.remove(id);\n      if (!tenant) {\n        throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n      }\n      return await this.findAll();\n    } catch (error) {\n      throw new HttpException(\n        'Failed to delete tenant',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Post('authorize-client')\n  async authorizeClient(\n    @Body('clientID') clientID: string,\n    @Body('clientSECRET') clientSECRET: string,\n  ): Promise {\n    try {\n      const projectId = await this.tenantsService.authorizeClient(\n        clientID,\n        clientSECRET,\n      );\n      const frontendURL = 'http://localhost:4200/authorize/';\n      const callbackUrl = frontendURL + projectId;\n      return { callbackUrl };\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.UNAUTHORIZED);\n    }\n  }\n\n  @Post('image/:id')\n  @UseInterceptors(FileInterceptor('image'))\n  async uploadImage(\n    @Param('id') id: string,\n    @UploadedFile() image: Express.Multer.File,\n  ) {\n    return await this.tenantsService.addImage(id, image);\n  }\n\n  async getTenantByProjectId(projectId: string): Promise {\n    const tenant = await this.tenantsService.findTenantByProjectId(projectId);\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n    return tenant;\n  }\n\n  private async verifyTokenAndGetPayload(authHeader: string): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const payload = await this.jwtservice.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      return payload;\n    } catch (error) {\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TenantModule.html":{"url":"modules/TenantModule.html","title":"module - TenantModule","body":"\n                   \n\n\n\n\n    Modules\n    TenantModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TenantModule\n\n\n\ncluster_TenantModule_exports\n\n\n\ncluster_TenantModule_providers\n\n\n\n\nImageService \n\nImageService \n\n\n\nTenantsService \n\nTenantsService \n\n\n\nTenantModule\n\nTenantModule\n\nImageService  -->\n\nTenantModule->ImageService \n\n\n\nTenantsService  -->\n\nTenantModule->TenantsService \n\n\n\n\n\nAuthService\n\nAuthService\n\nTenantModule -->\n\nAuthService->TenantModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nTenantModule -->\n\nEmailService->TenantModule\n\n\n\n\n\nImageService\n\nImageService\n\nTenantModule -->\n\nImageService->TenantModule\n\n\n\n\n\nTenantsService\n\nTenantsService\n\nTenantModule -->\n\nTenantsService->TenantModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tenant.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            ImageService\n                        \n                        \n                            TenantsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TenantController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageService\n                        \n                        \n                            TenantsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Tenant, TenantSchema } from 'src/domain/entities/tenant.entity';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\nimport { TenantController } from 'src/presentation/controllers/tenant.controller';\nimport { ProjectsModule } from './project.module';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { AuthModule } from './auth.module';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { UserModule } from './user.module';\nimport { EmailService } from 'src/infrastructure/services/email.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Tenant.name, schema: TenantSchema }]),\n    forwardRef(() => ProjectsModule),\n    forwardRef(() => UserModule),\n  ],\n  controllers: [TenantController],\n  providers: [TenantsService, ImageService, AuthService, EmailService],\n  exports: [TenantsService, MongooseModule, ImageService],\n})\nexport class TenantModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TenantsService.html":{"url":"injectables/TenantsService.html","title":"injectable - TenantsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TenantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/tenants.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImage\n                            \n                            \n                                    Async\n                                authorizeClient\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findTenantByProjectId\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                undelete\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateWithPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tenantModel: Model, imageService: ImageService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/tenants.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tenantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imageService\n                                                  \n                                                        \n                                                                        ImageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    addImage(id: string, image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizeClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizeClient(clientID: string, clientSECRET: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSECRET\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTenantDto: tenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTenantDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findTenantByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findTenantByProjectId(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:213\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTenantDto: tenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTenantDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(id: string, updateTenantDto: updateTenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTenantDto\n                                            \n                                                            updateTenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { tenantModel } from '../../presentation/dtos/tenant.model';\nimport { Tenant, TenantDocument } from '../../domain/entities/tenant.entity';\nimport { ImageService } from './image.service';\nimport * as bcrypt from 'bcrypt';\nimport { updateTenantModel } from 'src/presentation/dtos/updateTenant.model';\nimport { jwtConstants } from '../../constants';\n\n@Injectable()\nexport class TenantsService {\n  constructor(\n    @InjectModel(Tenant.name) private tenantModel: Model,\n    private imageService: ImageService,\n  ) {}\n\n  async create(createTenantDto: tenantModel): Promise {\n    const createdTenant = new this.tenantModel(createTenantDto);\n    return createdTenant.save();\n  }\n\n  async findById(id: string): Promise {\n    return await this.tenantModel.findById(id);\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.tenantModel.findOne({ email });\n  }\n\n  async findAll(): Promise {\n    return this.tenantModel.find();\n  }\n\n  async update(id: string, updateTenantDto: tenantModel): Promise {\n    const { email, name } = updateTenantDto;\n    let user: tenantModel;\n\n    try {\n      user = await this.findById(id);\n\n      if (!user) {\n        throw new NotFoundException('Tenant not found or already deleted');\n      }\n\n      if (email) {\n        const existingTenant = await this.findByEmail(email);\n        if (\n          existingTenant &&\n          existingTenant.email === email &&\n          user.email !== email\n        ) {\n          throw new ConflictException('Email already exists, try to login');\n        }\n      }\n\n      if (name) {\n        const tenants = await this.findAll();\n        const isNameInUse = tenants.some(\n          (tenant) => tenant.name === name && user.name !== name,\n        );\n        if (isNameInUse) {\n          throw new ConflictException('Name already in use, try another one');\n        }\n      }\n\n      const tenantAfterUpdate = await this.tenantModel.findOneAndUpdate(\n        { _id: id, deleted: false },\n        updateTenantDto,\n        { new: true },\n      );\n\n      if (!tenantAfterUpdate) {\n        throw new NotFoundException('Tenant not found or already deleted');\n      }\n\n      return tenantAfterUpdate;\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw error;\n      } else {\n        console.error('Error updating tenant:', error);\n        throw new InternalServerErrorException('Failed to update tenant');\n      }\n    }\n  }\n\n  async updateWithPassword(\n    id: string,\n    updateTenantDto: updateTenantModel,\n  ): Promise {\n    const tenant = await this.tenantModel.findById(id);\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n\n    const { email, name, oldPassword, newPassword, confirmNewPassword } =\n      updateTenantDto;\n\n    try {\n      if (email && email !== tenant.email) {\n        const existingTenant = await this.findByEmail(email);\n        if (existingTenant) {\n          throw new ConflictException('Email already exists, try to login');\n        }\n      }\n\n      if (name && name !== tenant.name) {\n        const tenants = await this.findAll();\n        if (tenants.some((t) => t.name === name)) {\n          throw new ConflictException('Name already in use, try another one');\n        }\n      }\n\n      if (oldPassword) {\n        const isMatch = await bcrypt.compare(oldPassword, tenant.password);\n        if (!isMatch) {\n          throw new BadRequestException('Old password is incorrect');\n        }\n      }\n\n      if (newPassword && confirmNewPassword) {\n        if (newPassword !== confirmNewPassword) {\n          throw new BadRequestException('New passwords do not match');\n        }\n        const salt = await bcrypt.genSalt();\n        tenant.password = await bcrypt.hash(newPassword, salt);\n        tenant.confirmPassword = tenant.password;\n      }\n\n      Object.assign(tenant, updateTenantDto);\n      return await tenant.save();\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      } else {\n        console.error('Error updating tenant with password:', error);\n        throw new InternalServerErrorException('Failed to update tenant');\n      }\n    }\n  }\n\n  async remove(id: string): Promise {\n    const tenant = await this.tenantModel.findById(id);\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n    tenant.deleted = true;\n    await tenant.save({ validateModifiedOnly: true });\n    return tenant;\n  }\n\n  async undelete(id: string): Promise {\n    const tenant = await this.tenantModel.findById(id);\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n    tenant.deleted = false;\n    await tenant.save({ validateModifiedOnly: true });\n    return tenant;\n  }\n\n  async authorizeClient(\n    clientID: string,\n    clientSECRET: string,\n  ): Promise {\n    const tenant = await this.tenantModel.findOne({\n      'projects.clientID': clientID,\n      'projects.clientSECRET': clientSECRET,\n    });\n\n    if (!tenant) {\n      throw new Error('Tenant not found for the given client credentials.');\n    }\n    const project = tenant.projects.find(\n      (proj) =>\n        proj.clientID === clientID && proj.clientSECRET === clientSECRET,\n    );\n    if (!project) {\n      throw new Error('Project not found for the given client credentials.');\n    }\n    return project._id.toString();\n  }\n\n  async addImage(id: string, image: Express.Multer.File): Promise {\n    const tenant = await this.tenantModel.findById(id);\n\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n\n    await this.imageService.upload('tenants', id, image);\n\n    tenant.image =\n      jwtConstants.imageUrl + 'tenants/' + `${id}/` + image.originalname;\n\n    return tenant.save();\n  }\n\n  async findTenantByProjectId(projectId: string): Promise {\n    return this.tenantModel.findOne({ 'projects._id': projectId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                age\n                            \n                            \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                deleted\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                facebookId\n                            \n                            \n                                    \n                                    Optional\n                                githubId\n                            \n                            \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                projects\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({min: undefined, max: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, match: undefined, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        facebookId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        githubId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({match: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserProject[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Types } from 'mongoose';\nimport { UserProject } from './userProject.entity';\nimport { IsString } from 'class-validator';\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class User {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({\n    required: true,\n    match: [/^\\S+@\\S+\\.\\S+$/, 'Please use a valid email address'],\n    unique: true,\n  })\n  email: string;\n\n  @Prop({\n    required: true,\n    validate: [\n      // {\n      //   validator: (value: string) =>\n      //     /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/.test(value),\n      //   message:\n      //     'Password must contain at least one uppercase letter, one lowercase letter, and one digit, and be at least 8 characters long',\n      // },\n      {\n        validator: function (this: User, value: string) {\n          return value === this.confirmPassword;\n        },\n        message: 'Passwords do not match',\n      },\n    ],\n  })\n  password: string;\n\n  @Prop({ required: true })\n  confirmPassword: string;\n\n  @Prop()\n  resetPasswordToken?: string;\n\n  @Prop()\n  resetPasswordExpires?: Date;\n\n  @Prop({\n    match: [/^(?:\\+20|0)?1[0125]\\d{8}$/, 'Please use a valid phone number'],\n  })\n  phone: string;\n\n  @Prop()\n  token: string;\n\n  @Prop()\n  image: string;\n\n  @Prop({\n    min: [13, 'Age must be at least 13'],\n    max: [100, 'Age must be at most 100'],\n  })\n  age: number;\n\n  @Prop({ unique: true, sparse: true })\n  googleId?: string;\n\n  @Prop({ unique: true, sparse: true })\n  githubId?: string;\n\n  @Prop({ unique: true, sparse: true })\n  facebookId?: string;\n\n  @Prop({ default: false })\n  deleted: boolean;\n\n  @Prop()\n  role: string;\n\n  @Prop({ type: [UserProject] })\n  projects: UserProject[];\n}\n\nexport const userSchema = SchemaFactory.createForClass(User);\n\nuserSchema.pre('save', function (next) {\n  if (this.isModified('password') && this.password !== this.confirmPassword) {\n    next(new Error('Passwords do not match'));\n  } else {\n    next();\n  }\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addProjectToUserByProjectId\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                getByEmail\n                            \n                            \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    Async\n                                getByIdWithProjects\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                removeProject\n                            \n                            \n                                    \n                                    Async\n                                undelete\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateWithPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadImage\n                            \n                            \n                                    Private\n                                    Async\n                                verifyTokenAndGetPayload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addProjectToUserByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    addProjectToUserByProjectId(body: literal type, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getByIdWithProjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByIdWithProjects(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('projects/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeProject(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('project/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:221\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('undelete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateUserDto: userModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(updateUserDto: updateUserModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('updateWithPassword')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            updateUserModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadImage(id: string, image: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image/:id')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:245\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        verifyTokenAndGetPayload\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyTokenAndGetPayload(authHeader: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:252\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Headers,\n  HttpException,\n  HttpStatus,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  UnauthorizedException,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { userModel } from '../dtos/user.model';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtService } from '@nestjs/jwt';\nimport { updateUserModel } from '../dtos/updateUser.model';\nimport { ProjectService } from 'src/infrastructure/services/project.service';\nimport { jwtConstants } from 'src/constants';\nimport { User } from 'src/domain/entities/user.entity';\n\n@Controller('users')\nexport class UserController {\n  constructor(\n    private userService: UsersService,\n    private authservice: AuthService,\n    private imageService: ImageService,\n    private jwtservice: JwtService,\n    private projectservice: ProjectService,\n  ) {}\n\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  async getById(@Param('id') id: string) {\n    try {\n      const user = await this.userService.findById(id);\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Failed to retrieve user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('projects/:id')\n  async getByIdWithProjects(@Param('id') id: string) {\n    try {\n      const user = await this.userService.findByIdWithProjects(id);\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Failed to retrieve user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('email/:email')\n  async getByEmail(@Param('email') email: string) {\n    try {\n      const user = await this.userService.findByEmail(email);\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Failed to retrieve user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Post()\n  async addProjectToUserByProjectId(\n    @Body() body: { projectId: string },\n    @Headers('Authorization') authHeader: string,\n  ) {\n    try {\n      const { projectId } = body;\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      const userId = payload.sub;\n      let result;\n\n      const targetProject = await this.projectservice.findOne(projectId);\n      if (targetProject.deleted === false) {\n        const projectName = targetProject.name;\n        result = await this.authservice.processAuth(\n          projectId,\n          userId,\n          projectName,\n        );\n      } else {\n        throw new HttpException(\n          'project not found, or has been deleted',\n          HttpStatus.NOT_FOUND,\n        );\n      }\n\n      return {\n        result,\n        success: true,\n        message: 'Project Added successfully',\n      };\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw new HttpException(error.message, error.getStatus());\n      }\n      throw new HttpException(\n        error.message || 'Failed to add project',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch()\n  async update(\n    @Body() updateUserDto: userModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      const userId = payload.sub;\n      const updatedUser = await this.userService.update(userId, updateUserDto);\n      if (!updatedUser) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedUser;\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Failed to update user',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch('updateWithPassword')\n  async updateWithPassword(\n    @Body() updateUserDto: updateUserModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      const userId = payload.sub;\n      const updatedUser = await this.userService.updateWithPassword(\n        userId,\n        updateUserDto,\n      );\n      if (!updatedUser) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedUser;\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Failed to update user',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch('undelete/:id')\n  async undelete(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      if (payload.role === 'admin') {\n        const user = await this.userService.undelete(id);\n        if (!user) {\n          throw new HttpException('user not found', HttpStatus.NOT_FOUND);\n        }\n        return await this.findAll();\n      }\n    } catch (error) {\n      throw new HttpException(\n        'Failed to undelete user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise {\n    try {\n      const user = await this.userService.remove(id);\n      if (!user) {\n        throw new HttpException('user not found', HttpStatus.NOT_FOUND);\n      }\n      return await this.findAll();\n    } catch (error) {\n      throw new HttpException(\n        'Failed to delete user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete('project/:id')\n  async removeProject(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    let targetUser: any = '';\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const userID = payload.sub;\n    const user = await this.userService.findById(userID);\n    if (user && user.role === 'user') {\n      return await this.userService.delete(id, userID);\n    } else {\n      if (user && user.role === 'admin') {\n        targetUser = await this.userService.findUserByProjectId(id);\n        if (!targetUser) {\n          throw new NotFoundException('User not found for given project ID');\n        }\n        let targetUserId = targetUser._id;\n        return await this.userService.delete(id, targetUserId);\n      }\n    }\n  }\n\n  @Post('image/:id')\n  @UseInterceptors(FileInterceptor('image'))\n  async uploadImage(\n    @Param('id') id: string,\n    @UploadedFile() image: Express.Multer.File,\n  ) {\n    return await this.userService.addImage(id, image);\n  }\n\n  private async verifyTokenAndGetPayload(authHeader: string): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const payload = await this.jwtservice.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      return payload;\n    } catch (error) {\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nTenantModule\n\nTenantModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nTenantModule->UserModule\n\n\n\n\n\nImageService \n\nImageService \n\nImageService  -->\n\nUserModule->ImageService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nImageService\n\nImageService\n\nUserModule -->\n\nImageService->UserModule\n\n\n\n\n\nIndexManagementService\n\nIndexManagementService\n\nUserModule -->\n\nIndexManagementService->UserModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            ImageService\n                        \n                        \n                            IndexManagementService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TenantModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Schema } from '@nestjs/mongoose';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { User, userSchema } from '../domain/entities/user.entity';\nimport { UserController } from '../presentation/controllers/user.controller';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { TenantModule } from './tenant.module';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { ProjectsModule } from './project.module';\nimport { IndexManagementService } from 'src/infrastructure/services/indexManagement.service';\nimport { EmailService } from 'src/infrastructure/services/email.service';\n\n@Module({\n  imports: [\n    TenantModule,\n    MongooseModule.forFeature([{ name: User.name, schema: userSchema }]),\n    forwardRef(() => ProjectsModule),\n    forwardRef(() => TenantModule),\n  ],\n  providers: [\n    AuthService,\n    UsersService,\n    ImageService,\n    IndexManagementService,\n    EmailService,\n  ],\n  controllers: [UserController],\n  exports: [UsersService, ImageService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProject.html":{"url":"classes/UserProject.html","title":"class - UserProject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/userProject.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationAccessToken\n                            \n                            \n                                    \n                                authorizationCode\n                            \n                            \n                                    \n                                    Optional\n                                callBackUrl\n                            \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                expireDate\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                projectID\n                            \n                            \n                                    \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationAccessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        callBackUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expireDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projectID\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Project'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { IsString } from 'class-validator';\nimport mongoose, { Types } from 'mongoose';\n\n@Schema()\nexport class UserProject {\n  @Prop({ type: Types.ObjectId, ref: 'Project' })\n  projectID: Types.ObjectId;\n\n  @Prop()\n  authorizationCode: string;\n\n  @Prop()\n  authorizationAccessToken: string;\n\n  @Prop()\n  expireDate: Date;\n\n  @Prop()\n  @IsString()\n  name: string;\n\n  @Prop()\n  callBackUrl?: string;\n\n  @Prop()\n  createdAt?: string;\n\n  @Prop()\n  updatedAt?: string;\n\n  @Prop({ default: false })\n  deleted?: boolean;\n}\n\nexport const userProjectSchema = SchemaFactory.createForClass(UserProject);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImage\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createGithubUser\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllUsersWithProjects\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findByFacebookId\n                            \n                            \n                                    Async\n                                findByGitHubId\n                            \n                            \n                                    Async\n                                findByGoogleId\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByIdWithProjects\n                            \n                            \n                                    Async\n                                findUserByProjectId\n                            \n                            \n                                    Private\n                                    Async\n                                getUserProjects\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                undelete\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateWithPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, imageService: ImageService, tenantservice: TenantsService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/users.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imageService\n                                                  \n                                                        \n                                                                        ImageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantservice\n                                                  \n                                                        \n                                                                        TenantsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    addImage(id: string, image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:250\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createGithubUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGithubUser(createUserDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:212\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllUsersWithProjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsersWithProjects()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByFacebookId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByFacebookId(facebookId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                facebookId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByGitHubId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByGitHubId(githubId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                githubId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByIdWithProjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByIdWithProjects(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByProjectId(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:263\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getUserProjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserProjects(projectRef: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectRef\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:202\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(user: User | any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User | any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:240\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(id: string, updateUserDto: updateUserModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:145\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            updateUserModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { userModel } from '../../presentation/dtos/user.model';\nimport { User, UserDocument } from '../../domain/entities/user.entity';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { updateUserModel } from 'src/presentation/dtos/updateUser.model';\nimport * as bcrypt from 'bcrypt';\nimport { TenantsService } from './tenants.service';\nimport { jwtConstants } from '../../constants';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    private imageService: ImageService,\n    private tenantservice: TenantsService,\n  ) {}\n\n  async create(createUserDto: userModel): Promise {\n    const createdUser = new this.userModel(createUserDto);\n    return createdUser.save();\n  }\n\n  async createGithubUser(createUserDto: userModel): Promise {\n    const createdUser = new this.userModel(createUserDto);\n    return createdUser.save({ validateBeforeSave: false });\n  }\n\n  async findAll(): Promise {\n    const users = await this.userModel.find();\n    for (const user of users) {\n      user.projects = await this.getUserProjects(user.projects);\n    }\n    return users;\n  }\n\n  async findAllUsersWithProjects(): Promise {\n    const users = await this.userModel.find().populate('projects');\n    return users;\n  }\n\n  async findById(id: string): Promise {\n    return await this.userModel.findById(id);\n  }\n\n  async findByIdWithProjects(id: string): Promise {\n    const user = await this.userModel.findById(id);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    user.projects = await this.getUserProjects(user.projects);\n\n    return user;\n  }\n\n  async findByEmail(email: string): Promise {\n    return await this.userModel.findOne({ email });\n  }\n\n  private async getUserProjects(projectRef: any[]): Promise {\n    const targetProject = [];\n\n    for (const projRef of projectRef) {\n      const tenant = await this.tenantservice.findTenantByProjectId(\n        projRef.projectID,\n      );\n      if (tenant) {\n        const project = tenant.projects.find(\n          (p) => p._id.toString() === projRef.projectID,\n        );\n        if (project) {\n          targetProject.push(project);\n        }\n      }\n    }\n    return targetProject;\n  }\n\n  async findByGitHubId(githubId: string): Promise {\n    return this.userModel.findOne({ githubId }).exec();\n  }\n\n  async findByGoogleId(googleId: string): Promise {\n    return this.userModel.findOne({ googleId }).exec();\n  }\n\n  async findByFacebookId(facebookId: string): Promise {\n    return this.userModel.findOne({ facebookId }).exec();\n  }\n\n  async save(user: User | any): Promise {\n    return await user.save();\n  }\n\n  async update(id: string, updateUserDto: userModel): Promise {\n    let newEmail: any;\n    let targetUser: userModel;\n    let user: any;\n\n    try {\n      user = await this.findById(id);\n      if (updateUserDto.email !== null) {\n        newEmail = updateUserDto.email;\n        targetUser = await this.findByEmail(newEmail);\n      }\n\n      if (\n        targetUser &&\n        targetUser.email === newEmail &&\n        user.email != newEmail\n      ) {\n        throw new ConflictException('Email already exists, try to login');\n      }\n\n      const userAfterUpdate: any = await this.userModel\n        .findByIdAndUpdate(id, updateUserDto, { new: true })\n        .exec();\n\n      if (!userAfterUpdate) {\n        throw new NotFoundException('User not found');\n      }\n\n      return userAfterUpdate;\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw error;\n      } else {\n        console.error('Error updating user:', error);\n        throw new InternalServerErrorException('Failed to update user');\n      }\n    }\n  }\n\n  async updateWithPassword(\n    id: string,\n    updateUserDto: updateUserModel,\n  ): Promise {\n    let newEmail: any;\n    let targetUser: userModel;\n    const user = await this.userModel.findById(id).exec();\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    try {\n      if (updateUserDto.email !== null) {\n        newEmail = updateUserDto.email;\n        targetUser = await this.findByEmail(newEmail);\n      }\n\n      if (targetUser && targetUser.email === newEmail) {\n        throw new ConflictException('Email already exists, try to login');\n      }\n\n      if (updateUserDto.oldPassword) {\n        const isMatch = await bcrypt.compare(\n          updateUserDto.oldPassword,\n          user.password,\n        );\n        if (!isMatch) {\n          throw new BadRequestException('Old password is incorrect');\n        }\n      }\n\n      if (updateUserDto.newPassword && updateUserDto.confirmNewPassword) {\n        if (updateUserDto.newPassword !== updateUserDto.confirmNewPassword) {\n          throw new BadRequestException('New passwords do not match');\n        }\n        const salt = await bcrypt.genSalt();\n        user.password = await bcrypt.hash(updateUserDto.newPassword, salt);\n        user.confirmPassword = user.password;\n      }\n\n      Object.assign(user, updateUserDto);\n      return await user.save();\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      } else {\n        console.error('Error updating user with password:', error);\n        throw new InternalServerErrorException('Failed to update user');\n      }\n    }\n  }\n\n  async remove(id: string): Promise {\n    const user = await this.userModel.findById(id).exec();\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    user.deleted = true;\n    await user.save({ validateModifiedOnly: true });\n    return user;\n  }\n\n  async delete(id: string, userID: string): Promise {\n    const user = await this.userModel.findById(userID);\n    if (!user) {\n      throw new NotFoundException(`Tenant not found`);\n    }\n\n    if (!user.projects || !Array.isArray(user.projects)) {\n      throw new BadRequestException(\n        'Projects list is not available for this tenant',\n      );\n    }\n\n    const project = user.projects.find(\n      (proj) => proj.projectID.toString() === id,\n    );\n    if (!project) {\n      throw new NotFoundException(`Project with ID: ${id} not found in tenant`);\n    }\n\n    project.deleted = true;\n    try {\n      await user.save({ validateModifiedOnly: true });\n      return user;\n    } catch (error) {\n      throw new BadRequestException('Failed to delete project');\n    }\n  }\n\n  async undelete(id: string): Promise {\n    const user = await this.userModel.findById(id);\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n    user.deleted = false;\n    await user.save({ validateModifiedOnly: true });\n    return user;\n  }\n\n  async addImage(id: string, image: Express.Multer.File): Promise {\n    const user = await this.userModel.findById(id).exec();\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    await this.imageService.upload('users', id, image);\n\n    user.image =\n      jwtConstants.imageUrl + 'users/' + `${id}/` + image.originalname;\n    return user.save();\n  }\n\n  async findUserByProjectId(projectId: string): Promise {\n    return this.userModel.findOne({ 'projects._id': projectId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/paypal.entity.ts\n            \n            class\n            PaypalTransaction\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/domain/entities/paypal.entity.ts\n            \n            variable\n            PaypalTransactionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/project.entity.ts\n            \n            class\n            Project\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/domain/entities/project.entity.ts\n            \n            variable\n            projectSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/tenant.entity.ts\n            \n            class\n            Tenant\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/domain/entities/tenant.entity.ts\n            \n            variable\n            TenantSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/domain/entities/user.entity.ts\n            \n            variable\n            userSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/userProject.entity.ts\n            \n            class\n            UserProject\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/domain/entities/userProject.entity.ts\n            \n            variable\n            userProjectSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/Strategies/facebookAuth.strategy.ts\n            \n            injectable\n            FacebookAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/Strategies/githubAuth.strategy.ts\n            \n            injectable\n            GithubAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/Strategies/googleAuth.strategy.ts\n            \n            injectable\n            GoogleAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/paypal/paypal-transaction.service.ts\n            \n            injectable\n            PaypalTransactionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/paypal/paypal.service.ts\n            \n            injectable\n            PaypalService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/infrastructure/services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/services/image.service.ts\n            \n            injectable\n            ImageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/services/indexManagement.service.ts\n            \n            injectable\n            IndexManagementService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/services/project.service.ts\n            \n            injectable\n            ProjectService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/services/tenants.service.ts\n            \n            injectable\n            TenantsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/services/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/infrastructure/supabase/supabaseClient.ts\n            \n            variable\n            supabase\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/supabase/supabaseClient.ts\n            \n            variable\n            supabaseKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/supabase/supabaseClient.ts\n            \n            variable\n            supabaseUrl\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/presentation/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/presentation/controllers/paypal.controller.ts\n            \n            controller\n            PaypalController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/presentation/controllers/project.controller.ts\n            \n            controller\n            ProjectsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/presentation/controllers/tenant.controller.ts\n            \n            controller\n            TenantController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/presentation/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/presentation/dtos/project.model.ts\n            \n            class\n            projectModel\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/presentation/dtos/signInRequest.model.ts\n            \n            class\n            SignInRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/presentation/dtos/signInTenantResponse.model.ts\n            \n            class\n            SignInTenantResponse\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/presentation/dtos/signInUserResponse.model.ts\n            \n            class\n            SignInUserResponse\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/presentation/dtos/tenant.model.ts\n            \n            class\n            tenantModel\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/presentation/dtos/updateTenant.model.ts\n            \n            class\n            updateTenantModel\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/presentation/dtos/updateUser.model.ts\n            \n            class\n            updateUserModel\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/presentation/dtos/user.model.ts\n            \n            class\n            userModel\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/presentation/dtos/userProject.model.ts\n            \n            class\n            userProjectModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/presentation/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/presentation/guards/auth.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/presentation/interceptors/response.interceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.3.9\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.9\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mongoose : ^10.0.6\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.3.9\n        \n            @paypal/checkout-server-sdk : ^1.0.3\n        \n            @supabase/supabase-js : ^2.43.4\n        \n            bcrypt : ^5.1.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            mongoose : ^8.4.3\n        \n            multer : ^1.4.5-lts.1\n        \n            multer-s3 : ^3.0.1\n        \n            nodemailer : ^6.9.14\n        \n            passport : ^0.7.0\n        \n            passport-facebook : ^3.0.0\n        \n            passport-github : ^1.1.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            stripe : ^15.11.0\n        \n            uuid : ^10.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaypalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProjectsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TenantModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PaypalModule\n\n\n\ncluster_PaypalModule_providers\n\n\n\ncluster_ProjectsModule\n\n\n\ncluster_ProjectsModule_exports\n\n\n\ncluster_ProjectsModule_providers\n\n\n\ncluster_TenantModule\n\n\n\ncluster_TenantModule_exports\n\n\n\ncluster_TenantModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPaypalModule\n\nPaypalModule\n\nAppModule -->\n\nPaypalModule->AppModule\n\n\n\n\n\nProjectsModule\n\nProjectsModule\n\nAuthModule -->\n\nProjectsModule->AuthModule\n\n\n\nAppModule -->\n\nProjectsModule->AppModule\n\n\n\n\n\nProjectService \n\nProjectService \n\nProjectService  -->\n\nProjectsModule->ProjectService \n\n\n\n\n\nTenantModule\n\nTenantModule\n\nAuthModule -->\n\nTenantModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nTenantModule->UserModule\n\n\n\nAppModule -->\n\nTenantModule->AppModule\n\n\n\n\n\nImageService \n\nImageService \n\nImageService  -->\n\nTenantModule->ImageService \n\n\n\n\n\nTenantsService \n\nTenantsService \n\nTenantsService  -->\n\nTenantModule->TenantsService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nImageService  -->\n\nUserModule->ImageService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nTenantModule -->\n\nAuthService->TenantModule\n\n\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\nTenantModule -->\n\nEmailService->TenantModule\n\n\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nFacebookAuthStrategy\n\nFacebookAuthStrategy\n\nAuthModule -->\n\nFacebookAuthStrategy->AuthModule\n\n\n\n\n\nGithubAuthStrategy\n\nGithubAuthStrategy\n\nAuthModule -->\n\nGithubAuthStrategy->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nPaypalService\n\nPaypalService\n\nPaypalModule -->\n\nPaypalService->PaypalModule\n\n\n\n\n\nPaypalTransactionService\n\nPaypalTransactionService\n\nPaypalModule -->\n\nPaypalTransactionService->PaypalModule\n\n\n\n\n\nProjectService\n\nProjectService\n\nProjectsModule -->\n\nProjectService->ProjectsModule\n\n\n\n\n\nImageService\n\nImageService\n\nTenantModule -->\n\nImageService->TenantModule\n\n\n\nUserModule -->\n\nImageService->UserModule\n\n\n\n\n\nTenantsService\n\nTenantsService\n\nTenantModule -->\n\nTenantsService->TenantModule\n\n\n\n\n\nIndexManagementService\n\nIndexManagementService\n\nUserModule -->\n\nIndexManagementService->UserModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/projectModel.html":{"url":"classes/projectModel.html","title":"class - projectModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  projectModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/project.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                callBackUrl\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                clientID\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                clientSECRET\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tenantID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        callBackUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUrl()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        clientID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        clientSECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tenantID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsUrl,\n  IsOptional,\n  IsBoolean,\n} from 'class-validator';\n\nexport class projectModel {\n  @IsString()\n  @IsOptional()\n  tenantID?: string;\n\n  @IsString()\n  @IsOptional()\n  clientID?: string;\n\n  @IsString()\n  @IsOptional()\n  clientSECRET?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsUrl()\n  @IsNotEmpty()\n  callBackUrl: string;\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/tenantModel.html":{"url":"classes/tenantModel.html","title":"class - tenantModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  tenantModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/tenant.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                projects\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'password is required'})@Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {message: 'Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Project[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude, Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsEmail,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { Project } from 'src/domain/entities/project.entity';\n\nexport class tenantModel {\n  @IsNotEmpty()\n  readonly name: string;\n\n  @IsEmail()\n  readonly email: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'password is required' })\n  @Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {\n    message:\n      'Password must include a number, lowercase, uppercase, special character',\n  })\n  password: string;\n  confirmPassword: string;\n\n  @IsOptional()\n  @IsString()\n  resetPasswordToken?: string;\n\n  @IsOptional()\n  @IsDate()\n  resetPasswordExpires?: Date;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  address?: string;\n\n  @IsOptional()\n  @IsString()\n  website?: string;\n\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => Project)\n  @IsOptional()\n  projects?: Project[];\n\n  @IsString()\n  role: string;\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PaypalTransactionDocument   (src/.../paypal.entity.ts)\n                        \n                        \n                            TenantDocument   (src/.../tenant.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/domain/entities/paypal.entity.ts\n    \n    \n        \n            \n                \n                    \n                    PaypalTransactionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/domain/entities/tenant.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TenantDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/domain/entities/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/updateTenantModel.html":{"url":"classes/updateTenantModel.html","title":"class - updateTenantModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  updateTenantModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/updateTenant.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                confirmNewPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                oldPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                projects\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        confirmNewPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'Password too weak'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Project[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  ValidateNested,\n} from 'class-validator';\nimport { Project } from 'src/domain/entities/project.entity';\n\nexport class updateTenantModel {\n  @IsOptional()\n  @IsString()\n  readonly name?: string;\n\n  @IsOptional()\n  @IsEmail()\n  readonly email?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly phone?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly address?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly website?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly image?: string;\n\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => Project)\n  readonly projects?: Project[];\n\n  @IsOptional()\n  @IsBoolean()\n  readonly deleted?: boolean;\n\n  @IsOptional()\n  @IsString()\n  readonly oldPassword?: string;\n\n  @IsOptional()\n  @IsString()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    {\n      message: 'Password too weak',\n    },\n  )\n  readonly newPassword?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly confirmNewPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/updateUserModel.html":{"url":"classes/updateUserModel.html","title":"class - updateUserModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  updateUserModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/updateUser.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                age\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                confirmNewPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                oldPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                projects\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        confirmNewPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'confirmNewPassword is required'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'Confirm New Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(/^\\S+@\\S+\\.\\S+$/, {message: 'email pattern is invalid'})@IsNotEmpty({message: 'email is required'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'name is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'newPassword is required'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'New Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'oldPassword is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserProject[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsOptional,\n  MinLength,\n  IsNumber,\n  IsNotEmpty,\n  Matches,\n  IsArray,\n  IsBoolean,\n} from 'class-validator';\nimport { UserProject } from 'src/domain/entities/userProject.entity';\n\nexport class updateUserModel {\n  @IsString()\n  @IsNotEmpty({ message: 'name is required' })\n  name: string;\n\n  @Matches(/^\\S+@\\S+\\.\\S+$/, {\n    message: 'email pattern is invalid',\n  })\n  @IsNotEmpty({ message: 'email is required' })\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  age?: number;\n\n  @IsOptional()\n  @IsArray()\n  projects?: UserProject[];\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n\n  @IsString()\n  @IsNotEmpty({ message: 'oldPassword is required' })\n  oldPassword: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'newPassword is required' })\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    {\n      message:\n        'New Password must include a number, lowercase, uppercase, special character',\n    },\n  )\n  newPassword: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'confirmNewPassword is required' })\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    {\n      message:\n        'Confirm New Password must include a number, lowercase, uppercase, special character',\n    },\n  )\n  confirmNewPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/userModel.html":{"url":"classes/userModel.html","title":"class - userModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  userModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/user.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                age\n                            \n                            \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                facebookId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                githubId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                projects\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(/^\\S+@\\S+\\.\\S+$/, {message: 'email pattern is invalid'})@IsNotEmpty({message: 'email is required'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        facebookId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        githubId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'name is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'password is required'})@Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {message: 'Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserProject[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:74\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsOptional,\n  MinLength,\n  IsNumber,\n  IsNotEmpty,\n  Matches,\n  IsArray,\n  IsBoolean,\n  IsDate,\n} from 'class-validator';\nimport { UserProject } from 'src/domain/entities/userProject.entity';\n\nexport class userModel {\n  @IsString()\n  @IsNotEmpty({ message: 'name is required' })\n  name: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'password is required' })\n  @Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {\n    message:\n      'Password must include a number, lowercase, uppercase, special character',\n  })\n  password: string;\n  confirmPassword: string;\n\n  @IsOptional()\n  @IsString()\n  resetPasswordToken?: string;\n\n  @IsOptional()\n  @IsDate()\n  resetPasswordExpires?: Date;\n\n  @Matches(/^\\S+@\\S+\\.\\S+$/, {\n    message: 'email pattern is invalid',\n  })\n  @IsNotEmpty({ message: 'email is required' })\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  githubId?: string;\n\n  @IsOptional()\n  @IsString()\n  googleId?: string;\n\n  @IsOptional()\n  @IsString()\n  facebookId?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  age?: number;\n\n  @IsOptional()\n  @IsArray()\n  projects?: UserProject[];\n\n  @IsString()\n  role: string;\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/userProjectModel.html":{"url":"classes/userProjectModel.html","title":"class - userProjectModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  userProjectModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/userProject.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationAccessToken\n                            \n                            \n                                    \n                                authorizationCode\n                            \n                            \n                                    \n                                expireDate\n                            \n                            \n                                    \n                                projectID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationAccessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expireDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projectID\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.model.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsEmail, IsString } from 'class-validator';\nimport { ObjectId } from 'mongoose';\n\nexport class userProjectModel {\n  @IsString()\n  projectID: ObjectId;\n\n  @IsString()\n  authorizationCode: string;\n\n  @IsString()\n  authorizationAccessToken: string;\n\n  @IsDate()\n  expireDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            PaypalTransactionSchema   (src/.../paypal.entity.ts)\n                        \n                        \n                            projectSchema   (src/.../project.entity.ts)\n                        \n                        \n                            supabase   (src/.../supabaseClient.ts)\n                        \n                        \n                            supabaseKey   (src/.../supabaseClient.ts)\n                        \n                        \n                            supabaseUrl   (src/.../supabaseClient.ts)\n                        \n                        \n                            TenantSchema   (src/.../tenant.entity.ts)\n                        \n                        \n                            userProjectSchema   (src/.../userProject.entity.ts)\n                        \n                        \n                            userSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret:\n    'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',\n  imageUrl:\n    'https://pqvvtmvqzwsewlhbgdzr.supabase.co/storage/v1/object/public/authgateimages/',\n}\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/paypal.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaypalTransactionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(PaypalTransaction)\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/project.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        projectSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Project)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/supabase/supabaseClient.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        supabase\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createClient(supabaseUrl, supabaseKey)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        supabaseKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBxdnZ0bXZxendzZXdsaGJnZHpyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTgyMTIxNjQsImV4cCI6MjAzMzc4ODE2NH0.jvdWxDzzzvoWfQ3pFqFLYmugrcQUcQEd2MVQ9eJQmpo'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        supabaseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://pqvvtmvqzwsewlhbgdzr.supabase.co'\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/tenant.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TenantSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Tenant)\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/userProject.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userProjectSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(UserProject)\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
