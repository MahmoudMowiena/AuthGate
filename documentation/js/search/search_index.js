var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.321,1,2.447]],["body/modules/AppModule.html",[0,2.244,1,4.972,2,2.015,3,2.015,4,2.305,5,2.305,6,2.015,7,3.267,8,2.305,9,3.654,10,3.654,11,3.926,12,0.022,13,4.251,14,3.405,15,3.405,16,3.405,17,2.958,18,2.151,19,2.305,20,0.265,21,0.204,22,0.234,23,4.281,24,3.184,25,0.439,26,0.709,27,2.686,28,1.337,29,4.281,30,4.281,31,4.281,32,4.281,33,1.892,34,4.281,35,4.281,36,2.686,37,2.481,38,4.281,39,4.281,40,4.281,41,4.281,42,1.413,43,4.281,44,1.678,45,0.265,46,0.153,47,1.892,48,1.678,49,1.78,50,1.583,51,0.016,52,0.016]],["title/controllers/AuthController.html",[53,1.485,54,2.447]],["body/controllers/AuthController.html",[12,0.022,20,0.151,21,0.116,22,0.133,25,0.402,26,0.405,44,0.957,45,0.151,46,0.087,48,1.754,50,1.655,51,0.011,52,0.011,53,1.015,54,2.537,55,2.084,56,1.532,57,2.084,58,0.187,59,0.979,60,2.056,61,4.476,62,3.704,63,3.704,64,3.704,65,4.996,66,4.996,67,3.82,68,3.704,69,3.161,70,3.161,71,3.161,72,2.442,73,3.161,74,0.534,75,1.697,76,2.442,77,0.7,78,2.442,79,1.697,80,0.624,81,0.902,82,4.476,83,1.697,84,2.106,85,2.442,86,2.442,87,2.442,88,5.873,89,2.442,90,6.196,91,4.446,92,2.442,93,2.442,94,2.442,95,2.442,96,2.442,97,2.442,98,2.442,99,2.442,100,2.442,101,2.084,102,0.851,103,3.421,104,3.421,105,4.996,106,1.54,107,2.442,108,2.409,109,2.077,110,2.442,111,3.704,112,2.442,113,1.156,114,2.442,115,3.421,116,2.442,117,2.442,118,3.704,119,2.084,120,2.51,121,2.442,122,2.442,123,3.161,124,2.084,125,2.698,126,2.442,127,2.442,128,3.161,129,1.315,130,2.324,131,2.442,132,1.848,133,1.415,134,1.227,135,1.848,136,1.415,137,1.848,138,1.415,139,2.442,140,2.084,141,2.084,142,1.672,143,1.773,144,1.672,145,1.415,146,0.903,147,2.442,148,1.672,149,2.409,150,1.149,151,1.315,152,2.442,153,0.762,154,1.397,155,4.996,156,2.442,157,2.442,158,1.641,159,2.442,160,2.442,161,1.848,162,2.442,163,2.442,164,4.476,165,2.442,166,2.442,167,2.442,168,2.442,169,2.442,170,2.442,171,2.442,172,2.249,173,2.537,174,4.476,175,1.383,176,1.677,177,2.442,178,0.957,179,0.762,180,2.442,181,2.084,182,1.227,183,2.084,184,0.762,185,2.442,186,2.442,187,2.442,188,2.442,189,2.442,190,3.704,191,2.442,192,2.442,193,3.704,194,3.161,195,3.704,196,3.704,197,3.704,198,3.704,199,3.704,200,3.704,201,3.704,202,2.442,203,3.704,204,2.442,205,3.704,206,2.442,207,1.672,208,2.442,209,2.442,210,2.442,211,2.442,212,2.442,213,2.442,214,2.442,215,2.442,216,2.442,217,2.442,218,2.442]],["title/modules/AuthModule.html",[0,1.321,11,2.07]],["body/modules/AuthModule.html",[0,2.171,2,1.88,3,1.88,4,2.151,5,2.151,6,1.88,7,3.161,8,3.161,11,4.239,12,0.022,14,3.342,15,3.342,16,3.342,17,2.829,18,2.008,19,2.151,20,0.247,21,0.19,22,0.218,24,3.044,25,0.438,26,0.662,42,1.319,44,2.059,45,0.247,46,0.143,50,2.634,51,0.015,52,0.015,54,4.021,138,2.315,150,1.88,219,3.41,220,3.41,221,3.996,222,3.41,223,3.342,224,4.172,225,4.172,226,3.996,227,3.996,228,2.315,229,3.996,230,3.996,231,3.025,232,3.025,233,3.025,234,3.996,235,3.996,236,3.025,237,3.996,238,3.996,239,2.737,240,3.41,241,3.996,242,3.41,243,3.996]],["title/injectables/AuthService.html",[50,1.321,244,0.63]],["body/injectables/AuthService.html",[12,0.022,18,1.875,20,0.091,21,0.07,22,0.08,25,0.37,26,0.243,45,0.091,46,0.053,48,1.764,49,1.989,50,0.912,51,0.007,52,0.007,58,0.113,59,0.652,60,1.986,67,2.72,69,2.72,70,2.104,71,2.104,74,0.479,77,0.619,79,1.5,80,0.648,81,0.826,83,1.465,84,1.16,101,1.254,102,0.827,103,2.182,104,2.182,106,1.872,108,2.904,109,2.523,113,2.009,119,2.104,120,1.875,123,1.254,124,2.104,125,1.875,128,1.254,129,1.715,134,0.738,143,2.339,144,1.006,149,2.576,150,0.691,153,0.77,154,1.165,158,1.459,172,2.523,173,1.689,175,1.533,176,2.071,178,2.309,179,1.94,181,2.104,182,2.262,183,1.254,184,0.995,194,2.72,207,1.006,223,2.404,239,1.689,242,1.254,244,0.435,245,0.543,246,1.254,247,2.466,248,2.466,249,3.186,250,3.186,251,2.466,252,2.466,253,2.466,254,1.469,255,1.469,256,2.466,257,1.469,258,1.469,259,2.466,260,1.469,261,1.469,262,1.469,263,1.469,264,1.469,265,1.469,266,1.469,267,1.469,268,1.469,269,2.466,270,1.469,271,2.825,272,2.466,273,1.469,274,2.466,275,1.469,276,0.851,277,1.006,278,0.791,279,1.112,280,1.469,281,1.547,282,1.254,283,1.689,284,1.469,285,1.689,286,1.469,287,1.254,288,1.469,289,1.469,290,1.689,291,2.466,292,1.254,293,2.104,294,1.112,295,1.112,296,1.239,297,1.006,298,1.469,299,1.239,300,2.182,301,1.16,302,1.025,303,2.466,304,3.186,305,2.72,306,1.254,307,1.469,308,2.09,309,0.576,310,2.466,311,1.469,312,1.254,313,2.609,314,3.186,315,1.469,316,3.952,317,3.801,318,2.383,319,3.185,320,4.159,321,2.09,322,4.785,323,1.957,324,4.159,325,1.671,326,3.549,327,1.999,328,3.186,329,1.989,330,1.429,331,2.466,332,1.429,333,2.466,334,1.689,335,3.186,336,2.825,337,3.732,338,5.674,339,1.469,340,1.469,341,4.502,342,2.466,343,3.732,344,2.466,345,1.469,346,2.466,347,1.547,348,2.466,349,1.866,350,1.689,351,1.547,352,1.469,353,1.469,354,1.469,355,1.469,356,2.466,357,2.466,358,1.469,359,2.466,360,1.469,361,1.469,362,1.254,363,1.469,364,1.469,365,2.412,366,1.866,367,1.469,368,1.866,369,0.738,370,1.469,371,1.469,372,1.469,373,1.469,374,2.466,375,1.866,376,1.254,377,1.469,378,1.112,379,2.251,380,1.866,381,1.254,382,1.254,383,1.469,384,1.239,385,1.469,386,2.466,387,3.732,388,4.159,389,3.732,390,2.466,391,1.112,392,1.469,393,2.466,394,1.429,395,1.689,396,2.466,397,2.466,398,1.469,399,2.466,400,1.469,401,0.922,402,2.466,403,2.466,404,1.547,405,1.469,406,1.469,407,0.922,408,1.469,409,1.469,410,1.006,411,3.186,412,2.466,413,1.469,414,2.466,415,1.469,416,2.466,417,2.466,418,1.469,419,1.469,420,2.466,421,1.469,422,1.469,423,1.469,424,1.469,425,1.469,426,1.469,427,1.469,428,1.469,429,1.469]],["title/guards/AuthenticationGuard.html",[136,2.07,430,2.704]],["body/guards/AuthenticationGuard.html",[12,0.022,20,0.247,21,0.19,22,0.218,25,0.386,26,0.662,42,1.319,45,0.247,46,0.143,51,0.015,52,0.015,58,0.307,59,1.389,60,1.734,74,0.547,77,0.64,79,1.552,80,0.591,81,0.854,83,1.389,102,0.666,108,3.357,109,2.184,134,3.406,136,3.044,149,3.58,150,1.88,151,2.151,153,1.248,154,1.833,158,1.468,175,1.392,176,1.248,178,2.059,179,1.64,228,2.315,239,2.737,240,3.41,244,0.926,281,3.683,299,2.008,301,1.88,313,3.683,431,3.996,432,3.41,433,6.236,434,5.254,435,3.996,436,3.996,437,5.254,438,5.323,439,3.996,440,3.41,441,5.254,442,3.996,443,3.401,444,3.025,445,2.737,446,2.737,447,3.41,448,3.996,449,3.996,450,3.996,451,3.996,452,3.41,453,3.41,454,3.996,455,3.996,456,3.996,457,3.996,458,3.996,459,3.996]],["title/injectables/EmailService.html",[223,1.795,244,0.63]],["body/injectables/EmailService.html",[12,0.022,20,0.267,21,0.206,22,0.236,25,0.377,26,0.716,36,2.712,42,1.427,45,0.267,46,0.155,51,0.016,52,0.016,57,3.69,58,0.332,59,1.461,60,1.801,74,0.515,77,0.665,79,1.461,80,0.556,81,0.805,83,1.143,102,0.895,109,2.299,143,1.427,153,1.35,154,1.903,176,1.35,223,2.778,244,0.975,245,1.599,446,2.961,460,3.69,461,1.545,462,6.097,463,5.53,464,3.69,465,5.142,466,5.53,467,5.53,468,6.426,469,6.426,470,4.323,471,5.53,472,4.719,473,4.323,474,4.323,475,3.69,476,4.323,477,4.323,478,4.323,479,4.323,480,5.53,481,4.323,482,4.323,483,5.53,484,4.323,485,2.602,486,4.323,487,5.53,488,4.323,489,4.323,490,4.323]],["title/injectables/GithubAuthStrategy.html",[224,2.241,244,0.63]],["body/injectables/GithubAuthStrategy.html",[12,0.022,20,0.252,21,0.194,22,0.222,25,0.421,26,0.674,36,2.553,45,0.252,46,0.145,48,2.461,50,2.518,51,0.016,52,0.016,58,0.312,59,1.405,60,1.749,74,0.449,77,0.58,79,1.405,80,0.535,81,0.774,83,1.075,84,1.915,102,0.847,143,2.073,148,2.787,149,3.666,150,1.915,153,1.66,154,1.961,158,1.137,175,0.908,176,1.27,178,1.594,179,1.27,224,3.336,244,0.937,245,1.505,271,5.154,279,3.08,281,3.336,384,2.045,391,4.483,464,3.473,465,5.06,491,3.473,492,4.025,493,4.538,494,3.642,495,4.483,496,4.069,497,4.538,498,5.055,499,4.069,500,3.473,501,3.473,502,3.473,503,4.069,504,3.08,505,4.069,506,3.473,507,3.381,508,3.473,509,2.191,510,4.069,511,2.191,512,4.069,513,4.069,514,4.069,515,4.069]],["title/injectables/GoogleAuthStrategy.html",[225,2.241,244,0.63]],["body/injectables/GoogleAuthStrategy.html",[12,0.022,20,0.264,21,0.204,22,0.234,25,0.409,26,0.708,36,2.681,45,0.264,46,0.153,50,2.504,51,0.016,52,0.016,58,0.328,59,1.451,60,1.791,74,0.464,77,0.599,79,1.451,80,0.552,81,0.799,83,1.129,84,2.011,102,0.858,113,1.334,143,2.002,148,2.927,153,1.714,154,1.714,158,1.194,175,0.954,176,1.334,178,1.674,179,1.334,207,4.153,225,3.443,244,0.968,245,1.58,271,5.281,279,3.235,281,3.443,384,2.147,465,5.214,492,4.155,493,4.684,494,3.759,497,4.684,498,5.175,500,3.647,501,3.647,502,3.647,504,3.235,506,3.647,507,2.955,508,3.647,509,2.301,511,2.301,516,3.647,517,4.273,518,4.273,519,4.273,520,3.647,521,4.273,522,4.273,523,4.273,524,4.273]],["title/classes/HttpExceptionFilter.html",[46,0.128,525,2.704]],["body/classes/HttpExceptionFilter.html",[12,0.022,20,0.294,21,0.226,22,0.26,25,0.363,26,0.787,45,0.294,46,0.17,51,0.017,52,0.017,58,0.364,59,1.55,74,0.401,77,0.518,79,1.255,80,0.478,81,0.691,83,1.255,91,4.441,134,2.948,151,2.557,175,1.484,301,2.995,302,1.975,445,4.018,475,5.433,525,4.441,526,1.483,527,5.007,528,4.053,529,6.365,530,5.866,531,4.553,532,6.648,533,4.749,534,4.749,535,4.749,536,4.749,537,4.749,538,4.749,539,4.749,540,4.749,541,4.018,542,4.749,543,4.749,544,4.053,545,2.235,546,4.749,547,4.749]],["title/injectables/ImageService.html",[33,1.578,244,0.63]],["body/injectables/ImageService.html",[12,0.022,20,0.282,21,0.217,22,0.249,25,0.417,26,0.755,33,2.525,45,0.282,46,0.163,48,1.785,51,0.017,52,0.017,58,0.349,59,1.51,60,1.845,74,0.385,77,0.623,79,1.204,80,0.458,81,0.663,83,1.204,84,2.143,102,0.873,143,1.504,144,3.119,151,3.077,153,1.95,158,1.597,175,1.017,176,1.422,244,1.008,245,1.684,282,3.887,302,2.597,318,2.012,325,2.181,379,2.939,485,2.143,548,3.887,549,5.715,550,4.554,551,5.715,552,3.918,553,4.554,554,3.447,555,4.554,556,4.326,557,4.554,558,4.554,559,4.554,560,4.554,561,4.554,562,4.554,563,4.554]],["title/injectables/IndexManagementService.html",[37,2.07,244,0.63]],["body/injectables/IndexManagementService.html",[12,0.022,20,0.257,21,0.198,22,0.227,25,0.391,26,0.688,28,1.297,37,3.122,42,2.09,45,0.257,46,0.148,51,0.016,52,0.016,58,0.459,59,1.424,60,1.985,74,0.351,77,0.652,79,1.098,80,0.418,81,0.604,83,1.424,125,2.707,143,1.371,144,2.844,146,1.536,153,1.297,154,1.297,176,2.048,178,2.111,244,0.95,245,1.536,299,2.707,301,2.536,302,2.632,308,2.707,401,2.605,407,2.605,410,3.69,445,2.844,564,3.545,565,6.33,566,6.721,567,3.545,568,3.971,569,4.153,570,4.153,571,4.153,572,2.605,573,2.844,574,4.153,575,4.153,576,4.153,577,4.599,578,6.33,579,4.599,580,4.153,581,5.388,582,3.122,583,4.599]],["title/controllers/PaypalController.html",[53,1.485,584,2.447]],["body/controllers/PaypalController.html",[12,0.022,20,0.277,21,0.213,22,0.245,25,0.35,26,0.742,44,1.756,45,0.277,46,0.16,51,0.017,52,0.017,53,1.863,56,2.811,58,0.344,59,1.495,60,2.025,74,0.378,75,1.495,77,0.617,79,1.184,80,0.451,81,0.652,83,1.495,84,2.662,102,0.786,130,2.811,133,2.596,158,1.58,175,1.263,176,1.766,379,2.662,446,3.069,507,2.412,541,3.874,584,3.874,585,3.824,586,3.824,587,4.828,588,5.557,589,3.824,590,5.657,591,5.657,592,4.481,593,4.282,594,5.657,595,5.291,596,4.481,597,3.069,598,3.592,599,3.824,600,4.481,601,4.481,602,4.481,603,4.481,604,4.481,605,4.481,606,4.481,607,3.824,608,4.481,609,4.481,610,4.481,611,4.481,612,4.481]],["title/modules/PaypalModule.html",[0,1.321,13,2.241]],["body/modules/PaypalModule.html",[0,2.338,2,2.202,3,2.202,4,2.519,5,2.519,6,2.202,7,3.404,8,2.519,12,0.022,13,4.456,17,3.129,18,2.351,19,2.519,20,0.289,21,0.223,22,0.256,24,2.711,25,0.428,26,0.775,27,2.935,28,1.461,44,2.278,45,0.289,46,0.167,51,0.017,52,0.017,80,0.471,584,4.33,598,4.016,599,3.994,613,3.994,614,3.994,615,4.016,616,4.679,617,4.679,618,3.981,619,2.935,620,3.994,621,3.542,622,3.994,623,3.205,624,4.679,625,2.202]],["title/injectables/PaypalService.html",[244,0.63,598,2.07]],["body/injectables/PaypalService.html",[12,0.022,20,0.237,21,0.183,22,0.21,25,0.379,26,0.636,45,0.237,46,0.137,51,0.015,52,0.015,58,0.294,59,1.352,60,1.942,74,0.486,77,0.669,79,1.352,80,0.515,81,0.744,83,1.352,84,2.407,102,0.729,134,2.57,153,1.198,154,1.796,158,1.429,175,1.427,176,1.796,179,1.996,244,0.902,245,1.419,446,2.628,461,1.429,541,2.628,586,4.365,587,4.365,588,5.238,589,4.365,593,3.872,595,3.275,598,2.964,607,4.365,615,3.81,622,3.275,626,3.275,627,5.754,628,3.837,629,5.115,630,3.837,631,3.837,632,5.115,633,4.365,634,3.872,635,4.365,636,6.393,637,3.837,638,3.275,639,3.837,640,5.115,641,5.115,642,3.837,643,3.837,644,3.837,645,3.837,646,3.837,647,5.115,648,3.837,649,3.837,650,4.365,651,3.837,652,3.837,653,2.628,654,3.837,655,5.115,656,3.837,657,3.837,658,3.837,659,3.837,660,3.837,661,3.837,662,3.275,663,3.837,664,3.275,665,3.837,666,3.275,667,3.837,668,3.837,669,3.837,670,3.837]],["title/classes/PaypalTransaction.html",[46,0.128,619,2.241]],["body/classes/PaypalTransaction.html",[12,0.022,20,0.244,21,0.188,22,0.216,25,0.322,28,1.232,42,2.372,45,0.361,46,0.141,51,0.015,52,0.015,58,0.303,74,0.592,75,1.813,77,0.748,102,0.888,145,2.286,146,1.459,175,0.881,321,2.932,369,2.618,443,3.019,461,1.456,526,1.232,541,3.996,593,4.417,618,2.703,619,3.66,625,2.452,650,4.98,662,4.98,664,4.98,666,4.98,671,2.703,672,4.98,673,3.66,674,2.475,675,3.569,676,3.946,677,2.618,678,4.539,679,3.946,680,2.703,681,3.946,682,3.946,683,3.946,684,3.946,685,3.946,686,3.946,687,4.355,688,2.475,689,3.569,690,2.987,691,3.568,692,2.286,693,3.946,694,3.368]],["title/injectables/PaypalTransactionService.html",[244,0.63,615,2.07]],["body/injectables/PaypalTransactionService.html",[12,0.022,20,0.293,21,0.226,22,0.259,25,0.411,26,0.785,28,1.48,45,0.293,46,0.169,51,0.017,52,0.017,58,0.364,59,1.548,60,1.878,74,0.495,77,0.639,79,1.548,80,0.59,81,0.853,83,1.253,109,2.436,146,1.752,153,1.829,154,1.48,158,1.324,175,1.058,179,1.48,244,1.033,245,1.752,556,3.587,568,4.167,572,2.973,615,3.394,619,2.973,620,4.045,621,4.814,690,3.587,695,4.045,696,5.859,697,4.739,698,4.739,699,5.859,700,5.859,701,4.739,702,4.739,703,4.739,704,4.739,705,4.739]],["title/classes/Project.html",[46,0.128,184,1.115]],["body/classes/Project.html",[12,0.022,20,0.255,21,0.197,22,0.226,25,0.369,28,1.289,42,2.162,45,0.332,46,0.192,51,0.016,52,0.016,58,0.317,74,0.577,75,1.774,77,0.732,80,0.6,102,0.878,145,2.393,146,1.985,175,0.922,184,1.676,309,2.337,321,2.997,384,2.997,443,2.393,461,1.5,485,2.526,492,3.126,509,3.212,511,3.212,526,1.289,625,2.526,673,3.368,674,2.591,675,3.677,678,3.677,680,2.828,687,4.287,688,2.591,689,3.677,691,2.89,692,2.393,706,3.126,707,4.13,708,4.13,709,4.13,710,5.369,711,4.13,712,4.13,713,2.698,714,4.13,715,4.13,716,4.13,717,2.566,718,3.456,719,4.582,720,2.997,721,1.527,722,4.13,723,3.126,724,2.591,725,3.525]],["title/injectables/ProjectService.html",[47,1.578,244,0.63]],["body/injectables/ProjectService.html",[12,0.022,20,0.143,21,0.111,22,0.127,25,0.357,26,0.384,28,0.724,42,1.431,45,0.143,46,0.083,47,1.574,51,0.01,52,0.01,58,0.178,59,0.941,60,2.008,74,0.487,77,0.629,79,1.525,80,0.614,81,0.84,83,1.464,102,0.896,109,2.675,120,2.178,129,1.917,146,0.858,153,1.112,154,1.112,158,1.548,172,2.444,175,1.496,176,1.979,178,2.605,179,2.093,184,2.123,244,0.628,245,0.858,278,2.619,292,1.979,293,3.7,294,1.755,296,3.067,297,1.588,299,2.444,301,2.289,302,2.022,308,2.991,318,1.025,329,2.984,375,1.755,379,3.218,381,1.979,384,1.789,394,2.818,485,1.091,509,1.917,511,1.917,568,3.619,572,1.455,582,1.344,726,1.979,727,3.292,728,3.561,729,3.282,730,2.512,731,2.818,732,2.319,733,2.319,734,1.979,735,4.656,736,2.319,737,3.7,738,3.561,739,2.319,740,3.561,741,2.319,742,3.561,743,2.319,744,2.063,745,2.319,746,1.588,747,4.151,748,2.319,749,2.319,750,1.588,751,1.455,752,1.979,753,2.319,754,1.979,755,5.248,756,2.319,757,4.864,758,2.319,759,2.319,760,2.319,761,2.319,762,4.151,763,3.04,764,2.319,765,4.864,766,2.319,767,4.864,768,1.979,769,1.979,770,1.755,771,1.979,772,5.248,773,4.864,774,2.319,775,2.319,776,2.319,777,4.335,778,2.319,779,3.561,780,3.561,781,2.696,782,2.319,783,1.165,784,2.319,785,2.319]],["title/controllers/ProjectsController.html",[53,1.485,786,2.447]],["body/controllers/ProjectsController.html",[12,0.022,20,0.131,21,0.101,22,0.116,25,0.358,26,0.352,44,0.833,45,0.131,46,0.076,47,1.813,48,1.304,49,1.384,51,0.01,52,0.01,53,0.884,56,1.333,58,0.163,59,0.88,60,2.025,74,0.489,75,1.477,77,0.631,79,1.529,80,0.582,81,0.842,83,1.529,102,0.908,108,1.792,109,2.716,129,1.144,130,2.574,133,2.377,134,1.068,135,1.609,136,1.232,137,1.609,142,1.456,143,2.008,149,2.209,150,1,153,0.664,154,1.745,158,1.732,161,1.609,173,3.452,175,1.496,176,2.076,178,2.266,179,1.806,184,1.449,278,1.144,281,1.333,296,2.808,300,2.28,308,2.686,313,2.088,318,1.813,319,4.302,329,2.688,334,3.18,362,1.814,378,3.106,379,3.006,394,2.377,495,1.609,507,2.499,582,2.377,597,1.456,727,1.333,729,2.52,730,2.69,731,2.377,734,1.814,735,4.246,737,3.502,744,1.232,746,1.456,747,3.962,751,1.333,763,3.962,783,1.673,786,2.28,787,1.814,788,3.329,789,3.329,790,4.103,791,2.912,792,5.071,793,2.126,794,3.329,795,2.126,796,2.126,797,2.52,798,2.126,799,2.126,800,2.126,801,2.126,802,3.329,803,2.126,804,1.333,805,3.106,806,2.126,807,2.52,808,2.126,809,3.329,810,2.126,811,1.814,812,1.609,813,1.456,814,1.814,815,2.126,816,1.456,817,1.456,818,2.126,819,1.814,820,2.52,821,4.047,822,5.346,823,3.329,824,2.126,825,2.126,826,1.609,827,2.52,828,2.126,829,1.814,830,2.126,831,2.126,832,2.126,833,2.126,834,2.126,835,3.514,836,2.126,837,3.329,838,3.502,839,4.103,840,3.106,841,4.103,842,2.126,843,2.126,844,2.126,845,3.329,846,4.643,847,2.126,848,2.126]],["title/modules/ProjectsModule.html",[0,1.321,14,1.795]],["body/modules/ProjectsModule.html",[0,2.299,2,2.121,3,2.121,4,2.427,5,2.427,6,2.121,7,3.347,8,3.347,12,0.022,14,3.503,15,2.853,16,2.853,17,3.057,18,2.265,19,2.427,20,0.279,21,0.215,22,0.246,24,2.612,25,0.436,26,0.747,27,3.562,28,1.407,44,2.225,45,0.279,46,0.161,47,3.202,51,0.017,52,0.017,80,0.454,184,1.407,231,3.412,232,3.412,296,2.265,297,3.087,623,3.087,625,2.121,724,3.562,750,4.258,751,2.828,786,4.258,816,3.087,849,3.847,850,3.847,851,3.847,852,4.508,853,4.508,854,4.508]],["title/injectables/ResponseInterceptor.html",[244,0.63,855,2.704]],["body/injectables/ResponseInterceptor.html",[12,0.022,20,0.243,21,0.188,22,0.215,25,0.36,26,0.653,45,0.243,46,0.141,51,0.015,52,0.015,58,0.302,59,1.376,74,0.44,77,0.568,79,1.376,80,0.524,81,0.758,83,1.376,91,2.982,102,0.66,133,2.282,134,2.615,154,1.82,158,1.851,175,1.384,244,0.918,245,1.456,302,2.424,309,1.543,438,5.766,440,5.504,445,2.698,447,3.362,544,5.654,545,1.854,556,2.982,677,2.929,692,2.282,727,2.471,813,2.698,814,3.362,855,3.94,856,3.362,857,5.205,858,5.205,859,5.205,860,3.939,861,5.205,862,4.413,863,6.201,864,3.939,865,5.829,866,5.205,867,3.362,868,3.939,869,3.939,870,3.939,871,3.939,872,3.939,873,3.939,874,3.939,875,5.205,876,3.939,877,3.939,878,6.201,879,5.829,880,5.829,881,5.293,882,5.205,883,3.939,884,6.448,885,3.939,886,2.982,887,3.939]],["title/classes/SignInRequest.html",[46,0.128,115,2.447]],["body/classes/SignInRequest.html",[12,0.022,20,0.32,21,0.246,22,0.283,25,0.32,45,0.32,46,0.221,51,0.018,52,0.018,58,0.397,74,0.522,75,1.632,77,0.674,102,0.867,106,2.746,113,2.062,115,4.23,461,1.726,526,1.614,717,2.588,721,1.912,888,4.413,889,3.319,890,5.17,891,5.17]],["title/classes/SignInTenantResponse.html",[46,0.128,285,2.447]],["body/classes/SignInTenantResponse.html",[12,0.022,20,0.263,21,0.203,22,0.233,25,0.263,45,0.263,46,0.196,51,0.016,52,0.016,58,0.327,74,0.589,75,1.842,77,0.76,80,0.609,81,1.015,102,0.926,113,1.89,285,3.75,318,2.674,321,3.041,323,2.848,325,2.114,330,3.507,332,3.507,461,1.53,526,1.329,717,2.801,720,3.321,721,1.574,889,3.041,892,3.633,893,4.257,894,3.702,895,4.257,896,4.257,897,4.257,898,4.257,899,4.257,900,4.257,901,4.257,902,2.67]],["title/classes/SignInUserResponse.html",[46,0.128,283,2.447]],["body/classes/SignInUserResponse.html",[12,0.022,20,0.271,21,0.209,22,0.24,25,0.271,45,0.271,46,0.2,51,0.016,52,0.016,58,0.337,74,0.585,75,1.832,77,0.756,80,0.618,81,0.993,102,0.915,113,1.917,283,3.825,318,2.714,321,3.086,323,2.89,325,2.145,327,3.853,461,1.56,526,1.371,677,2.806,717,2.775,720,3.248,721,1.624,889,3.086,894,3.236,902,3.504,903,3.748,904,4.392,905,3.008,906,4.392,907,4.392,908,4.392,909,4.392,910,4.392,911,4.392]],["title/classes/Tenant.html",[46,0.128,329,1.578]],["body/classes/Tenant.html",[12,0.022,20,0.162,21,0.125,22,0.144,25,0.359,26,0.435,28,0.82,42,2.227,45,0.289,46,0.14,51,0.012,52,0.012,58,0.202,74,0.582,75,1.783,77,0.736,80,0.558,81,0.962,102,0.894,106,2.155,113,1.814,145,1.522,146,1.729,158,1.548,175,0.586,179,1.222,184,1.46,276,1.522,277,1.799,302,1.092,309,1.833,318,2.067,321,2.35,323,2.439,325,1.634,329,2.29,330,3.003,332,3.003,347,3.645,350,2.68,351,2.934,369,1.966,395,3.203,404,2.934,410,3.98,443,3.367,461,1.093,485,1.842,494,2.68,526,0.82,545,1.842,577,2.242,625,1.842,653,3.203,673,2.455,674,2.455,675,2.68,677,1.32,678,3.55,680,1.799,687,4.409,688,1.648,689,2.68,691,2.79,692,2.71,713,1.966,717,1.029,721,1.729,723,1.989,724,2.455,783,2.35,862,4.195,912,1.799,913,3.203,914,3.203,915,2.627,916,2.627,917,2.627,918,2.627,919,2.627,920,2.627,921,2.627,922,2.627,923,2.242,924,2.627,925,2.627,926,2.627,927,2.627,928,2.627,929,2.627,930,2.627,931,4.677,932,1.989,933,2.242,934,3.54,935,3.992,936,1.799,937,2.242,938,2.71,939,2.242,940,2.242,941,1.648,942,3.34,943,1.648,944,2.242,945,2.242,946,2.242,947,2.242,948,3.54,949,3.34,950,1.799,951,2.242,952,2.627,953,2.627,954,2.627,955,2.627,956,2.627,957,1.799,958,2.242,959,2.627,960,2.242,961,2.242,962,3.34,963,2.242,964,2.627,965,2.627,966,2.627,967,2.627,968,2.627,969,2.627,970,2.627,971,2.627,972,2.627,973,2.627,974,3.914,975,2.627,976,2.627]],["title/controllers/TenantController.html",[53,1.485,977,2.447]],["body/controllers/TenantController.html",[12,0.022,20,0.129,21,0.099,22,0.114,25,0.374,26,0.345,44,0.816,45,0.129,46,0.117,47,0.921,49,1.684,50,1.498,51,0.01,52,0.01,53,0.866,56,1.307,58,0.16,59,0.866,60,2.079,74,0.499,75,1.562,77,0.66,79,1.562,80,0.595,81,0.86,83,1.599,84,0.98,102,0.884,108,2.18,109,2.775,113,1.023,120,2.307,129,1.122,130,2.541,132,1.577,133,1.207,134,1.047,135,1.577,136,1.207,137,1.577,138,1.207,141,1.778,149,2.18,150,0.98,151,1.122,153,0.651,154,1.265,158,1.69,161,2.481,172,2.035,175,1.467,176,1.925,178,2.492,179,1.985,276,1.899,278,1.764,299,2.509,300,1.427,301,2.349,302,2.306,305,1.778,308,2.787,313,1.307,325,1.604,329,2.927,334,1.427,376,1.778,379,2.703,384,1.647,507,2.18,509,2.18,511,2.472,531,3.419,552,2.541,582,2.347,597,1.427,727,2.056,730,2.661,731,2.893,735,3.145,744,1.207,791,2.056,792,4.473,797,2.481,804,1.307,805,2.481,807,2.481,811,1.778,812,1.577,813,2.244,816,1.427,817,1.427,820,3.066,821,3.066,826,1.577,827,1.577,835,2.481,840,1.577,977,2.244,978,1.778,979,3.457,980,3.145,981,2.797,982,2.797,983,3.277,984,2.774,985,3.457,986,1.778,987,3.277,988,2.797,989,2.084,990,2.084,991,1.778,992,2.797,993,2.084,994,1.778,995,2.084,996,3.277,997,2.084,998,2.084,999,2.084,1000,2.084,1001,2.084,1002,2.084,1003,4.524,1004,2.084,1005,2.881,1006,2.084,1007,2.084,1008,1.778,1009,1.778,1010,2.084,1011,1.778,1012,2.797,1013,1.778,1014,1.577,1015,2.084,1016,2.084,1017,1.427,1018,2.084,1019,2.084,1020,1.778,1021,2.084,1022,5.301,1023,4.524,1024,1.778,1025,2.797,1026,5.301,1027,2.084,1028,2.244,1029,2.797,1030,1.778,1031,2.797,1032,3.919,1033,2.797,1034,3.919,1035,1.778,1036,2.084,1037,2.084,1038,2.481,1039,1.778,1040,2.084,1041,2.084,1042,2.084,1043,2.084,1044,3.277,1045,2.084,1046,2.084,1047,1.778,1048,1.778,1049,2.084]],["title/modules/TenantModule.html",[0,1.321,15,1.795]],["body/modules/TenantModule.html",[0,2.202,2,1.936,3,1.936,4,2.215,5,2.215,6,1.936,7,3.206,8,3.206,11,2.384,12,0.022,14,2.691,15,3.63,16,2.691,17,2.883,18,2.067,19,2.215,20,0.254,21,0.196,22,0.225,24,2.384,25,0.44,26,0.682,27,3.36,28,1.285,33,3.161,44,2.099,45,0.254,46,0.147,49,2.975,50,2.479,51,0.016,52,0.016,80,0.414,138,2.384,223,3.369,231,3.115,233,3.115,236,3.115,329,1.818,623,2.818,625,1.936,750,4.078,752,3.512,817,2.818,957,3.668,977,4.078,1050,3.512,1051,3.512,1052,3.512,1053,4.114,1054,4.114,1055,2.818,1056,4.114,1057,4.114]],["title/injectables/TenantsService.html",[49,1.485,244,0.63]],["body/injectables/TenantsService.html",[12,0.022,20,0.115,21,0.089,22,0.102,25,0.352,26,0.309,28,0.583,33,2.346,42,1.424,45,0.115,46,0.067,49,1.248,51,0.009,52,0.009,58,0.143,59,0.793,60,2.07,74,0.505,77,0.664,79,1.58,80,0.602,81,0.87,83,1.58,102,0.881,106,1.248,109,2.794,113,0.937,120,2.94,129,1.616,143,0.991,146,1.11,153,0.937,154,0.937,158,1.671,172,1.508,175,1.434,176,2.058,178,2.563,179,2.058,184,0.937,228,1.081,244,0.529,245,0.69,276,2.182,277,1.278,278,2.027,290,2.056,299,2.538,301,1.413,302,2.432,308,2.668,309,1.176,316,1.413,317,1.413,321,0.938,325,1.507,329,2.865,336,2.272,347,1.171,349,2.272,350,3.238,351,1.883,375,3.579,378,2.272,379,2.753,382,1.593,394,1.739,395,2.056,444,1.413,485,1.413,509,2.323,511,2.546,552,2.362,568,2.707,572,1.171,729,1.413,730,1.739,731,2.5,744,1.739,746,2.056,754,1.593,762,3.683,768,2.562,769,1.593,770,3.266,771,1.593,781,2.272,791,1.883,804,1.883,827,3.266,829,1.593,840,3.579,886,2.272,932,1.413,950,1.278,979,3.214,980,2.955,984,2.579,986,1.593,988,2.562,1003,4.714,1005,2.707,1028,3.238,1038,2.272,1058,1.593,1059,2.562,1060,2.562,1061,2.562,1062,3.002,1063,1.866,1064,1.866,1065,2.562,1066,1.866,1067,1.866,1068,3.002,1069,1.866,1070,1.866,1071,1.866,1072,2.562,1073,1.866,1074,2.562,1075,1.866,1076,3.002,1077,1.866,1078,1.866,1079,1.866,1080,1.866,1081,1.593,1082,1.866,1083,1.866,1084,1.866,1085,1.866,1086,1.866,1087,1.866,1088,1.866,1089,1.866,1090,4.729,1091,3.002,1092,1.866,1093,4.311,1094,5.051,1095,4.315,1096,3.214,1097,1.593,1098,2.562,1099,3.002,1100,2.562,1101,2.562,1102,3.766,1103,3.002,1104,3.002,1105,3.002,1106,3.766,1107,1.866,1108,1.866,1109,1.866,1110,2.562,1111,2.562,1112,1.866,1113,3.002,1114,2.562,1115,1.593,1116,3.766,1117,1.593,1118,1.593,1119,3.002,1120,3.002,1121,1.593,1122,1.593,1123,1.866,1124,1.866,1125,1.866,1126,3.002,1127,1.866,1128,1.866,1129,1.866,1130,3.002,1131,1.593,1132,1.866,1133,1.866,1134,1.866,1135,1.866,1136,1.866,1137,1.593,1138,1.593]],["title/classes/User.html",[46,0.128,143,1.179]],["body/classes/User.html",[12,0.022,20,0.171,21,0.132,22,0.151,25,0.329,28,0.865,42,2.327,45,0.298,46,0.146,51,0.012,52,0.012,58,0.213,74,0.593,75,1.825,77,0.753,80,0.486,81,0.914,102,0.905,106,2.212,108,2.598,113,1.661,143,1.756,145,1.606,146,1.506,158,0.774,175,0.619,182,2.673,309,1.891,318,2.133,321,2.425,323,2.503,325,1.686,327,3.555,332,1.606,347,3.555,351,2.554,369,2.046,395,3.306,401,3.028,404,3.028,407,3.028,410,3.643,443,3.548,461,1.138,485,1.916,494,2.789,526,0.865,545,1.916,573,1.898,583,4.54,625,1.916,653,3.306,673,2.554,674,2.554,675,2.789,677,2.425,678,3.643,680,1.898,687,4.454,688,1.739,689,1.898,691,2.864,692,1.606,713,2.046,717,1.086,721,1.785,723,2.098,783,2.425,862,3.082,913,3.306,914,3.306,923,2.365,933,2.365,934,3.082,935,3.475,936,1.898,937,2.365,938,1.606,939,2.365,940,2.365,941,1.739,942,3.475,943,1.739,944,2.365,945,2.365,946,2.365,947,2.365,948,3.082,949,3.475,950,1.898,951,2.365,960,2.365,961,2.365,962,2.365,963,2.365,1139,1.898,1140,2.771,1141,2.771,1142,4.072,1143,2.771,1144,2.771,1145,2.771,1146,2.771,1147,4.072,1148,2.771,1149,2.771,1150,2.771,1151,2.771,1152,2.771,1153,2.771,1154,2.771,1155,2.771,1156,2.771,1157,2.771,1158,2.771,1159,2.771,1160,2.771,1161,4.072,1162,4.072,1163,1.898,1164,2.365,1165,2.771]],["title/controllers/UserController.html",[53,1.485,1166,2.447]],["body/controllers/UserController.html",[12,0.022,20,0.127,21,0.098,22,0.112,25,0.372,26,0.341,33,1.774,42,0.679,44,0.806,45,0.127,46,0.074,47,1.774,48,1.271,50,1.485,51,0.01,52,0.01,53,0.855,56,1.29,58,0.158,59,0.857,60,2.034,73,2.768,74,0.509,75,1.555,77,0.642,79,1.511,80,0.576,81,0.832,83,1.555,84,2.145,102,0.865,108,2.671,109,2.378,113,1.013,125,2.291,130,3.462,132,1.557,133,2.327,138,1.192,140,1.755,142,1.408,143,2.163,149,2.162,150,0.968,151,1.107,153,0.642,154,1.549,158,1.644,172,1.63,173,2.75,175,1.449,176,1.919,178,2.543,179,2.026,184,1.254,276,1.879,278,1.746,299,2.773,300,1.408,301,2.597,302,2.505,308,2.773,309,0.806,313,1.29,325,1.592,334,1.408,379,2.691,380,1.557,485,0.968,495,1.557,531,4.031,545,0.968,552,2.519,582,2.641,597,1.408,727,2.035,730,2.641,731,2.875,744,1.192,791,2.035,792,4.73,797,2.455,804,1.29,805,2.455,807,2.455,812,1.557,813,2.75,816,1.408,820,3.451,821,3.451,826,1.557,835,2.455,881,1.755,980,3.122,981,2.768,982,2.768,984,2.75,985,3.428,991,1.755,992,2.768,994,1.755,1008,1.755,1009,1.755,1011,1.755,1012,2.768,1013,1.755,1014,1.557,1020,1.755,1023,4.71,1024,1.755,1025,2.768,1028,2.221,1029,1.755,1030,1.755,1031,3.428,1032,4.71,1033,3.428,1034,4.71,1035,2.768,1038,2.455,1039,1.755,1047,1.755,1048,1.755,1055,1.408,1166,2.221,1167,1.755,1168,1.755,1169,4.016,1170,2.057,1171,2.057,1172,2.057,1173,2.057,1174,2.057,1175,2.057,1176,2.057,1177,2.057,1178,2.057,1179,4.499,1180,2.057,1181,2.86,1182,2.057,1183,2.057,1184,2.057,1185,1.755,1186,2.057,1187,2.057,1188,2.057,1189,5.272,1190,3.243,1191,2.057,1192,4.016,1193,2.057,1194,2.057,1195,2.057,1196,2.057,1197,2.057,1198,2.057,1199,5.272,1200,2.057,1201,2.057,1202,2.057,1203,2.057,1204,2.057]],["title/modules/UserModule.html",[0,1.321,16,1.795]],["body/modules/UserModule.html",[0,2.152,2,1.847,3,1.847,4,2.113,5,2.113,6,1.847,7,3.133,8,3.133,12,0.022,14,2.609,15,3.325,16,3.66,17,2.796,18,1.972,19,2.113,20,0.243,21,0.187,22,0.214,24,3.009,25,0.442,26,0.65,27,2.462,28,1.621,33,3.139,37,3.834,44,2.035,45,0.243,46,0.14,48,2.784,49,1.632,50,2.447,51,0.015,52,0.015,80,0.395,138,2.274,142,2.688,143,1.296,223,3.325,232,2.971,233,2.971,236,2.971,317,2.971,623,2.688,625,2.443,750,3.556,817,2.688,1055,2.688,1163,3.556,1166,3.985,1205,3.35,1206,3.925,1207,3.35,1208,3.35,1209,3.925,1210,3.35,1211,3.925,1212,3.925]],["title/classes/UserProject.html",[46,0.128,182,1.795]],["body/classes/UserProject.html",[12,0.022,20,0.256,21,0.198,22,0.227,25,0.333,28,1.294,45,0.333,46,0.148,51,0.016,52,0.016,58,0.318,74,0.592,75,1.832,77,0.756,80,0.601,81,1.009,102,0.908,145,2.402,146,1.99,172,3.003,175,0.925,182,2.704,184,1.68,365,4.524,366,4.524,368,4.524,369,2.704,384,3.003,443,2.402,461,1.504,526,1.294,625,2.532,672,5.101,673,3.749,674,2.6,687,4.569,688,2.6,1213,3.138,1214,5.976,1215,4.145,1216,4.145,1217,4.145,1218,4.145,1219,4.145,1220,4.145,1221,5.382,1222,4.145,1223,4.145,1224,3.138,1225,3.538]],["title/injectables/UsersService.html",[48,1.4,244,0.63]],["body/injectables/UsersService.html",[12,0.022,20,0.106,21,0.082,22,0.094,25,0.385,26,0.284,28,0.536,33,2.266,42,1.356,45,0.106,46,0.061,47,2.266,48,1.1,49,1.708,51,0.008,52,0.008,58,0.132,59,0.742,60,2.103,74,0.526,77,0.688,79,1.647,80,0.627,81,0.907,83,1.647,102,0.871,106,1.167,109,2.859,113,0.876,125,3.089,129,1.511,143,2.224,146,0.635,153,0.876,154,1.601,158,1.741,175,1.407,176,2.069,178,2.409,179,1.945,184,0.876,228,0.995,244,0.495,245,0.635,276,2.062,277,1.176,278,1.916,287,1.466,290,1.922,296,0.863,297,1.176,299,2.065,301,1.32,302,2.474,306,2.395,308,2.443,312,3.037,316,1.3,325,1.435,326,1.466,329,1.24,336,2.124,347,1.077,349,2.124,350,1.922,379,2.68,380,2.124,394,1.626,401,1.76,407,1.76,444,1.3,485,1.32,531,1.176,552,2.232,567,1.466,568,2.578,572,1.077,573,1.176,730,1.626,731,2.381,744,1.626,746,1.922,770,3.11,781,2.124,791,1.76,804,1.76,819,3.037,838,4.149,886,2.124,950,1.176,980,2.814,984,2.437,1028,3.102,1055,1.176,1059,2.395,1060,2.395,1061,2.395,1065,2.395,1072,2.395,1074,2.395,1081,1.466,1093,4.378,1096,2.395,1097,1.466,1098,2.395,1100,2.395,1101,2.395,1110,2.395,1111,2.395,1114,2.395,1115,1.466,1117,1.466,1118,1.466,1121,1.466,1122,1.466,1131,1.466,1137,1.466,1138,1.466,1168,3.507,1179,4.567,1181,2.578,1185,1.466,1210,1.466,1226,1.466,1227,2.806,1228,2.806,1229,2.806,1230,2.806,1231,2.806,1232,2.806,1233,1.717,1234,1.717,1235,2.806,1236,1.717,1237,2.806,1238,2.806,1239,1.717,1240,1.717,1241,1.717,1242,2.806,1243,1.717,1244,2.806,1245,1.717,1246,1.717,1247,2.806,1248,1.717,1249,2.806,1250,1.717,1251,2.806,1252,1.717,1253,2.806,1254,1.717,1255,1.717,1256,1.717,1257,1.717,1258,1.717,1259,1.176,1260,1.717,1261,1.717,1262,1.717,1263,1.717,1264,1.717,1265,1.717,1266,1.717,1267,2.806,1268,2.806,1269,2.806,1270,1.717,1271,1.717,1272,1.717,1273,1.717,1274,4.861,1275,2.806,1276,1.717,1277,3.558,1278,1.717,1279,1.717,1280,2.806,1281,1.717,1282,1.717,1283,1.717,1284,4.529,1285,4.861,1286,4.109,1287,2.806,1288,3.558,1289,1.717,1290,1.717,1291,2.806,1292,1.717,1293,1.077,1294,2.806,1295,2.806,1296,1.717,1297,1.717,1298,1.717,1299,1.717]],["title/coverage.html",[1300,3.69]],["body/coverage.html",[6,1.603,12,0.022,22,0.186,33,1.505,37,1.974,46,0.253,47,1.505,48,1.335,49,1.416,50,1.259,51,0.014,52,0.014,53,2.55,54,2.333,55,2.907,74,0.288,115,2.333,120,1.711,125,1.711,136,1.974,143,1.125,179,1.063,182,1.711,184,1.063,223,1.711,224,2.137,225,2.137,228,1.974,244,1.225,246,2.907,283,2.333,285,2.333,296,1.711,329,1.505,430,2.578,432,2.907,460,2.907,491,2.907,516,2.907,525,2.578,527,2.907,528,2.907,548,2.907,554,2.578,564,2.907,584,2.333,585,2.907,598,1.974,615,1.974,618,2.333,619,2.137,621,2.578,626,2.907,671,3.231,695,2.907,706,3.571,724,2.137,726,2.907,786,2.333,787,2.907,855,2.578,856,2.907,888,2.907,892,2.907,903,2.907,912,3.231,948,2.578,957,2.333,977,2.333,978,2.907,1005,2.137,1058,2.907,1139,3.231,1163,2.333,1166,2.333,1167,2.907,1181,2.137,1213,3.571,1224,2.578,1226,2.907,1259,2.333,1300,2.578,1301,3.406,1302,3.406,1303,3.406,1304,2.907,1305,6.733,1306,7.453,1307,6.817,1308,5.842,1309,4.717,1310,4.717,1311,4.717,1312,6.506,1313,4.717,1314,4.717,1315,5.412,1316,4.717,1317,4.619,1318,2.907,1319,2.907,1320,2.907,1321,4.717,1322,4.717,1323,3.406,1324,2.907,1325,2.907,1326,3.406,1327,2.907,1328,2.907,1329,2.907,1330,2.907,1331,3.406,1332,3.406,1333,3.406]],["title/dependencies.html",[3,2.022,1334,2.547]],["body/dependencies.html",[3,2.197,12,0.022,26,0.774,28,1.458,36,2.929,46,0.208,51,0.017,52,0.017,146,1.727,148,3.198,150,2.197,151,2.514,207,3.198,290,3.198,294,3.535,391,3.535,472,3.985,504,5.145,520,3.985,633,3.985,634,3.535,635,3.985,721,1.727,867,3.985,1014,3.535,1017,3.198,1335,6.317,1336,4.669,1337,4.669,1338,4.669,1339,4.669,1340,4.669,1341,4.669,1342,4.669,1343,4.669,1344,4.669,1345,4.669,1346,4.669,1347,4.669,1348,4.669,1349,4.669,1350,4.669,1351,5.805,1352,4.669,1353,4.669,1354,4.669,1355,4.669,1356,4.669,1357,4.669,1358,4.669,1359,4.669,1360,4.669,1361,4.669,1362,4.669,1363,4.669,1364,4.669,1365,4.669,1366,4.669,1367,4.669,1368,4.669,1369,4.669,1370,4.669]],["title/miscellaneous/functions.html",[1371,1.729,1372,3.667]],["body/miscellaneous/functions.html",[6,3.234,12,0.019,51,0.019,52,0.019,58,0.436,1320,4.855,1371,3.296,1372,4.855,1373,5.688]],["title/index.html",[58,0.229,1374,2.984,1375,2.984]],["body/index.html",[12,0.022,21,0.222,51,0.017,52,0.017,184,1.452,330,2.694,453,3.968,634,3.52,638,3.968,934,3.52,1300,3.52,1376,4.65,1377,4.65,1378,5.79,1379,4.65,1380,4.65,1381,4.65,1382,4.65,1383,4.65,1384,3.968,1385,6.305,1386,4.65,1387,4.65,1388,4.65,1389,4.65,1390,6.305,1391,7.019,1392,4.65,1393,4.65,1394,4.65,1395,6.921,1396,4.65,1397,4.65,1398,5.79,1399,4.65,1400,4.65,1401,4.65,1402,5.79,1403,5.79,1404,4.65,1405,4.65,1406,4.65,1407,5.79,1408,5.79,1409,4.65,1410,4.65,1411,4.65,1412,4.65,1413,3.968,1414,4.65,1415,4.65,1416,4.65,1417,4.65,1418,4.65,1419,4.65,1420,4.65,1421,4.65,1422,3.968,1423,4.65,1424,4.65,1425,4.65,1426,4.65,1427,4.65,1428,3.968]],["title/modules.html",[2,2.294]],["body/modules.html",[1,3.678,2,2.527,11,3.112,12,0.019,13,3.369,14,2.699,15,2.699,16,2.699,51,0.019,52,0.019,1413,6.11,1429,7.159,1430,7.159,1431,7.159]],["title/overview.html",[1432,4.16]],["body/overview.html",[0,1.395,1,4.836,2,1.775,3,1.775,4,2.03,5,2.03,6,1.775,7,2.03,8,2.03,9,3.219,10,3.219,11,4.203,12,0.022,13,4.192,14,3.358,15,3.605,16,3.645,17,2.722,18,1.895,19,2.03,33,3.071,37,3.305,44,1.478,47,2.953,48,2.619,49,2.779,50,2.544,51,0.015,52,0.015,219,3.219,220,3.219,222,3.219,223,3.194,224,3.578,225,3.578,245,1.395,430,2.855,526,1.177,582,2.185,598,3.305,613,3.219,614,3.219,615,3.305,849,3.219,850,3.219,851,3.219,1050,3.219,1051,3.219,1052,3.219,1205,3.219,1207,3.219,1208,3.219,1432,3.219,1433,3.771,1434,3.771,1435,3.771,1436,3.771]],["title/classes/projectModel.html",[46,0.128,296,1.795]],["body/classes/projectModel.html",[12,0.022,20,0.275,21,0.212,22,0.243,25,0.275,45,0.275,46,0.201,51,0.017,52,0.017,58,0.341,74,0.578,75,1.808,77,0.746,80,0.622,81,1.024,102,0.906,296,2.828,309,2.42,384,3.103,461,1.572,509,3.325,511,3.325,526,1.388,713,2.828,717,2.681,718,3.578,719,4.803,720,3.365,721,1.643,735,4.23,1324,3.793,1437,4.445,1438,4.445,1439,6.176,1440,4.445,1441,4.445,1442,2.788,1443,4.445,1444,4.445,1445,4.445,1446,4.445,1447,3.531]],["title/properties.html",[461,1.2,1334,2.547]],["body/properties.html",[12,0.021,51,0.019,52,0.019,461,1.577,1384,4.817,1422,4.817,1428,4.817,1448,5.645,1449,5.645,1450,5.645]],["title/classes/tenantModel.html",[46,0.128,120,1.795]],["body/classes/tenantModel.html",[12,0.022,20,0.207,21,0.16,22,0.183,25,0.332,42,1.106,45,0.207,46,0.192,51,0.014,52,0.014,58,0.257,74,0.597,75,1.83,77,0.761,80,0.54,81,1.033,102,0.913,106,2.693,113,1.675,120,2.343,184,1.811,309,2.102,318,2.37,323,2.524,325,1.873,330,3.108,332,3.108,369,2.343,404,3.365,461,1.303,507,3.399,526,1.046,545,2.524,677,2.343,691,1.803,713,2.343,717,2.588,718,3.36,720,3.371,721,1.239,751,2.101,783,2.695,889,2.695,894,3.36,902,2.925,905,2.294,913,3.674,914,3.674,938,2.702,941,2.925,943,2.925,1017,2.294,1293,2.101,1325,2.859,1442,2.101,1447,2.925,1451,3.35,1452,3.35,1453,3.35,1454,3.35,1455,3.35,1456,3.35,1457,2.536,1458,2.859,1459,3.98,1460,3.98,1461,3.98,1462,3.53,1463,3.53,1464,3.53,1465,3.35,1466,3.35,1467,3.35,1468,3.35,1469,3.35,1470,2.859,1471,3.35,1472,3.35,1473,3.35,1474,3.35,1475,3.35,1476,3.193,1477,3.53,1478,2.536,1479,3.98,1480,2.536,1481,2.859,1482,2.859]],["title/miscellaneous/typealiases.html",[1371,1.729,1483,4.296]],["body/miscellaneous/typealiases.html",[12,0.019,51,0.019,52,0.019,58,0.428,74,0.471,573,4.421,671,3.817,690,4.887,912,3.817,932,4.887,1139,3.817,1371,3.229,1484,5.574,1485,4.757,1486,4.757,1487,4.757]],["title/classes/updateTenantModel.html",[46,0.128,1005,2.241]],["body/classes/updateTenantModel.html",[12,0.022,20,0.209,21,0.161,22,0.185,25,0.333,42,1.118,45,0.209,46,0.193,51,0.014,52,0.014,58,0.26,74,0.59,75,1.818,77,0.75,80,0.543,81,1.056,102,0.908,103,3.694,104,3.694,106,1.953,113,1.684,184,1.819,309,2.114,323,2.538,325,1.884,330,3.125,332,3.125,461,1.312,507,3.977,526,1.057,545,2.21,713,2.36,717,2.635,718,1.962,720,3.486,721,1.252,751,2.124,783,2.71,889,2.36,894,3.764,936,3.217,938,2.722,1005,2.947,1017,2.319,1293,2.947,1327,2.889,1442,2.124,1447,2.947,1476,3.217,1479,4.009,1482,2.889,1488,4.604,1489,3.385,1490,3.385,1491,3.385,1492,3.385,1493,3.385,1494,3.385,1495,3.385,1496,3.385,1497,4.009,1498,4.009,1499,4.697,1500,3.385,1501,3.385,1502,3.385,1503,3.385,1504,3.385,1505,3.385,1506,3.385]],["title/classes/updateUserModel.html",[46,0.128,1181,2.241]],["body/classes/updateUserModel.html",[12,0.022,20,0.205,21,0.158,22,0.181,25,0.286,45,0.205,46,0.165,51,0.014,52,0.014,58,0.254,74,0.572,75,1.791,77,0.739,80,0.611,81,0.986,102,0.888,103,4.158,104,4.158,106,2.399,113,2.015,179,1.801,182,2.678,295,2.505,309,2.088,323,2.508,325,1.861,327,3.343,461,1.292,526,1.033,545,3.223,677,3.16,691,3.475,713,2.323,717,2.529,718,3.644,720,3.16,721,1.224,783,2.678,889,2.323,894,2.679,902,2.901,905,2.267,936,3.951,938,3.343,941,3.619,943,3.619,1181,2.901,1293,3.343,1328,2.825,1442,2.076,1447,2.901,1457,3.5,1462,4.367,1463,4.367,1464,4.367,1476,3.167,1478,2.505,1480,3.5,1488,5.181,1497,4.924,1498,4.924,1507,3.31,1508,4.624,1509,4.624,1510,3.31,1511,3.31,1512,3.946,1513,3.946,1514,2.825,1515,2.825,1516,3.31,1517,3.31,1518,3.946,1519,3.31,1520,3.31,1521,3.31,1522,3.31,1523,2.825,1524,3.31,1525,2.825]],["title/classes/userModel.html",[46,0.128,125,1.795]],["body/classes/userModel.html",[12,0.022,20,0.201,21,0.155,22,0.178,25,0.283,45,0.201,46,0.163,51,0.013,52,0.013,58,0.25,74,0.591,75,1.836,77,0.763,80,0.607,81,1.038,102,0.91,106,2.671,113,2.006,125,2.297,182,2.654,295,2.465,309,2.07,318,2.334,323,2.486,325,1.845,327,3.314,369,2.297,401,3.314,404,3.314,407,3.314,461,1.277,526,1.017,545,3.024,677,2.878,691,3.084,713,2.297,717,2.647,718,3.319,720,3.394,721,1.204,783,2.654,889,2.297,894,3.496,902,2.868,905,2.23,913,3.618,914,3.618,938,2.649,941,2.868,943,2.868,1293,2.043,1329,2.779,1442,2.043,1447,2.868,1457,2.465,1458,2.779,1459,3.902,1460,3.902,1461,3.902,1462,3.46,1463,3.46,1464,3.46,1470,2.779,1476,3.131,1477,3.46,1478,2.465,1480,2.465,1481,2.779,1512,3.902,1513,3.902,1514,2.779,1515,2.779,1518,2.779,1523,2.779,1525,2.779,1526,3.256,1527,3.256,1528,3.256,1529,3.256,1530,3.256,1531,3.256,1532,3.256,1533,3.256,1534,3.256,1535,3.256,1536,3.256,1537,3.256,1538,3.256,1539,3.256]],["title/classes/userProjectModel.html",[46,0.128,1259,2.447]],["body/classes/userProjectModel.html",[12,0.022,20,0.297,21,0.229,22,0.263,25,0.366,45,0.297,46,0.211,51,0.017,52,0.017,58,0.369,74,0.564,75,1.765,77,0.728,102,0.846,146,1.779,172,3.217,365,4.846,366,4.846,368,4.846,369,2.971,461,1.652,526,1.502,717,2.77,721,1.779,889,2.417,1259,4.05,1330,4.106,1477,4.846,1540,4.811,1541,4.811,1542,4.811,1543,6.402,1544,4.811]],["title/miscellaneous/variables.html",[1371,1.729,1545,3.667]],["body/miscellaneous/variables.html",[12,0.022,21,0.22,51,0.017,52,0.017,58,0.355,74,0.531,102,0.731,228,3.341,239,3.95,351,2.899,394,2.677,452,3.944,554,4.365,579,3.944,618,3.95,653,4.928,671,3.165,692,4.14,694,3.944,706,3.498,724,3.618,725,3.944,912,3.165,957,3.95,958,3.944,1139,3.165,1163,3.95,1164,3.944,1213,3.498,1224,4.365,1225,3.944,1304,3.944,1317,3.944,1318,5.366,1319,4.922,1371,2.677,1485,3.944,1486,3.944,1487,3.944,1545,3.944,1546,4.621,1547,4.621,1548,6.287,1549,4.621,1550,4.621,1551,4.621,1552,4.621,1553,4.621,1554,4.621,1555,4.621,1556,4.621,1557,4.621,1558,4.621,1559,4.621]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1306,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1449,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1349,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1366,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1348,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1357,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1307,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1323,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1322,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1321,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1314,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1326,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1310,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1311,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1331,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1312,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1315,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1313,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1309,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1316,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1308,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":582,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.0.0",{"_index":1363,"title":{},"body":{"dependencies.html":{}}}],["1.0.3",{"_index":1341,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":1358,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1352,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["10.0.0",{"_index":1370,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1340,"title":{},"body":{"dependencies.html":{}}}],["10.0.6",{"_index":1339,"title":{},"body":{"dependencies.html":{}}}],["10.00",{"_index":654,"title":{},"body":{"injectables/PaypalService.html":{}}}],["10.2.0",{"_index":1338,"title":{},"body":{"dependencies.html":{}}}],["10.3.9",{"_index":1335,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1162,"title":{},"body":{"classes/User.html":{}}}],["11000",{"_index":968,"title":{},"body":{"classes/Tenant.html":{}}}],["12",{"_index":1435,"title":{},"body":{"overview.html":{}}}],["13",{"_index":1161,"title":{},"body":{"classes/User.html":{}}}],["15",{"_index":1436,"title":{},"body":{"overview.html":{}}}],["15.11.0",{"_index":1369,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["1h",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["2.0.0",{"_index":1359,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1347,"title":{},"body":{"dependencies.html":{}}}],["2.43.4",{"_index":1344,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":879,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["201",{"_index":880,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["20|0)?1[0125]\\d{8",{"_index":951,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["24",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["27",{"_index":578,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["3.0.1",{"_index":1355,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1336,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":562,"title":{},"body":{"injectables/ImageService.html":{}}}],["3600000",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.0.1",{"_index":1361,"title":{},"body":{"dependencies.html":{}}}],["465",{"_index":483,"title":{},"body":{"injectables/EmailService.html":{}}}],["5",{"_index":1434,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1345,"title":{},"body":{"dependencies.html":{}}}],["587",{"_index":480,"title":{},"body":{"injectables/EmailService.html":{}}}],["6",{"_index":1433,"title":{},"body":{"overview.html":{}}}],["6.9.14",{"_index":1356,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1367,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":945,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["8.4.3",{"_index":1350,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":954,"title":{},"body":{"classes/Tenant.html":{}}}],["_id",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{}}}],["access",{"_index":454,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["access_token",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accesstoken",{"_index":500,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["add",{"_index":1198,"title":{},"body":{"controllers/UserController.html":{}}}],["added",{"_index":1197,"title":{},"body":{"controllers/UserController.html":{}}}],["addimage",{"_index":1059,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["addimage(id",{"_index":1065,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["address",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["adduserprojectbyprojectid",{"_index":1169,"title":{},"body":{"controllers/UserController.html":{}}}],["adduserprojectbyprojectid(body",{"_index":1170,"title":{},"body":{"controllers/UserController.html":{}}}],["admin",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["admins",{"_index":844,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["age",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInUserResponse.html":{},"classes/User.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["aliases",{"_index":1484,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":1414,"title":{},"body":{"index.html":{}}}],["amount",{"_index":650,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["angular",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["another",{"_index":1105,"title":{},"body":{"injectables/TenantsService.html":{}}}],["app",{"_index":1393,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1383,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":532,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array.isarray(tenant.projects",{"_index":782,"title":{},"body":{"injectables/ProjectService.html":{}}}],["assigning",{"_index":451,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["async",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{}}}],["auth.module",{"_index":1056,"title":{},"body":{"modules/TenantModule.html":{}}}],["auth_token",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcode",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontroller",{"_index":54,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticationguard",{"_index":136,"title":{"guards/AuthenticationGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"coverage.html":{}}}],["authguard",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader",{"_index":792,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["authheader.split",{"_index":820,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TenantModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1422,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":776,"title":{},"body":{"injectables/ProjectService.html":{}}}],["authorizationaccesstoken",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProject.html":{},"classes/userProjectModel.html":{}}}],["authorizationcode",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProject.html":{},"classes/userProjectModel.html":{}}}],["authorizeclient",{"_index":979,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["authorizeclient(clientid",{"_index":986,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["authservice",{"_index":50,"title":{"injectables/AuthService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":675,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["available",{"_index":785,"title":{},"body":{"injectables/ProjectService.html":{}}}],["await",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":1415,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('failed",{"_index":765,"title":{},"body":{"injectables/ProjectService.html":{}}}],["badrequestexception('invalid",{"_index":848,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["badrequestexception('new",{"_index":1121,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('old",{"_index":1117,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('only",{"_index":843,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["badrequestexception('passwords",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["bcrypt",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1115,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.compare(password",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":1122,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(tenantsignupdto.password",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(updatetenantdto.newpassword",{"_index":1123,"title":{},"body":{"injectables/TenantsService.html":{}}}],["bcrypt.hash(updateuserdto.newpassword",{"_index":1296,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(usersignupdto.password",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(uuidv4",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcryptjs",{"_index":1346,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":459,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["body",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["body('clientid",{"_index":1041,"title":{},"body":{"controllers/TenantController.html":{}}}],["body('clientsecret",{"_index":1042,"title":{},"body":{"controllers/TenantController.html":{}}}],["body('confirmnewpassword",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('newpassword",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('token",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":713,"title":{},"body":{"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1431,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1429,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1379,"title":{},"body":{"index.html":{}}}],["cachecontrol",{"_index":561,"title":{},"body":{"injectables/ImageService.html":{}}}],["callbackurl",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{}}}],["callhandler",{"_index":863,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["canactivate",{"_index":433,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":437,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["capture",{"_index":607,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["capture.id",{"_index":609,"title":{},"body":{"controllers/PaypalController.html":{}}}],["capture.payer",{"_index":612,"title":{},"body":{"controllers/PaypalController.html":{}}}],["capture.result",{"_index":670,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.id",{"_index":659,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.payer.email_address",{"_index":665,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.payer.name.given_name",{"_index":667,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.payer.name.surname",{"_index":668,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.purchase_units[0].amount.currency_code",{"_index":663,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.purchase_units[0].amount.value",{"_index":661,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.status",{"_index":660,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.status",{"_index":610,"title":{},"body":{"controllers/PaypalController.html":{}}}],["captureorder",{"_index":587,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["captureorder(@param('orderid",{"_index":606,"title":{},"body":{"controllers/PaypalController.html":{}}}],["captureorder(orderid",{"_index":589,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["case",{"_index":878,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["catch",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":530,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":536,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["character",{"_index":1464,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["characters",{"_index":946,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["class",{"_index":46,"title":{"classes/HttpExceptionFilter.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["classes",{"_index":526,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"overview.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["click",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["client",{"_index":988,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["clientid",{"_index":509,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/projectModel.html":{}}}],["clientsecret",{"_index":511,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/projectModel.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_paypalmodule",{"_index":613,"title":{},"body":{"modules/PaypalModule.html":{},"overview.html":{}}}],["cluster_paypalmodule_providers",{"_index":614,"title":{},"body":{"modules/PaypalModule.html":{},"overview.html":{}}}],["cluster_projectsmodule",{"_index":849,"title":{},"body":{"modules/ProjectsModule.html":{},"overview.html":{}}}],["cluster_projectsmodule_exports",{"_index":850,"title":{},"body":{"modules/ProjectsModule.html":{},"overview.html":{}}}],["cluster_projectsmodule_providers",{"_index":851,"title":{},"body":{"modules/ProjectsModule.html":{},"overview.html":{}}}],["cluster_tenantmodule",{"_index":1050,"title":{},"body":{"modules/TenantModule.html":{},"overview.html":{}}}],["cluster_tenantmodule_exports",{"_index":1051,"title":{},"body":{"modules/TenantModule.html":{},"overview.html":{}}}],["cluster_tenantmodule_providers",{"_index":1052,"title":{},"body":{"modules/TenantModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1205,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1207,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1206,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1208,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":579,"title":{},"body":{"injectables/IndexManagementService.html":{},"miscellaneous/variables.html":{}}}],["completed",{"_index":882,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["complex",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":465,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('github_callback_url",{"_index":513,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["configservice.get('github_client_id",{"_index":510,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["configservice.get('github_client_secret",{"_index":512,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["configservice.get('google_callback_url",{"_index":523,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_client_id",{"_index":521,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_client_secret",{"_index":522,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["confirm",{"_index":1509,"title":{},"body":{"classes/updateUserModel.html":{}}}],["confirmnewpassword",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["confirmpassword",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["conflictexception",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["conflictexception('email",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["conflictexception('name",{"_index":1104,"title":{},"body":{"injectables/TenantsService.html":{}}}],["conflictexception('password",{"_index":975,"title":{},"body":{"classes/Tenant.html":{}}}],["conflictexception('project",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('tenant",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception(error.message",{"_index":1108,"title":{},"body":{"injectables/TenantsService.html":{}}}],["console",{"_index":1185,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["console.error('error",{"_index":1110,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["console.log('it",{"_index":1292,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(createdproject",{"_index":760,"title":{},"body":{"injectables/ProjectService.html":{}}}],["console.log(tenant",{"_index":756,"title":{},"body":{"injectables/ProjectService.html":{}}}],["console.log(user",{"_index":847,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["const",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":444,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":574,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["constructor(authservice",{"_index":517,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["constructor(configservice",{"_index":464,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{}}}],["constructor(jwtservice",{"_index":435,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(paypaltransactionmodel",{"_index":697,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["constructor(paypaltransactionservice",{"_index":628,"title":{},"body":{"injectables/PaypalService.html":{}}}],["constructor(private",{"_index":446,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["constructor(projectmodel",{"_index":732,"title":{},"body":{"injectables/ProjectService.html":{}}}],["constructor(tenantmodel",{"_index":1063,"title":{},"body":{"injectables/TenantsService.html":{}}}],["constructor(usermodel",{"_index":567,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["contain",{"_index":940,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["context",{"_index":440,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ResponseInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":447,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":872,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["controller",{"_index":53,"title":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('paypal",{"_index":600,"title":{},"body":{"controllers/PaypalController.html":{}}}],["controller('projects",{"_index":818,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["controller('tenants",{"_index":1018,"title":{},"body":{"controllers/TenantController.html":{}}}],["controller('users",{"_index":1186,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":1300,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["create(createprojectdto",{"_index":734,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["create(createtenantdto",{"_index":1068,"title":{},"body":{"injectables/TenantsService.html":{}}}],["create(createuserdto",{"_index":1235,"title":{},"body":{"injectables/UsersService.html":{}}}],["createclient(supabaseurl",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":672,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/UserProject.html":{}}}],["createdproject",{"_index":758,"title":{},"body":{"injectables/ProjectService.html":{}}}],["createdprojetc",{"_index":823,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["createdtenant",{"_index":1087,"title":{},"body":{"injectables/TenantsService.html":{}}}],["createdtenant.save",{"_index":1089,"title":{},"body":{"injectables/TenantsService.html":{}}}],["createduser",{"_index":1267,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":1269,"title":{},"body":{"injectables/UsersService.html":{}}}],["creategithubuser",{"_index":1227,"title":{},"body":{"injectables/UsersService.html":{}}}],["creategithubuser(createuserdto",{"_index":1238,"title":{},"body":{"injectables/UsersService.html":{}}}],["createorder",{"_index":588,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["createprojectdto",{"_index":737,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["createtenantdto",{"_index":1070,"title":{},"body":{"injectables/TenantsService.html":{}}}],["createtransaction",{"_index":696,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["createtransaction(data",{"_index":700,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["createuserdto",{"_index":1237,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":883,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["credentials",{"_index":1130,"title":{},"body":{"injectables/TenantsService.html":{}}}],["crypto",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["crypto.randombytes(32).tostring('hex",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":537,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":540,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":539,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["currency",{"_index":662,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["currency_code",{"_index":651,"title":{},"body":{"injectables/PaypalService.html":{}}}],["data",{"_index":556,"title":{},"body":{"injectables/ImageService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ResponseInterceptor.html":{}}}],["date",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"classes/PaypalTransaction.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["date(date.now",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["date.now",{"_index":693,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"controllers/ProjectsController.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["default",{"_index":692,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["delete",{"_index":727,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":805,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":738,"title":{},"body":{"injectables/ProjectService.html":{}}}],["deleted",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"classes/Project.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["deleting",{"_index":887,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":1384,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":1394,"title":{},"body":{"index.html":{}}}],["digit",{"_index":944,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["displayname",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["doc",{"_index":965,"title":{},"body":{"classes/Tenant.html":{}}}],["document",{"_index":689,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["documentation",{"_index":1301,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["domain/entities/tenant.entity",{"_index":1084,"title":{},"body":{"injectables/TenantsService.html":{}}}],["domain/entities/user.entity",{"_index":1210,"title":{},"body":{"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["don't",{"_index":774,"title":{},"body":{"injectables/ProjectService.html":{}}}],["dtos/project.model",{"_index":815,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["dtos/signinrequest.dto",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/tenant.model",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["dtos/updatetenant.model",{"_index":1015,"title":{},"body":{"controllers/TenantController.html":{}}}],["dtos/updateuser.model",{"_index":1184,"title":{},"body":{"controllers/UserController.html":{}}}],["dtos/user.model",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["due",{"_index":775,"title":{},"body":{"injectables/ProjectService.html":{}}}],["e.g",{"_index":477,"title":{},"body":{"injectables/EmailService.html":{}}}],["e2e",{"_index":1404,"title":{},"body":{"index.html":{}}}],["each",{"_index":1482,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["efficient",{"_index":1380,"title":{},"body":{"index.html":{}}}],["egp",{"_index":652,"title":{},"body":{"injectables/PaypalService.html":{}}}],["email",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["email.service",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["emails",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["emails[0",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["emails[0].value",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailservice",{"_index":223,"title":{"injectables/EmailService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["ensureindexes",{"_index":565,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["environment",{"_index":636,"title":{},"body":{"injectables/PaypalService.html":{}}}],["error",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["error('passwords",{"_index":963,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["error('project",{"_index":1134,"title":{},"body":{"injectables/TenantsService.html":{}}}],["error('tenant",{"_index":1129,"title":{},"body":{"injectables/TenantsService.html":{}}}],["error(`user",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.code",{"_index":577,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/Tenant.html":{}}}],["error.getstatus",{"_index":1030,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["error.message",{"_index":1031,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["error.message.includes('email",{"_index":971,"title":{},"body":{"classes/Tenant.html":{}}}],["error.message.includes('name",{"_index":969,"title":{},"body":{"classes/Tenant.html":{}}}],["error.message.includes('password",{"_index":973,"title":{},"body":{"classes/Tenant.html":{}}}],["error.name",{"_index":966,"title":{},"body":{"classes/Tenant.html":{}}}],["error.status",{"_index":1033,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["example",{"_index":1390,"title":{},"body":{"index.html":{}}}],["exception",{"_index":534,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":528,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":533,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":547,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":542,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":546,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":529,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionshandler",{"_index":1263,"title":{},"body":{"injectables/UsersService.html":{}}}],["exchangecodewithtoken",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["exchangecodewithtoken(obj",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["exclude",{"_index":1475,"title":{},"body":{"classes/tenantModel.html":{}}}],["exec",{"_index":770,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":438,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ResponseInterceptor.html":{}}}],["exist",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["existingtenant",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguser",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":1100,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["expiredate",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProject.html":{},"classes/userProjectModel.html":{}}}],["expiredate.sethours(expiredate.gethours",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":552,"title":{},"body":{"injectables/ImageService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["extends",{"_index":492,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{}}}],["extracttenantid",{"_index":788,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["extracttenantid(authheader",{"_index":794,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["extracttokenfromheader",{"_index":434,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["extracttokenfromheader(request",{"_index":441,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpc3mioijzdxbhymfzzsisinjlzii6inbxdnz0bxzxendzzxdsagjnzhpyiiwicm9szsi6imfub24ilcjpyxqioje3mtgymtixnjqsimv4cci6mjazmzc4ode2nh0.jvdwxdzzzvowfq3pfqflymugrcqucqed2mvq9ejqmpo",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":1032,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["false",{"_index":485,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ImageService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["fileinterceptor",{"_index":1013,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["find",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["findall",{"_index":980,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["findallpertenant",{"_index":728,"title":{},"body":{"injectables/ProjectService.html":{}}}],["findallpertenant(tenantid",{"_index":740,"title":{},"body":{"injectables/ProjectService.html":{}}}],["findbyemail",{"_index":1060,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":1072,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbygithubid",{"_index":1228,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbygithubid(githubid",{"_index":1242,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbygoogleid",{"_index":1229,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbygoogleid(googleid",{"_index":1244,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid",{"_index":1061,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":1074,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbyidandupdate(id",{"_index":1290,"title":{},"body":{"injectables/UsersService.html":{}}}],["findid",{"_index":1230,"title":{},"body":{"injectables/UsersService.html":{}}}],["findid(id",{"_index":1247,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":729,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{}}}],["findone(@param('id",{"_index":833,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["findone(id",{"_index":796,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["findone(projectid",{"_index":742,"title":{},"body":{"injectables/ProjectService.html":{}}}],["findoneandupdate",{"_index":1107,"title":{},"body":{"injectables/TenantsService.html":{}}}],["findtenantbyprojectid",{"_index":1062,"title":{},"body":{"injectables/TenantsService.html":{}}}],["findtenantbyprojectid(projectid",{"_index":1076,"title":{},"body":{"injectables/TenantsService.html":{}}}],["flow",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["following",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["forwardref",{"_index":750,"title":{},"body":{"injectables/ProjectService.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["found",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1378,"title":{},"body":{"index.html":{}}}],["from('authgateimages",{"_index":558,"title":{},"body":{"injectables/ImageService.html":{}}}],["frontend",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["frontendurl",{"_index":1044,"title":{},"body":{"controllers/TenantController.html":{}}}],["function",{"_index":948,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"coverage.html":{}}}],["functions",{"_index":1372,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":797,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["get('email/:email",{"_index":992,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["get('github",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github')@useguards(undefined",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github/callback",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github/callback')@useguards(undefined",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@useguards(undefined",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback')@useguards(undefined",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('targettenant",{"_index":802,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getall",{"_index":789,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getall(@headers('authorization",{"_index":825,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getall(authheader",{"_index":799,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getallpertenant",{"_index":790,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getallpertenant(authheader",{"_index":801,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getbyemail",{"_index":981,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyemail(@param('email",{"_index":1024,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyemail(email",{"_index":991,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyid",{"_index":982,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyid(@param('id",{"_index":1020,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyid(id",{"_index":994,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getmessage",{"_index":857,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["getmessage(statuscode",{"_index":859,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["getprofile",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["gettenantbyprojectid",{"_index":983,"title":{},"body":{"controllers/TenantController.html":{}}}],["gettenantbyprojectid(projectid",{"_index":996,"title":{},"body":{"controllers/TenantController.html":{}}}],["getting",{"_index":1374,"title":{"index.html":{}},"body":{}}],["getuserprojects",{"_index":1231,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserprojects(projectref",{"_index":1249,"title":{},"body":{"injectables/UsersService.html":{}}}],["github",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubAuthStrategy.html":{},"dependencies.html":{}}}],["githubauthcallback",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback(@req",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback(req",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthstrategy",{"_index":224,"title":{"injectables/GithubAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GithubAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["githubid",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IndexManagementService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/userModel.html":{}}}],["given",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{}}}],["global",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["google",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["googleauthcallback",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(@req",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(req",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthstrategy",{"_index":225,"title":{"injectables/GoogleAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IndexManagementService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/userModel.html":{}}}],["grow",{"_index":1410,"title":{},"body":{"index.html":{}}}],["guard",{"_index":430,"title":{"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":431,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards/auth.guard",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{}}}],["handler",{"_index":1265,"title":{},"body":{"injectables/UsersService.html":{}}}],["handlers",{"_index":456,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["hashedpassword",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["header",{"_index":811,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{}}}],["headers",{"_index":812,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["headers('authorization",{"_index":821,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["here",{"_index":453,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["host",{"_index":475,"title":{},"body":{"injectables/EmailService.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":538,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http://localhost:4200/auth/github/callback?token=${access_token}&user=${json.stringify(user",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["http://localhost:4200/auth/google/callback?token=${access_token}&user=${json.stringify(user",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["http://localhost:4200/authorize",{"_index":1045,"title":{},"body":{"controllers/TenantController.html":{}}}],["http://localhost:4200/reset",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpcode",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('authcode",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('login",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('registertenant",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('registeruser",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":531,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["httpexception('tenant",{"_index":1022,"title":{},"body":{"controllers/TenantController.html":{}}}],["httpexception('user",{"_index":1189,"title":{},"body":{"controllers/UserController.html":{}}}],["httpexception(error.message",{"_index":1029,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpexceptionfilter",{"_index":525,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":1425,"title":{},"body":{"index.html":{}}}],["https://pqvvtmvqzwsewlhbgdzr.supabase.co",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://pqvvtmvqzwsewlhbgdzr.supabase.co/storage/v1/object/public/authgateimages",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpstatus.internal_server_error",{"_index":1034,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpstatus.not_found",{"_index":1023,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpstatus.unauthorized",{"_index":1046,"title":{},"body":{"controllers/TenantController.html":{}}}],["id",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1302,"title":{},"body":{"coverage.html":{}}}],["id}provided@github.com",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["image",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["image.buffer",{"_index":560,"title":{},"body":{"injectables/ImageService.html":{}}}],["image.originalname",{"_index":1138,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["image.service",{"_index":1085,"title":{},"body":{"injectables/TenantsService.html":{}}}],["imageservice",{"_index":33,"title":{"injectables/ImageService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ImageService.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["imageurl",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implements",{"_index":445,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/IndexManagementService.html":{},"injectables/ResponseInterceptor.html":{}}}],["import",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["imports",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":1462,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["incorrect",{"_index":1118,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["index",{"_index":58,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["indexmanagementservice",{"_index":37,"title":{"injectables/IndexManagementService.html":{}},"body":{"modules/AppModule.html":{},"injectables/IndexManagementService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["info",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["infrastructure/services/image.service",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/services/indexmanagement.service",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["initiates",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["inject",{"_index":749,"title":{},"body":{"injectables/ProjectService.html":{}}}],["injectable",{"_index":244,"title":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":572,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(paypaltransaction.name",{"_index":702,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["injectmodel(project.name",{"_index":753,"title":{},"body":{"injectables/ProjectService.html":{}}}],["injectmodel(tenant.name",{"_index":754,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{}}}],["injectmodel(user.name",{"_index":1266,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1389,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1392,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1028,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["instead",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intent",{"_index":648,"title":{},"body":{"injectables/PaypalService.html":{}}}],["intercept",{"_index":858,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["intercept(context",{"_index":861,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["internalservererrorexception",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception('failed",{"_index":1111,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["invalid",{"_index":1525,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["invalid'})@isnotempty({message",{"_index":1514,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isarray",{"_index":1476,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isarray()@validatenested({each",{"_index":1467,"title":{},"body":{"classes/tenantModel.html":{}}}],["isboolean",{"_index":1447,"title":{},"body":{"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isdate",{"_index":1477,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["isemail",{"_index":889,"title":{},"body":{"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["isglobal",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatch",{"_index":1114,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["isnotempty",{"_index":718,"title":{},"body":{"classes/Project.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isnumber",{"_index":902,"title":{},"body":{"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional",{"_index":720,"title":{},"body":{"classes/Project.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isarray",{"_index":1523,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":1503,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["isoptional()@isboolean",{"_index":1442,"title":{},"body":{"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isdate",{"_index":1470,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isemail",{"_index":1492,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["isoptional()@isnumber",{"_index":905,"title":{},"body":{"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isstring",{"_index":894,"title":{},"body":{"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isstring()@matches(/^(?=.*[a",{"_index":1496,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["ispasswordmatch",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":717,"title":{},"body":{"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["isstring()@isnotempty",{"_index":1444,"title":{},"body":{"classes/projectModel.html":{}}}],["isstring()@isnotempty({message",{"_index":1518,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isstring()@isoptional",{"_index":1439,"title":{},"body":{"classes/projectModel.html":{}}}],["isstring()@isurl()@isnotempty",{"_index":1437,"title":{},"body":{"classes/projectModel.html":{}}}],["isstring()@minlength(8)@isnotempty({message",{"_index":1457,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isurl",{"_index":719,"title":{},"body":{"classes/Project.html":{},"classes/projectModel.html":{}}}],["item",{"_index":829,"title":{},"body":{"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{}}}],["item.name",{"_index":1103,"title":{},"body":{"injectables/TenantsService.html":{}}}],["item.projects.length",{"_index":830,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["join",{"_index":1417,"title":{},"body":{"index.html":{}}}],["js",{"_index":1343,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":1360,"title":{},"body":{"dependencies.html":{}}}],["jwtconstants",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.imageurl",{"_index":1137,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["jwtconstants.secret",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"guards/AuthenticationGuard.html":{}}}],["jwtmodule",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["kamil",{"_index":1423,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["letter",{"_index":942,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["license",{"_index":1428,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1408,"title":{},"body":{"index.html":{}}}],["link",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["links",{"_index":604,"title":{},"body":{"controllers/PaypalController.html":{}}}],["list",{"_index":784,"title":{},"body":{"injectables/ProjectService.html":{}}}],["literal",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["local",{"_index":1362,"title":{},"body":{"dependencies.html":{}}}],["login",{"_index":1101,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["loginwithgithub",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithgoogle",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["long",{"_index":947,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["lowercase",{"_index":943,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["lts.1",{"_index":1353,"title":{},"body":{"dependencies.html":{}}}],["map",{"_index":868,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["map((data",{"_index":871,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["match",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":1293,"title":{},"body":{"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["matches(/^(?=.[a",{"_index":1481,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["matches(/^\\s+@\\s+\\.\\s",{"_index":1512,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["matching",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1142,"title":{},"body":{"classes/User.html":{}}}],["message",{"_index":545,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["metadata",{"_index":1365,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":875,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["methods",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":1160,"title":{},"body":{"classes/User.html":{}}}],["minlength",{"_index":1478,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["minlength(8",{"_index":1480,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["miscellaneous",{"_index":1371,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1407,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1398,"title":{},"body":{"index.html":{}}}],["model",{"_index":568,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/paypal.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/project.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/tenant.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IndexManagementService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"classes/userProjectModel.html":{}}}],["mongoose.schema.types.objectid",{"_index":723,"title":{},"body":{"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["mongoosemodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":623,"title":{},"body":{"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot('mongodb://localhost:27017/authgate",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoservererror",{"_index":967,"title":{},"body":{"classes/Tenant.html":{}}}],["more",{"_index":1419,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1351,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1424,"title":{},"body":{"index.html":{}}}],["name",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["nest",{"_index":1385,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1427,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":866,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1337,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core/exceptions/exceptions",{"_index":1264,"title":{},"body":{"injectables/UsersService.html":{}}}],["nestjs/jwt",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"injectables/IndexManagementService.html":{},"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1014,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateUserModel.html":{}}}],["newemail",{"_index":1093,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["newname",{"_index":1094,"title":{},"body":{"injectables/TenantsService.html":{}}}],["newpassword",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["newtransaction",{"_index":703,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["newtransaction.save",{"_index":705,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["next",{"_index":862,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["next(error",{"_index":976,"title":{},"body":{"classes/Tenant.html":{}}}],["next(new",{"_index":962,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["next.handle().pipe",{"_index":870,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["node.js",{"_index":1377,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":472,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":474,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailer.transporter",{"_index":471,"title":{},"body":{"injectables/EmailService.html":{}}}],["notacceptableexception",{"_index":931,"title":{},"body":{"classes/Tenant.html":{}}}],["notfoundexception",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('tenant",{"_index":840,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["notfoundexception('user",{"_index":838,"title":{},"body":{"controllers/ProjectsController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`project",{"_index":777,"title":{},"body":{"injectables/ProjectService.html":{}}}],["notfoundexception(`tenant",{"_index":757,"title":{},"body":{"injectables/ProjectService.html":{}}}],["notfoundexception(error.message",{"_index":1109,"title":{},"body":{"injectables/TenantsService.html":{}}}],["npm",{"_index":1391,"title":{},"body":{"index.html":{}}}],["null",{"_index":1096,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":677,"title":{},"body":{"classes/PaypalTransaction.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["oauth",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["oauth20",{"_index":520,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["obj",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["object",{"_index":452,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["object.assign(project",{"_index":778,"title":{},"body":{"injectables/ProjectService.html":{}}}],["object.assign(tenant",{"_index":1125,"title":{},"body":{"injectables/TenantsService.html":{}}}],["object.assign(user",{"_index":1298,"title":{},"body":{"injectables/UsersService.html":{}}}],["objectid",{"_index":1543,"title":{},"body":{"classes/userProjectModel.html":{}}}],["observable",{"_index":865,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["oldpassword",{"_index":1488,"title":{},"body":{"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["one",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{}}}],["onmoduleinit",{"_index":566,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["open",{"_index":1409,"title":{},"body":{"index.html":{}}}],["optional",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["order",{"_index":595,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["order.id",{"_index":602,"title":{},"body":{"controllers/PaypalController.html":{}}}],["order.links",{"_index":605,"title":{},"body":{"controllers/PaypalController.html":{}}}],["order.result",{"_index":656,"title":{},"body":{"injectables/PaypalService.html":{}}}],["order.status",{"_index":603,"title":{},"body":{"controllers/PaypalController.html":{}}}],["order/:orderid",{"_index":591,"title":{},"body":{"controllers/PaypalController.html":{}}}],["orderid",{"_index":593,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["out",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["outside",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1432,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1281,"title":{},"body":{"injectables/UsersService.html":{}}}],["p._id.tostring",{"_index":1282,"title":{},"body":{"injectables/UsersService.html":{}}}],["package",{"_index":1334,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":597,"title":{},"body":{"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":835,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["pass",{"_index":488,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":504,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":501,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["passportstrategy(strategy",{"_index":493,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["password",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInRequest.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["password/${resettoken",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["password/request",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["password:\\n",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":950,"title":{},"body":{"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":813,"title":{},"body":{"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":809,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["patch(':id/undelete",{"_index":807,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["patch('updatewithpassword",{"_index":1035,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["patch('updatewithpassword')@useguards(authenticationguard",{"_index":1006,"title":{},"body":{"controllers/TenantController.html":{}}}],["patch()@useguards(authenticationguard",{"_index":1001,"title":{},"body":{"controllers/TenantController.html":{}}}],["pattern",{"_index":1513,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["payer",{"_index":611,"title":{},"body":{"controllers/PaypalController.html":{}}}],["payeremail",{"_index":664,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["payername",{"_index":666,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["payload",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["payload.role",{"_index":826,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["payload.sub",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{}}}],["paypal",{"_index":586,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["paypal.core.liveenvironment",{"_index":639,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.core.paypalhttpclient",{"_index":632,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.core.paypalhttpclient(environment",{"_index":644,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.core.sandboxenvironment",{"_index":642,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.orders.orderscapturerequest(orderid",{"_index":657,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.orders.orderscreaterequest",{"_index":645,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal/checkout",{"_index":633,"title":{},"body":{"injectables/PaypalService.html":{},"dependencies.html":{}}}],["paypalclient",{"_index":627,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypalcontroller",{"_index":584,"title":{"controllers/PaypalController.html":{}},"body":{"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"coverage.html":{}}}],["paypalmodule",{"_index":13,"title":{"modules/PaypalModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaypalModule.html":{},"modules.html":{},"overview.html":{}}}],["paypalservice",{"_index":598,"title":{"injectables/PaypalService.html":{}},"body":{"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"coverage.html":{},"overview.html":{}}}],["paypaltransaction",{"_index":619,"title":{"classes/PaypalTransaction.html":{}},"body":{"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"coverage.html":{}}}],["paypaltransaction.name",{"_index":624,"title":{},"body":{"modules/PaypalModule.html":{}}}],["paypaltransactiondocument",{"_index":690,"title":{},"body":{"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"miscellaneous/typealiases.html":{}}}],["paypaltransactionmodel",{"_index":699,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["paypaltransactionschema",{"_index":618,"title":{},"body":{"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paypaltransactionservice",{"_index":615,"title":{"injectables/PaypalTransactionService.html":{}},"body":{"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"coverage.html":{},"overview.html":{}}}],["phone",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["photos",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["photos[0",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["photos[0].value",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["plaintoinstance",{"_index":1016,"title":{},"body":{"controllers/TenantController.html":{}}}],["please",{"_index":934,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"index.html":{}}}],["port",{"_index":479,"title":{},"body":{"injectables/EmailService.html":{}}}],["ports",{"_index":486,"title":{},"body":{"injectables/EmailService.html":{}}}],["post",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["post('authcode",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('authorize",{"_index":987,"title":{},"body":{"controllers/TenantController.html":{}}}],["post('capture",{"_index":590,"title":{},"body":{"controllers/PaypalController.html":{}}}],["post('create",{"_index":594,"title":{},"body":{"controllers/PaypalController.html":{}}}],["post('image/:id",{"_index":1047,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["post('image/:id')@useinterceptors(undefined",{"_index":1009,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('registertenant",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('registeruser",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["presentation/controllers/user.controller",{"_index":1211,"title":{},"body":{"modules/UserModule.html":{}}}],["presentation/dtos/tenant.model",{"_index":1083,"title":{},"body":{"injectables/TenantsService.html":{}}}],["presentation/dtos/user.model",{"_index":1258,"title":{},"body":{"injectables/UsersService.html":{}}}],["private",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":637,"title":{},"body":{"injectables/PaypalService.html":{}}}],["process.env.password_reset_jwt_secret",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.paypal_client_id",{"_index":640,"title":{},"body":{"injectables/PaypalService.html":{}}}],["process.env.paypal_client_secret",{"_index":641,"title":{},"body":{"injectables/PaypalService.html":{}}}],["processauth",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["processauth(projectid",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["production",{"_index":638,"title":{},"body":{"injectables/PaypalService.html":{},"index.html":{}}}],["profile",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["progressive",{"_index":1376,"title":{},"body":{"index.html":{}}}],["proj",{"_index":771,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{}}}],["proj._id.tostring",{"_index":772,"title":{},"body":{"injectables/ProjectService.html":{}}}],["proj.clientid",{"_index":1132,"title":{},"body":{"injectables/TenantsService.html":{}}}],["proj.clientsecret",{"_index":1133,"title":{},"body":{"injectables/TenantsService.html":{}}}],["project",{"_index":184,"title":{"classes/Project.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["project._id.tostring",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{}}}],["project.deleted",{"_index":780,"title":{},"body":{"injectables/ProjectService.html":{}}}],["project.entity",{"_index":930,"title":{},"body":{"classes/Tenant.html":{}}}],["project.module",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["project.name",{"_index":854,"title":{},"body":{"modules/ProjectsModule.html":{}}}],["project.projectid",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["project.projectid.tostring",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["project.service",{"_index":1262,"title":{},"body":{"injectables/UsersService.html":{}}}],["projectid",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"classes/userProjectModel.html":{}}}],["projectlist",{"_index":763,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["projectlist.push(item",{"_index":831,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["projectmodel",{"_index":296,"title":{"classes/projectModel.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/projectModel.html":{}}}],["projectref",{"_index":1251,"title":{},"body":{"injectables/UsersService.html":{}}}],["projects",{"_index":783,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["projects._id",{"_index":769,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{}}}],["projects.clientid",{"_index":1127,"title":{},"body":{"injectables/TenantsService.html":{}}}],["projects.clientsecret",{"_index":1128,"title":{},"body":{"injectables/TenantsService.html":{}}}],["projectsafterupdate",{"_index":779,"title":{},"body":{"injectables/ProjectService.html":{}}}],["projectschema",{"_index":724,"title":{},"body":{"classes/Project.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projectscontroller",{"_index":786,"title":{"controllers/ProjectsController.html":{}},"body":{"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"coverage.html":{}}}],["projectservice",{"_index":47,"title":{"injectables/ProjectService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["projectsmodule",{"_index":14,"title":{"modules/ProjectsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["projref",{"_index":1278,"title":{},"body":{"injectables/UsersService.html":{}}}],["projref.projectid",{"_index":1280,"title":{},"body":{"injectables/UsersService.html":{}}}],["promise",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":687,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["prop()@isstring()@isoptional",{"_index":710,"title":{},"body":{"classes/Project.html":{}}}],["prop({default",{"_index":680,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["prop({match",{"_index":923,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["prop({min",{"_index":1141,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":678,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["prop({type",{"_index":674,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["prop({unique",{"_index":1147,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":461,"title":{"properties.html":{}},"body":{"injectables/EmailService.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["purchase_units",{"_index":649,"title":{},"body":{"injectables/PaypalService.html":{}}}],["put",{"_index":814,"title":{},"body":{"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{}}}],["query",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["read",{"_index":1418,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":507,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["redirect",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["redirecturl",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["ref",{"_index":1221,"title":{},"body":{"classes/UserProject.html":{}}}],["reflect",{"_index":1364,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":498,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["registered",{"_index":972,"title":{},"body":{"classes/Tenant.html":{}}}],["remove",{"_index":791,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":1039,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":804,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":1388,"title":{},"body":{"index.html":{}}}],["req",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaypalService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{}}}],["request.headers.authorization?.split",{"_index":458,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["request.method",{"_index":876,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["request.prefer('return=representation",{"_index":646,"title":{},"body":{"injectables/PaypalService.html":{}}}],["request.requestbody",{"_index":647,"title":{},"body":{"injectables/PaypalService.html":{}}}],["request['user",{"_index":457,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["required",{"_index":691,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["required'})@isemail",{"_index":1515,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["required'})@matches(/^(?=.*[a",{"_index":1508,"title":{},"body":{"classes/updateUserModel.html":{}}}],["required'})@matches(/^(?=.[a",{"_index":1458,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["res",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.redirect(redirecturl",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resetlink",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassword",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(token",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpasswordexpires",{"_index":913,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["resetpasswordtoken",{"_index":914,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["resettoken",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["resource",{"_index":884,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["response",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["response.status(status).json",{"_index":543,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.statuscode",{"_index":873,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["responseinterceptor",{"_index":855,"title":{"injectables/ResponseInterceptor.html":{}},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["result",{"_index":1192,"title":{},"body":{"controllers/UserController.html":{}}}],["results",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1190,"title":{},"body":{"controllers/UserController.html":{}}}],["return",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["route",{"_index":455,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["run",{"_index":1395,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":867,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":869,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["s+@\\s+\\.\\s",{"_index":933,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["s3",{"_index":1354,"title":{},"body":{"dependencies.html":{}}}],["safe",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salt",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["save",{"_index":1232,"title":{},"body":{"injectables/UsersService.html":{}}}],["save(user",{"_index":1253,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":1381,"title":{},"body":{"index.html":{}}}],["schema",{"_index":625,"title":{},"body":{"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"modules/TenantModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{}}}],["schemafactory",{"_index":688,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["schemafactory.createforclass(paypaltransaction",{"_index":694,"title":{},"body":{"classes/PaypalTransaction.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(project",{"_index":725,"title":{},"body":{"classes/Project.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(tenant",{"_index":958,"title":{},"body":{"classes/Tenant.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1164,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(userproject",{"_index":1225,"title":{},"body":{"classes/UserProject.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["scopeoptions",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["sdk",{"_index":635,"title":{},"body":{"injectables/PaypalService.html":{},"dependencies.html":{}}}],["secret",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["secure",{"_index":484,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail",{"_index":463,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(to",{"_index":467,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendpasswordresetemail",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendpasswordresetemail(@body('email",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendpasswordresetemail(email",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendresetpasswordresetemail",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendresetpasswordresetemail(email",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":634,"title":{},"body":{"injectables/PaypalService.html":{},"dependencies.html":{},"index.html":{}}}],["services/auth.service",{"_index":506,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["services/users.service",{"_index":505,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["side",{"_index":1382,"title":{},"body":{"index.html":{}}}],["signin",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(email",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(signindto",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto.password",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinrequest",{"_index":115,"title":{"classes/SignInRequest.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignInRequest.html":{},"coverage.html":{}}}],["signinresponse",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["signintenantresponse",{"_index":285,"title":{"classes/SignInTenantResponse.html":{}},"body":{"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"coverage.html":{}}}],["signinuserresponse",{"_index":283,"title":{"classes/SignInUserResponse.html":{}},"body":{"injectables/AuthService.html":{},"classes/SignInUserResponse.html":{},"coverage.html":{}}}],["signinwithgithub",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithgithub(user",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithgoogle",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithgoogle(user",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["signupastenant",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupastenant(@body",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupastenant(tenantsignupdto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupasuser",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupasuser(@body",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupasuser(usersignupdto",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["smtp.gmail.com",{"_index":478,"title":{},"body":{"injectables/EmailService.html":{}}}],["smtp.office365.com",{"_index":476,"title":{},"body":{"injectables/EmailService.html":{}}}],["source",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["sparse",{"_index":583,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/User.html":{}}}],["special",{"_index":1463,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["sponsors",{"_index":1412,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1373,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../paypal.entity.ts",{"_index":1485,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../project.entity.ts",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabaseclient.ts",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tenant.entity.ts",{"_index":1486,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":1487,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../userproject.entity.ts",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["src/constants",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/constants.ts",{"_index":1304,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/paypal.entity",{"_index":620,"title":{},"body":{"modules/PaypalModule.html":{},"injectables/PaypalTransactionService.html":{}}}],["src/domain/entities/paypal.entity.ts",{"_index":671,"title":{},"body":{"classes/PaypalTransaction.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/paypal.entity.ts:12",{"_index":683,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:15",{"_index":686,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:18",{"_index":679,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:21",{"_index":682,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:24",{"_index":684,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:27",{"_index":685,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:30",{"_index":681,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:9",{"_index":676,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/project.entity",{"_index":751,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["src/domain/entities/project.entity.ts",{"_index":706,"title":{},"body":{"classes/Project.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/project.entity.ts:13",{"_index":711,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:18",{"_index":712,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:23",{"_index":716,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:29",{"_index":709,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:32",{"_index":714,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:8",{"_index":707,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/tenant.entity",{"_index":752,"title":{},"body":{"injectables/ProjectService.html":{},"modules/TenantModule.html":{}}}],["src/domain/entities/tenant.entity.ts",{"_index":912,"title":{},"body":{"classes/Tenant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/tenant.entity.ts:17",{"_index":915,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:20",{"_index":921,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:27",{"_index":919,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:46",{"_index":922,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:49",{"_index":917,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:52",{"_index":927,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:55",{"_index":926,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:60",{"_index":924,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:63",{"_index":916,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:71",{"_index":929,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:74",{"_index":920,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:77",{"_index":925,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:80",{"_index":928,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:83",{"_index":918,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/user.entity",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{}}}],["src/domain/entities/user.entity.ts",{"_index":1139,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/user.entity.ts:11",{"_index":1140,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:14",{"_index":1151,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:21",{"_index":1146,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:40",{"_index":1152,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:43",{"_index":1144,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:46",{"_index":1156,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:49",{"_index":1155,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:54",{"_index":1153,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:57",{"_index":1158,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:60",{"_index":1150,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:66",{"_index":1143,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:69",{"_index":1149,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:72",{"_index":1148,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:75",{"_index":1145,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:78",{"_index":1157,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:81",{"_index":1154,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/userproject.entity",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["src/domain/entities/userproject.entity.ts",{"_index":1213,"title":{},"body":{"classes/UserProject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/userproject.entity.ts:10",{"_index":1216,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:13",{"_index":1215,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:16",{"_index":1219,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:19",{"_index":1220,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:22",{"_index":1217,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:25",{"_index":1218,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:28",{"_index":1223,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:7",{"_index":1222,"title":{},"body":{"classes/UserProject.html":{}}}],["src/infrastructure/paypal/paypal",{"_index":621,"title":{},"body":{"modules/PaypalModule.html":{},"injectables/PaypalTransactionService.html":{},"coverage.html":{}}}],["src/infrastructure/paypal/paypal.service",{"_index":599,"title":{},"body":{"controllers/PaypalController.html":{},"modules/PaypalModule.html":{}}}],["src/infrastructure/paypal/paypal.service.ts",{"_index":626,"title":{},"body":{"injectables/PaypalService.html":{},"coverage.html":{}}}],["src/infrastructure/paypal/paypal.service.ts:26",{"_index":631,"title":{},"body":{"injectables/PaypalService.html":{}}}],["src/infrastructure/paypal/paypal.service.ts:45",{"_index":630,"title":{},"body":{"injectables/PaypalService.html":{}}}],["src/infrastructure/paypal/paypal.service.ts:8",{"_index":629,"title":{},"body":{"injectables/PaypalService.html":{}}}],["src/infrastructure/services/auth.service",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["src/infrastructure/services/auth.service.ts",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/services/auth.service.ts:113",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:140",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:163",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:229",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:253",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:27",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:275",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:299",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:322",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:348",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:35",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:43",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/email.service",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["src/infrastructure/services/email.service.ts",{"_index":460,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/infrastructure/services/email.service.ts:21",{"_index":470,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/infrastructure/services/email.service.ts:7",{"_index":466,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/infrastructure/services/image.service",{"_index":1055,"title":{},"body":{"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/services/image.service.ts",{"_index":548,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{}}}],["src/infrastructure/services/image.service.ts:11",{"_index":553,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/infrastructure/services/image.service.ts:8",{"_index":550,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/infrastructure/services/indexmanagement.service",{"_index":1212,"title":{},"body":{"modules/UserModule.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts",{"_index":564,"title":{},"body":{"injectables/IndexManagementService.html":{},"coverage.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts:10",{"_index":571,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts:14",{"_index":570,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts:7",{"_index":569,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["src/infrastructure/services/project.service",{"_index":816,"title":{},"body":{"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["src/infrastructure/services/project.service.ts",{"_index":726,"title":{},"body":{"injectables/ProjectService.html":{},"coverage.html":{}}}],["src/infrastructure/services/project.service.ts:115",{"_index":745,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:135",{"_index":739,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:16",{"_index":733,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:22",{"_index":736,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:54",{"_index":741,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:64",{"_index":743,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:80",{"_index":748,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/tenants.service",{"_index":817,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["src/infrastructure/services/tenants.service.ts",{"_index":1058,"title":{},"body":{"injectables/TenantsService.html":{},"coverage.html":{}}}],["src/infrastructure/services/tenants.service.ts:155",{"_index":1078,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:165",{"_index":1079,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:175",{"_index":1067,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:18",{"_index":1064,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:198",{"_index":1066,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:213",{"_index":1077,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:24",{"_index":1069,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:29",{"_index":1075,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:33",{"_index":1073,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:37",{"_index":1071,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:41",{"_index":1080,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:92",{"_index":1082,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/users.service",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["src/infrastructure/services/users.service.ts",{"_index":1226,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/services/users.service.ts:141",{"_index":1257,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:199",{"_index":1252,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:209",{"_index":1255,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:219",{"_index":1234,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:25",{"_index":1233,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:33",{"_index":1236,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:38",{"_index":1239,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:43",{"_index":1240,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:51",{"_index":1248,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:55",{"_index":1246,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:65",{"_index":1241,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:69",{"_index":1250,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:87",{"_index":1243,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:91",{"_index":1245,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:95",{"_index":1254,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:99",{"_index":1256,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/strategies/githubauth.strategy",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/strategies/githubauth.strategy.ts",{"_index":491,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/strategies/githubauth.strategy.ts:10",{"_index":496,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["src/infrastructure/strategies/githubauth.strategy.ts:25",{"_index":499,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["src/infrastructure/strategies/googleauth.strategy",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/strategies/googleauth.strategy.ts",{"_index":516,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/strategies/googleauth.strategy.ts:21",{"_index":519,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["src/infrastructure/strategies/googleauth.strategy.ts:8",{"_index":518,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["src/infrastructure/supabase/supabaseclient.ts",{"_index":1317,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1320,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth.module.ts",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/paypal.module.ts",{"_index":616,"title":{},"body":{"modules/PaypalModule.html":{}}}],["src/modules/project.module.ts",{"_index":852,"title":{},"body":{"modules/ProjectsModule.html":{}}}],["src/modules/tenant.module.ts",{"_index":1053,"title":{},"body":{"modules/TenantModule.html":{}}}],["src/modules/user.module.ts",{"_index":1209,"title":{},"body":{"modules/UserModule.html":{}}}],["src/presentation/controllers/auth.controller",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/presentation/controllers/auth.controller.ts",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/presentation/controllers/auth.controller.ts:104",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:116",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:121",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:36",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:42",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:48",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:54",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:60",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:80",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:85",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:98",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/paypal.controller",{"_index":617,"title":{},"body":{"modules/PaypalModule.html":{}}}],["src/presentation/controllers/paypal.controller.ts",{"_index":585,"title":{},"body":{"controllers/PaypalController.html":{},"coverage.html":{}}}],["src/presentation/controllers/paypal.controller.ts:19",{"_index":592,"title":{},"body":{"controllers/PaypalController.html":{}}}],["src/presentation/controllers/paypal.controller.ts:9",{"_index":596,"title":{},"body":{"controllers/PaypalController.html":{}}}],["src/presentation/controllers/project.controller",{"_index":853,"title":{},"body":{"modules/ProjectsModule.html":{}}}],["src/presentation/controllers/project.controller.ts",{"_index":787,"title":{},"body":{"controllers/ProjectsController.html":{},"coverage.html":{}}}],["src/presentation/controllers/project.controller.ts:123",{"_index":806,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:36",{"_index":795,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:43",{"_index":793,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:56",{"_index":800,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:71",{"_index":803,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:79",{"_index":798,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:84",{"_index":810,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:99",{"_index":808,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/tenant.controller",{"_index":1054,"title":{},"body":{"modules/TenantModule.html":{}}}],["src/presentation/controllers/tenant.controller.ts",{"_index":978,"title":{},"body":{"controllers/TenantController.html":{},"coverage.html":{}}}],["src/presentation/controllers/tenant.controller.ts:119",{"_index":999,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:142",{"_index":998,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:158",{"_index":989,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:177",{"_index":1010,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:184",{"_index":997,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:40",{"_index":990,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:45",{"_index":995,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:54",{"_index":993,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:64",{"_index":1002,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:95",{"_index":1007,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/user.controller.ts",{"_index":1167,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/presentation/controllers/user.controller.ts:114",{"_index":1178,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:135",{"_index":1182,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:159",{"_index":1176,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:182",{"_index":1175,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:199",{"_index":1183,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:38",{"_index":1172,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:43",{"_index":1174,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:59",{"_index":1173,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:75",{"_index":1171,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/dtos/project.model",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"modules/ProjectsModule.html":{},"injectables/UsersService.html":{}}}],["src/presentation/dtos/project.model.ts",{"_index":1324,"title":{},"body":{"coverage.html":{},"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:12",{"_index":1446,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:16",{"_index":1440,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:20",{"_index":1441,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:24",{"_index":1445,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:29",{"_index":1438,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:33",{"_index":1443,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/signinrequest.dto.ts",{"_index":888,"title":{},"body":{"classes/SignInRequest.html":{},"coverage.html":{}}}],["src/presentation/dtos/signinrequest.dto.ts:5",{"_index":890,"title":{},"body":{"classes/SignInRequest.html":{}}}],["src/presentation/dtos/signinrequest.dto.ts:8",{"_index":891,"title":{},"body":{"classes/SignInRequest.html":{}}}],["src/presentation/dtos/signintenantresponse.dto",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/presentation/dtos/signintenantresponse.dto.ts",{"_index":892,"title":{},"body":{"classes/SignInTenantResponse.html":{},"coverage.html":{}}}],["src/presentation/dtos/signintenantresponse.dto.ts:11",{"_index":896,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.dto.ts:15",{"_index":899,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.dto.ts:19",{"_index":895,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.dto.ts:23",{"_index":901,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.dto.ts:27",{"_index":897,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.dto.ts:30",{"_index":900,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.dto.ts:5",{"_index":893,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.dto.ts:8",{"_index":898,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.dto",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/presentation/dtos/signinuserresponse.dto.ts",{"_index":903,"title":{},"body":{"classes/SignInUserResponse.html":{},"coverage.html":{}}}],["src/presentation/dtos/signinuserresponse.dto.ts:11",{"_index":907,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.dto.ts:15",{"_index":910,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.dto.ts:19",{"_index":908,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.dto.ts:23",{"_index":906,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.dto.ts:26",{"_index":911,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.dto.ts:5",{"_index":904,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.dto.ts:8",{"_index":909,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/tenant.model",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/presentation/dtos/tenant.model.ts",{"_index":1325,"title":{},"body":{"coverage.html":{},"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:19",{"_index":1456,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:22",{"_index":1454,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:31",{"_index":1465,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:32",{"_index":1452,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:36",{"_index":1472,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:40",{"_index":1471,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:44",{"_index":1455,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:48",{"_index":1466,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:52",{"_index":1451,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:56",{"_index":1474,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:62",{"_index":1469,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:65",{"_index":1473,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:69",{"_index":1453,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model",{"_index":1086,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/presentation/dtos/updatetenant.model.ts",{"_index":1327,"title":{},"body":{"coverage.html":{},"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:17",{"_index":1495,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:21",{"_index":1493,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:25",{"_index":1502,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:29",{"_index":1489,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:33",{"_index":1506,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:37",{"_index":1494,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:43",{"_index":1505,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:47",{"_index":1491,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:51",{"_index":1501,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:61",{"_index":1500,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:65",{"_index":1490,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updateuser.model",{"_index":1261,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/presentation/dtos/updateuser.model.ts",{"_index":1328,"title":{},"body":{"coverage.html":{},"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:17",{"_index":1519,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:24",{"_index":1516,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:28",{"_index":1522,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:32",{"_index":1517,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:36",{"_index":1507,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:40",{"_index":1524,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:44",{"_index":1511,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:48",{"_index":1521,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:60",{"_index":1520,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:72",{"_index":1510,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/user.model",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/presentation/dtos/user.model.ts",{"_index":1329,"title":{},"body":{"coverage.html":{},"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:18",{"_index":1533,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:27",{"_index":1534,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:28",{"_index":1527,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:32",{"_index":1538,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:36",{"_index":1537,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:43",{"_index":1529,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:47",{"_index":1535,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:51",{"_index":1530,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:55",{"_index":1531,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:59",{"_index":1532,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:63",{"_index":1526,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:67",{"_index":1536,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:70",{"_index":1539,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:74",{"_index":1528,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/userproject.dto",{"_index":1260,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/presentation/dtos/userproject.dto.ts",{"_index":1330,"title":{},"body":{"coverage.html":{},"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.dto.ts:12",{"_index":1540,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.dto.ts:15",{"_index":1542,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.dto.ts:6",{"_index":1544,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.dto.ts:9",{"_index":1541,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/filters/http",{"_index":527,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/presentation/guards/auth.guard.ts",{"_index":432,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/presentation/guards/auth.guard.ts:12",{"_index":436,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/presentation/guards/auth.guard.ts:15",{"_index":439,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/presentation/guards/auth.guard.ts:34",{"_index":442,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/presentation/interceptors/response.interceptor.ts",{"_index":856,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/presentation/interceptors/response.interceptor.ts:12",{"_index":864,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/presentation/interceptors/response.interceptor.ts:27",{"_index":860,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["ssl",{"_index":482,"title":{},"body":{"injectables/EmailService.html":{}}}],["start",{"_index":1396,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1399,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1400,"title":{},"body":{"index.html":{}}}],["started",{"_index":1375,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1387,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1303,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":541,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["statuscode",{"_index":544,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["stay",{"_index":1420,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":502,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["string",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["stripe",{"_index":1368,"title":{},"body":{"dependencies.html":{}}}],["strong",{"_index":974,"title":{},"body":{"classes/Tenant.html":{}}}],["sub",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":468,"title":{},"body":{"injectables/EmailService.html":{}}}],["success",{"_index":1196,"title":{},"body":{"controllers/UserController.html":{}}}],["successfully",{"_index":881,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"controllers/UserController.html":{}}}],["supabase",{"_index":554,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["supabase.storage",{"_index":557,"title":{},"body":{"injectables/ImageService.html":{}}}],["supabase/supabase",{"_index":1342,"title":{},"body":{"dependencies.html":{}}}],["supabase/supabaseclient",{"_index":555,"title":{},"body":{"injectables/ImageService.html":{}}}],["supabasekey",{"_index":1318,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["supabaseurl",{"_index":1319,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":508,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["support",{"_index":1413,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1430,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":877,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["table",{"_index":1333,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1332,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":970,"title":{},"body":{"classes/Tenant.html":{}}}],["targetproject",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["targetproject.callbackurl",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetproject.deleted",{"_index":1194,"title":{},"body":{"controllers/UserController.html":{}}}],["targetproject.push(project",{"_index":1283,"title":{},"body":{"injectables/UsersService.html":{}}}],["targettenant",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"injectables/TenantsService.html":{}}}],["targettenant.email",{"_index":1099,"title":{},"body":{"injectables/TenantsService.html":{}}}],["targettenant.projects.find",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["targetuser",{"_index":1285,"title":{},"body":{"injectables/UsersService.html":{}}}],["targetuser.email",{"_index":1287,"title":{},"body":{"injectables/UsersService.html":{}}}],["tenant",{"_index":329,"title":{"classes/Tenant.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tenant._id",{"_index":841,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["tenant.confirmpassword",{"_index":1124,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.deleted",{"_index":1126,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.image",{"_index":1136,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.module",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/UserModule.html":{}}}],["tenant.name",{"_index":1057,"title":{},"body":{"modules/TenantModule.html":{}}}],["tenant.password",{"_index":1116,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.projects",{"_index":767,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.projects.find",{"_index":1131,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["tenant.projects.find((proj",{"_index":773,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.projects.length",{"_index":766,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.projects.push(createdproject",{"_index":761,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.save",{"_index":762,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{}}}],["tenantafterupdate",{"_index":1106,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenantcontroller",{"_index":977,"title":{"controllers/TenantController.html":{}},"body":{"controllers/TenantController.html":{},"modules/TenantModule.html":{},"coverage.html":{}}}],["tenantdocument",{"_index":932,"title":{},"body":{"classes/Tenant.html":{},"injectables/TenantsService.html":{},"miscellaneous/typealiases.html":{}}}],["tenantid",{"_index":735,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"classes/projectModel.html":{}}}],["tenantmodel",{"_index":120,"title":{"classes/tenantModel.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"coverage.html":{},"classes/tenantModel.html":{}}}],["tenantmodule",{"_index":15,"title":{"modules/TenantModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["tenants",{"_index":827,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["tenants.service",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["tenants.some((item",{"_index":1112,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenantschema",{"_index":957,"title":{},"body":{"classes/Tenant.html":{},"modules/TenantModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tenantschema.post('save",{"_index":964,"title":{},"body":{"classes/Tenant.html":{}}}],["tenantschema.pre('save",{"_index":959,"title":{},"body":{"classes/Tenant.html":{}}}],["tenantservice",{"_index":819,"title":{},"body":{"controllers/ProjectsController.html":{},"injectables/UsersService.html":{}}}],["tenantsignupdto",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tenantsignupdto.confirmpassword",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["tenantsignupdto.email",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["tenantsignupdto.password",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["tenantsignupdto.role",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["tenantsservice",{"_index":49,"title":{"injectables/TenantsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":1403,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1406,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1405,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1402,"title":{},"body":{"index.html":{}}}],["text",{"_index":469,"title":{},"body":{"injectables/EmailService.html":{}}}],["thanks",{"_index":1411,"title":{},"body":{"index.html":{}}}],["this.authservice.processauth(projectid",{"_index":1195,"title":{},"body":{"controllers/UserController.html":{}}}],["this.authservice.resetpassword",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendresetpasswordresetemail(email",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto.email",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinwithgoogle(user1",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupastenant(tenantsignupdto",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupasuser(usersignupdto",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validategithubuser(profile",{"_index":515,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["this.authservice.validategoogleuser(profile",{"_index":524,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["this.configservice.get('gmail_pass",{"_index":489,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('gmail_user",{"_index":487,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.confirmpassword",{"_index":949,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["this.emailservice.sendmail",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ensureindexes",{"_index":575,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.extracttenantid(authheader",{"_index":822,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.extracttokenfromheader(request",{"_index":448,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.findall",{"_index":1038,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{}}}],["this.findallpertenant(tenantid",{"_index":764,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.findbyemail(newemail",{"_index":1098,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["this.findbyid(id",{"_index":1097,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["this.getmessage(statuscode",{"_index":874,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["this.getuserprojects((await",{"_index":1276,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getuserprojects(user.projects",{"_index":1273,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.imageservice.upload('tenants",{"_index":1135,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.imageservice.upload('users",{"_index":1299,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.ismodified('password",{"_index":960,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["this.jwtservice.sign",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["this.jwtservice.verify(token).sub",{"_index":1025,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":449,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.password",{"_index":961,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["this.paypalclient",{"_index":643,"title":{},"body":{"injectables/PaypalService.html":{}}}],["this.paypalclient.execute(request",{"_index":655,"title":{},"body":{"injectables/PaypalService.html":{}}}],["this.paypalservice.captureorder(orderid",{"_index":608,"title":{},"body":{"controllers/PaypalController.html":{}}}],["this.paypalservice.createorder",{"_index":601,"title":{},"body":{"controllers/PaypalController.html":{}}}],["this.paypaltransactionmodel(data",{"_index":704,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["this.paypaltransactionservice.createtransaction(transactiondata",{"_index":669,"title":{},"body":{"injectables/PaypalService.html":{}}}],["this.projectmodel",{"_index":759,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectservice.create",{"_index":824,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.delete(id",{"_index":846,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.findallpertenant(tenantid",{"_index":832,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.findone(id",{"_index":834,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.findone(projectid",{"_index":1193,"title":{},"body":{"controllers/UserController.html":{}}}],["this.projectservice.undelete(id",{"_index":842,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.update",{"_index":836,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.signin(tenantsignupdto.email",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signin(usersignupdto.email",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tenantmodel",{"_index":768,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{}}}],["this.tenantmodel(createtenantdto",{"_index":1088,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantmodel.find().exec",{"_index":1092,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantmodel.findbyid(id).exec",{"_index":1090,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantmodel.findbyid(tenantid",{"_index":755,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.tenantmodel.findone",{"_index":1091,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantservice.findall",{"_index":828,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.tenantservice.findbyid(userid",{"_index":845,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.tenantservice.findtenantbyprojectid",{"_index":1279,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.tenantservice.findtenantbyprojectid(id",{"_index":839,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.tenantsservice.addimage(id",{"_index":1049,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.authorizeclient",{"_index":1043,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.create(tenantsignupdto",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tenantsservice.findall",{"_index":1019,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.findbyemail(decoded.email",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tenantsservice.findbyemail(email",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TenantController.html":{}}}],["this.tenantsservice.findbyid(id",{"_index":1021,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.findtenantbyprojectid(projectid",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TenantController.html":{}}}],["this.tenantsservice.remove(id",{"_index":1040,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.undelete(id",{"_index":1037,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.update",{"_index":1027,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.updatewithpassword",{"_index":1036,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.transporter",{"_index":473,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.transporter.sendmail",{"_index":490,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.usermodel",{"_index":1289,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel(createuserdto",{"_index":1268,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.collection.createindex",{"_index":581,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.usermodel.collection.dropindex('githubid_1",{"_index":580,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.usermodel.collection.dropindex('googleid_1",{"_index":576,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.usermodel.find().exec",{"_index":1271,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id).exec",{"_index":1274,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1277,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.addimage(id",{"_index":1204,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1187,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":1191,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(id",{"_index":1188,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(userid",{"_index":837,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.userservice.remove(id",{"_index":1203,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.undelete(id",{"_index":1202,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":1200,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatewithpassword",{"_index":1201,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.create",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(usersignupdto",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.creategithubuser",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyemail(decoded.email",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyemail(email",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbygithubid(id",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbygoogleid(id",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyid(userid",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.findid(userid",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.save(user",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["timestamps",{"_index":722,"title":{},"body":{"classes/Project.html":{}}}],["tls",{"_index":481,"title":{},"body":{"injectables/EmailService.html":{}}}],["token",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["tokens",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["touch",{"_index":1421,"title":{},"body":{"index.html":{}}}],["transaction.service",{"_index":622,"title":{},"body":{"modules/PaypalModule.html":{},"injectables/PaypalService.html":{}}}],["transaction.service.ts",{"_index":695,"title":{},"body":{"injectables/PaypalTransactionService.html":{},"coverage.html":{}}}],["transaction.service.ts:10",{"_index":698,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["transaction.service.ts:16",{"_index":701,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["transactiondata",{"_index":658,"title":{},"body":{"injectables/PaypalService.html":{}}}],["transformer",{"_index":1017,"title":{},"body":{"controllers/TenantController.html":{},"dependencies.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["transporter",{"_index":462,"title":{},"body":{"injectables/EmailService.html":{}}}],["true",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/IndexManagementService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["true})@isstring()@isnotempty",{"_index":715,"title":{},"body":{"classes/Project.html":{}}}],["true})@isstring()@isurl()@isnotempty",{"_index":708,"title":{},"body":{"classes/Project.html":{}}}],["true})@type(undefined",{"_index":1504,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["true})@type(undefined)@isoptional",{"_index":1468,"title":{},"body":{"classes/tenantModel.html":{}}}],["try",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1426,"title":{},"body":{"index.html":{}}}],["type",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1483,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["types.objectid",{"_index":673,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["typescript",{"_index":1386,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"controllers/ProjectsController.html":{}}}],["unauthorizedexception('account",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('user",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":443,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["undelete",{"_index":730,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["undelete(id",{"_index":744,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["unhashedconfirmpassword",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["unhashedpassword",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IndexManagementService.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["unit",{"_index":1401,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["unlicensed",{"_index":1450,"title":{},"body":{"properties.html":{}}}],["update",{"_index":731,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["update(id",{"_index":746,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["update(updatetenantdto",{"_index":1000,"title":{},"body":{"controllers/TenantController.html":{}}}],["update(updateuserdto",{"_index":1177,"title":{},"body":{"controllers/UserController.html":{}}}],["updated",{"_index":885,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["updatedat",{"_index":1214,"title":{},"body":{"classes/UserProject.html":{}}}],["updatedtenant",{"_index":1026,"title":{},"body":{"controllers/TenantController.html":{}}}],["updateduser",{"_index":1199,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprojectdto",{"_index":747,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["updatetenantdto",{"_index":1003,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["updatetenantdto.confirmnewpassword",{"_index":1120,"title":{},"body":{"injectables/TenantsService.html":{}}}],["updatetenantdto.email",{"_index":1095,"title":{},"body":{"injectables/TenantsService.html":{}}}],["updatetenantdto.name",{"_index":1102,"title":{},"body":{"injectables/TenantsService.html":{}}}],["updatetenantdto.newpassword",{"_index":1119,"title":{},"body":{"injectables/TenantsService.html":{}}}],["updatetenantdto.oldpassword",{"_index":1113,"title":{},"body":{"injectables/TenantsService.html":{}}}],["updatetenantmodel",{"_index":1005,"title":{"classes/updateTenantModel.html":{}},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"coverage.html":{},"classes/updateTenantModel.html":{}}}],["updateuserdto",{"_index":1179,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["updateuserdto.confirmnewpassword",{"_index":1295,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.email",{"_index":1286,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.newpassword",{"_index":1294,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.oldpassword",{"_index":1291,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateusermodel",{"_index":1181,"title":{"classes/updateUserModel.html":{}},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateUserModel.html":{}}}],["updatewithpassword",{"_index":984,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["updatewithpassword(id",{"_index":1081,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["updatewithpassword(updatetenantdto",{"_index":1004,"title":{},"body":{"controllers/TenantController.html":{}}}],["updatewithpassword(updateuserdto",{"_index":1180,"title":{},"body":{"controllers/UserController.html":{}}}],["updating",{"_index":886,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":549,"title":{},"body":{"injectables/ImageService.html":{}}}],["upload(`${role}/${id}/${image.originalname",{"_index":559,"title":{},"body":{"injectables/ImageService.html":{}}}],["upload(role",{"_index":551,"title":{},"body":{"injectables/ImageService.html":{}}}],["uploadedfile",{"_index":1012,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["uploadimage",{"_index":985,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["uploadimage(id",{"_index":1008,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["uppercase",{"_index":941,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["upsert",{"_index":563,"title":{},"body":{"injectables/ImageService.html":{}}}],["url",{"_index":956,"title":{},"body":{"classes/Tenant.html":{}}}],["use",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{}}}],["useguards(authenticationguard",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{}}}],["useguards(authenticationguard)@get('profile",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('github",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('google",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":1011,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":1048,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":143,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user).projects",{"_index":1275,"title":{},"body":{"injectables/UsersService.html":{}}}],["user._id",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.address",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.age",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.confirmpassword",{"_index":1297,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.deleted",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.email",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.image",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.module",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{}}}],["user.name",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"modules/UserModule.html":{}}}],["user.password",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.phone",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.projects",{"_index":1272,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.projects.find",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.projects.push(userproject",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.resetpasswordexpires",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.resetpasswordtoken",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{}}}],["user.save",{"_index":1284,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.website",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["user1",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["user:email",{"_index":514,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["userafterupdate",{"_index":1288,"title":{},"body":{"injectables/UsersService.html":{}}}],["usercontroller",{"_index":1166,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":573,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{}}}],["usermodel",{"_index":125,"title":{"classes/userModel.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/IndexManagementService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/userModel.html":{}}}],["usermodule",{"_index":16,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["userproject",{"_index":182,"title":{"classes/UserProject.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/User.html":{},"classes/UserProject.html":{},"coverage.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["userproject.authorizationaccesstoken",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["userproject.authorizationcode",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["userproject.entity",{"_index":1159,"title":{},"body":{"classes/User.html":{}}}],["userprojectmodel",{"_index":1259,"title":{"classes/userProjectModel.html":{}},"body":{"injectables/UsersService.html":{},"coverage.html":{},"classes/userProjectModel.html":{}}}],["userprojectschema",{"_index":1224,"title":{},"body":{"classes/UserProject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":1168,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{}}}],["userschema",{"_index":1163,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.pre('save",{"_index":1165,"title":{},"body":{"classes/User.html":{}}}],["userservice",{"_index":495,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{}}}],["usersignupdto",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["usersignupdto.confirmpassword",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignupdto.email",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignupdto.password",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignupdto.role",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersservice",{"_index":48,"title":{"injectables/UsersService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["v4",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["valid",{"_index":935,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["validate",{"_index":494,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["validate(accesstoken",{"_index":497,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["validatebeforesave",{"_index":1270,"title":{},"body":{"injectables/UsersService.html":{}}}],["validategithubuser",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategithubuser(profile",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategoogleuser",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategoogleuser(profile",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatemodifiedonly",{"_index":781,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["validatenested",{"_index":1479,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["validator",{"_index":721,"title":{},"body":{"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"dependencies.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["value",{"_index":653,"title":{},"body":{"injectables/PaypalService.html":{},"classes/Tenant.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1305,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1545,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifycallback",{"_index":503,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["verifytoken",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifytoken(token",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1448,"title":{},"body":{"properties.html":{}}}],["void",{"_index":535,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["watch",{"_index":1397,"title":{},"body":{"index.html":{}}}],["we're",{"_index":450,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["weak",{"_index":1499,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["website",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"classes/Tenant.html":{},"index.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["www\\.[a",{"_index":952,"title":{},"body":{"classes/Tenant.html":{}}}],["you'd",{"_index":1416,"title":{},"body":{"index.html":{}}}],["z",{"_index":955,"title":{},"body":{"classes/Tenant.html":{}}}],["z0",{"_index":953,"title":{},"body":{"classes/Tenant.html":{}}}],["z\\d@$!%*?&]{8",{"_index":1498,"title":{},"body":{"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["z\\d@$!%*?&]{8,}$/.test(value",{"_index":939,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["z\\d@$!%?&]{8",{"_index":1461,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["z])(?=.*[a",{"_index":936,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":1497,"title":{},"body":{"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["z])(?=.*\\d)[a",{"_index":937,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["z])(?=.[a",{"_index":1459,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["z])(?=.\\d)(?=.[@$!%?&])[a",{"_index":1460,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["za",{"_index":938,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["zoom",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPaypalModule\n\nPaypalModule\n\nAppModule -->\n\nPaypalModule->AppModule\n\n\n\n\n\nProjectsModule\n\nProjectsModule\n\nAppModule -->\n\nProjectsModule->AppModule\n\n\n\n\n\nTenantModule\n\nTenantModule\n\nAppModule -->\n\nTenantModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PaypalModule\n                        \n                        \n                            ProjectsModule\n                        \n                        \n                            TenantModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserModule } from './modules/user.module';\nimport { TenantModule } from './modules/tenant.module';\nimport { ProjectsModule } from './modules/project.module';\nimport { AuthModule } from './modules/auth.module';\nimport { ImageService } from './infrastructure/services/image.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { IndexManagementService } from './infrastructure/services/indexManagement.service';\nimport { PaypalModule } from './modules/paypal.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRoot('mongodb://localhost:27017/AuthGate'),\n    UserModule,\n    ProjectsModule,\n    TenantModule,\n    AuthModule,\n    PaypalModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n// providers: [ProjectService, UsersService, TenantsService, AuthService],\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                exchangeCodeWithToken\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                githubAuthCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                googleAuthCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                loginWithGitHub\n                            \n                            \n                                    \n                                    \n                                    Async\n                                loginWithGoogle\n                            \n                            \n                                    \n                                    Async\n                                resetPassword\n                            \n                            \n                                    \n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    \n                                    \n                                signIn\n                            \n                            \n                                    \n                                    \n                                signUpAsTenant\n                            \n                            \n                                    \n                                    \n                                signUpAsUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        exchangeCodeWithToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    exchangeCodeWithToken(obj: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('authcode')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthenticationGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        githubAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    githubAuthCallback(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github/callback')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        googleAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuthCallback(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/callback')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        loginWithGitHub\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginWithGitHub()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        loginWithGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginWithGoogle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(token: string, newPassword: string, confirmNewPassword: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmNewPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        sendPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendPasswordResetEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password/request')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signUpAsTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsTenant(tenantSignUpDto: tenantModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('registertenant')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantSignUpDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signUpAsUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsUser(userSignUpDto: userModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('registeruser')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userSignUpDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Req,\n  Request,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthenticationGuard } from '../guards/auth.guard';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { SignInRequest } from '../dtos/signInRequest.dto';\nimport { userModel } from '../dtos/user.model';\nimport { tenantModel } from '../dtos/tenant.model';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Types } from 'mongoose';\nimport { AuthGuard } from '@nestjs/passport';\nimport { JwtService } from '@nestjs/jwt';\nimport { Response } from 'express';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: SignInRequest) {\n    return this.authService.signIn(signInDto.email, signInDto.password);\n  }\n\n  @UseGuards(AuthenticationGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('registeruser')\n  signUpAsUser(@Body() userSignUpDto: userModel) {\n    return this.authService.signUpAsUser(userSignUpDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('registertenant')\n  signUpAsTenant(@Body() tenantSignUpDto: tenantModel) {\n    return this.authService.signUpAsTenant(tenantSignUpDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('authcode')\n  async exchangeCodeWithToken(\n    @Body() obj: { projectId: string; userId: string; authCode: string },\n  ) {\n    const { projectId, userId, authCode } = obj;\n    const user: userModel = await this.usersService.findById(userId);\n    if (!user) throw new BadRequestException('user does not exist');\n\n    const userProject = user.projects.find(\n      (project) => project.projectID.toString() === projectId,\n    );\n\n    if (userProject.authorizationCode == authCode) {\n      return {\n        auth_token: userProject.authorizationAccessToken,\n      };\n    }\n  }\n\n  @Get('github')\n  @UseGuards(AuthGuard('github'))\n  async loginWithGitHub() {\n    //\n  }\n  @Get('github/callback')\n  @UseGuards(AuthGuard('github'))\n  async githubAuthCallback(@Req() req, @Res() res: Response) {\n    const user1 = req.user;\n    const { access_token, user } =\n      await this.authService.signInWithGoogle(user1);\n\n    // Redirect to the Angular frontend with tokens in query parameters\n    const redirectUrl = `http://localhost:4200/auth/github/callback?token=${access_token}&user=${JSON.stringify(user)}`;\n\n    return res.redirect(redirectUrl);\n  }\n\n  @Get('google')\n  @UseGuards(AuthGuard('google'))\n  async loginWithGoogle() {\n    // Initiates Google OAuth flow\n  }\n\n  @Get('google/callback')\n  @UseGuards(AuthGuard('google'))\n  async googleAuthCallback(@Req() req, @Res() res: Response) {\n    const user1 = req.user;\n    const { access_token, user } =\n      await this.authService.signInWithGoogle(user1);\n\n    // Redirect to the Angular frontend with tokens in query parameters\n    const redirectUrl = `http://localhost:4200/auth/google/callback?token=${access_token}&user=${JSON.stringify(user)}`;\n\n    return res.redirect(redirectUrl);\n  }\n\n  @Post('reset-password/request')\n  async sendPasswordResetEmail(@Body('email') email: string): Promise {\n    await this.authService.sendResetPasswordResetEmail(email);\n  }\n\n  @Post('reset-password')\n  async resetPassword(\n    @Body('token') token: string,\n    @Body('newPassword') newPassword: string,\n    @Body('confirmNewPassword') confirmNewPassword: string,\n  ): Promise {\n    await this.authService.resetPassword(\n      token,\n      newPassword,\n      confirmNewPassword,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nProjectsModule\n\nProjectsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nProjectsModule->AuthModule\n\n\n\n\n\nTenantModule\n\nTenantModule\n\nAuthModule -->\n\nTenantModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\n\n\nGithubAuthStrategy\n\nGithubAuthStrategy\n\nAuthModule -->\n\nGithubAuthStrategy->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            GithubAuthStrategy\n                        \n                        \n                            GoogleAuthStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ProjectsModule\n                        \n                        \n                            TenantModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from 'src/constants';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { AuthController } from 'src/presentation/controllers/auth.controller';\nimport { UserModule } from './user.module';\nimport { TenantModule } from './tenant.module';\nimport { ProjectsModule } from './project.module';\nimport { GithubAuthStrategy } from 'src/infrastructure/Strategies/githubAuth.strategy';\nimport { GoogleAuthStrategy } from 'src/infrastructure/Strategies/googleAuth.strategy';\nimport { EmailService } from 'src/infrastructure/services/email.service';\n\n@Module({\n  imports: [\n    UserModule,\n    TenantModule,\n    ProjectsModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1d' },\n    }),\n  ],\n  providers: [\n    AuthService,\n    GithubAuthStrategy,\n    GoogleAuthStrategy,\n    EmailService,\n  ],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                processAuth\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                sendResetPasswordResetEmail\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signInWithGitHub\n                            \n                            \n                                    Async\n                                signInWithGoogle\n                            \n                            \n                                    Async\n                                signUpAsTenant\n                            \n                            \n                                    Async\n                                signUpAsUser\n                            \n                            \n                                    Async\n                                validateGitHubUser\n                            \n                            \n                                    Async\n                                validateGoogleUser\n                            \n                            \n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, tenantsService: TenantsService, jwtService: JwtService, emailService: EmailService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/auth.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantsService\n                                                  \n                                                        \n                                                                        TenantsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    processAuth(projectId: any, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(token: string, newPassword: string, confirmNewPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:348\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmNewPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendResetPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendResetPasswordResetEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:322\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInWithGitHub\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInWithGitHub(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:253\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInWithGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInWithGoogle(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:299\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUpAsTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsTenant(tenantSignUpDto: tenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantSignUpDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUpAsUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsUser(userSignUpDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userSignUpDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateGitHubUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateGitHubUser(profile: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:229\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateGoogleUser(profile: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:275\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyToken\n                        \n                    \n                \n            \n            \n                \nverifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n  Scope,\n  ScopeOptions,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from './users.service';\nimport { SignInUserResponse } from 'src/presentation/dtos/signInUserResponse.dto';\nimport { SignInTenantResponse } from 'src/presentation/dtos/signInTenantResponse.dto';\nimport { TenantsService } from './tenants.service';\nimport { userModel } from 'src/presentation/dtos/user.model';\nimport { tenantModel } from 'src/presentation/dtos/tenant.model';\nimport * as bcrypt from 'bcrypt';\nimport * as crypto from 'crypto';\nimport { v4 as uuidv4 } from 'uuid';\nimport { UserProject } from 'src/domain/entities/userProject.entity';\nimport { projectModel } from 'src/presentation/dtos/project.model';\nimport { User } from 'src/domain/entities/user.entity';\nimport { EmailService } from './email.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private tenantsService: TenantsService,\n    private jwtService: JwtService,\n    private emailService: EmailService,\n  ) {}\n\n  verifyToken(token: string): any {\n    try {\n      return this.jwtService.verify(token);\n    } catch (error) {\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n\n  async signIn(\n    email: string,\n    password: string,\n  ): Promise {\n    let user: any = await this.usersService.findByEmail(email);\n\n    if (!user) {\n      user = await this.tenantsService.findByEmail(email);\n    }\n\n    if (!user || user.deleted) {\n      throw new UnauthorizedException('Account not found or has been deleted');\n    }\n\n    const isPasswordMatch = await bcrypt.compare(password, user.password);\n\n    if (!isPasswordMatch) throw new UnauthorizedException();\n\n    const payload = {\n      sub: user.id,\n      email: user.email,\n      name: user.name,\n      role: user.role,\n    };\n\n    let signInResponse: SignInUserResponse | SignInTenantResponse;\n\n    if (user.role === 'user') {\n      signInResponse = {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        image: user.image,\n        age: user.age,\n        role: 'user',\n      };\n    } else if (user.role === 'tenant') {\n      signInResponse = {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        image: user.image,\n        website: user.website,\n        address: user.address,\n        role: 'tenant',\n      };\n    } else if (user.role === 'admin') {\n      signInResponse = {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        image: user.image,\n        website: user.website,\n        address: user.address,\n        role: 'admin',\n      };\n    }\n\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n      user: signInResponse,\n    };\n  }\n\n  async signUpAsUser(userSignUpDto: userModel) {\n    const salt = 10;\n    const hashedPassword = await bcrypt.hash(userSignUpDto.password, salt);\n    const email = userSignUpDto.email;\n    const unhashedPassword = userSignUpDto.password;\n    const unhashedConfirmPassword = userSignUpDto.confirmPassword;\n    userSignUpDto.password = hashedPassword;\n    userSignUpDto.confirmPassword = hashedPassword;\n    userSignUpDto.role = 'user';\n\n    if (unhashedPassword !== unhashedConfirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const existingUser = await this.usersService.findByEmail(email);\n    if (existingUser) {\n      throw new ConflictException('Email already in use');\n    }\n\n    const user = await this.usersService.create(userSignUpDto);\n    if (user) {\n      return this.signIn(userSignUpDto.email, unhashedPassword);\n    } else {\n      throw new BadRequestException();\n    }\n  }\n\n  async signUpAsTenant(tenantSignUpDto: tenantModel) {\n    const salt = 10;\n    const hashedPassword = await bcrypt.hash(tenantSignUpDto.password, salt);\n    const email = tenantSignUpDto.email;\n    const unhashedPassword = tenantSignUpDto.password;\n    const unhashedConfirmPassword = tenantSignUpDto.confirmPassword;\n    tenantSignUpDto.password = hashedPassword;\n    tenantSignUpDto.confirmPassword = hashedPassword;\n    tenantSignUpDto.role = 'tenant';\n    if (unhashedPassword !== unhashedConfirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const existingTenant = await this.tenantsService.findByEmail(email);\n    if (existingTenant) {\n      throw new ConflictException('Email already in use');\n    }\n\n    const tenant = await this.tenantsService.create(tenantSignUpDto);\n    if (tenant) return this.signIn(tenantSignUpDto.email, unhashedPassword);\n    else throw new BadRequestException();\n  }\n\n  async processAuth(projectId: any, token: string): Promise {\n    let userproject: UserProject;\n    let payload;\n\n    try {\n      payload = this.jwtService.verify(token);\n    } catch (error) {\n      throw new UnauthorizedException('Invalid token');\n    }\n\n    const userId = payload.sub;\n    const user = await this.usersService.findId(userId);\n\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    const projectID = projectId;\n    const authorizationCode = uuidv4();\n    const authorizationAccessToken = crypto.randomBytes(32).toString('hex');\n    const expireDate = new Date();\n    expireDate.setHours(expireDate.getHours() + 24);\n\n    if (projectID) {\n      userproject = {\n        projectID,\n        authorizationCode,\n        authorizationAccessToken,\n        expireDate,\n      };\n    }\n\n    const userProject = user.projects.find(\n      (project) => project.projectID === projectID,\n    );\n\n    if (!userProject) {\n      user.projects.push(userproject);\n    }\n\n    await this.usersService.save(user);\n\n    const targetTenant =\n      await this.tenantsService.findTenantByProjectId(projectId);\n\n    if (!targetTenant) {\n      throw new ConflictException('Tenant not found for the given project ID');\n    }\n\n    const targetProject: projectModel | any = targetTenant.projects.find(\n      (project) => project._id.toString() === projectId,\n    );\n\n    if (!targetProject) {\n      throw new ConflictException('Project not found in tenant');\n    }\n\n    const callbackUrl = targetProject.callBackUrl;\n\n    return {\n      userId,\n      projectID,\n      callbackUrl,\n      authorizationCode,\n    };\n  }\n  async validateGitHubUser(profile: any): Promise {\n    const { id, username, displayName, emails, photos } = profile;\n    // Find user by GitHub ID\n    let user = await this.usersService.findByGitHubId(id);\n    if (!user) {\n      // If user doesn't exist, create a new one\n      // let email;\n      // if (emails) email = emails && emails[0] && emails[0].value;\n      // else email = `${id}provided@github.com`;\n      const hashedPassword = await bcrypt.hash(uuidv4(), 10);\n\n      user = await this.usersService.createGithubUser({\n        name: displayName || username,\n        githubId: id,\n        image: photos && photos[0] && photos[0].value,\n        password: hashedPassword,\n        confirmPassword: hashedPassword,\n        role: 'user',\n        email: '',\n      });\n    }\n\n    return user;\n  }\n  async signInWithGitHub(\n    user: User,\n  ): Promise {\n    const payload = {\n      sub: user._id,\n      email: user.email,\n      name: user.name,\n      role: 'user',\n    };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n      user: {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        image: user.image,\n        age: user.age,\n        role: 'user',\n      },\n    };\n  }\n  async validateGoogleUser(profile: any): Promise {\n    const { id, displayName, emails, photos } = profile;\n\n    // Find user by Google ID\n    let user = await this.usersService.findByGoogleId(id);\n    if (!user) {\n      // If user doesn't exist, create a new one\n      const email = emails && emails[0] && emails[0].value;\n      const hashedPassword = await bcrypt.hash(uuidv4(), 10);\n\n      user = await this.usersService.create({\n        name: displayName,\n        email: email,\n        googleId: id,\n        image: photos && photos[0] && photos[0].value,\n        password: hashedPassword,\n        confirmPassword: hashedPassword,\n        role: 'user',\n      });\n    }\n\n    return user;\n  }\n\n  async signInWithGoogle(\n    user: User,\n  ): Promise {\n    const payload = {\n      sub: user._id,\n      email: user.email,\n      name: user.name,\n      role: 'user',\n    };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n      user: {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        image: user.image,\n        age: user.age,\n        role: 'user',\n      },\n    };\n  }\n\n  async sendResetPasswordResetEmail(email: string): Promise {\n    let user: any = await this.usersService.findByEmail(email);\n    if (!user) {\n      user = await this.tenantsService.findByEmail(email);\n    }\n    if (!user) {\n      throw new Error(`User ${email} not found`);\n    }\n\n    //generate a unique token for reset link\n    const resetToken = this.jwtService.sign(\n      { email },\n      { secret: process.env.PASSWORD_RESET_JWT_SECRET, expiresIn: '1h' },\n    );\n    user.resetPasswordToken = resetToken;\n    user.resetPasswordExpires = new Date(Date.now() + 3600000);\n    await this.usersService.save(user);\n    //reset link\n    const resetLink = `http://localhost:4200/reset-password/${resetToken}`;\n    await this.emailService.sendMail(\n      user.email,\n      'Password Reset Request',\n      `Click the following link to reset your password:\\n ${resetLink}`,\n    );\n  }\n\n  async resetPassword(\n    token: string,\n    newPassword: string,\n    confirmNewPassword: string,\n  ): Promise {\n    const decoded = this.jwtService.verify(token, {\n      secret: process.env.PASSWORD_RESET_JWT_SECRET,\n    });\n    let user: any = await this.usersService.findByEmail(decoded.email);\n    if (!user) {\n      user = await this.tenantsService.findByEmail(decoded.email);\n    }\n    if (\n      !user ||\n      user.resetPasswordToken !== token ||\n      user.resetPasswordExpires \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/presentation/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/presentation/guards/auth.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/guards/auth.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/guards/auth.guard.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from '../../constants';\nimport { Request } from 'express';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(private jwtService: JwtService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      // 💡 We're assigning the payload to the request object here\n      // so that we can access it in our route handlers\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/email.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMail(to: string, subject: string, text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/email.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     nodemailer.Transporter\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/services/email.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as nodemailer from 'nodemailer';\n\n@Injectable()\nexport class EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor(private configService: ConfigService) {\n    this.transporter = nodemailer.createTransport({\n      host: 'smtp.office365.com', // e.g., 'smtp.gmail.com'\n      port: 587, // For TLS: 587, For SSL: 465\n      secure: false, // true for 465, false for other ports\n      auth: {\n        user: this.configService.get('GMAIL_USER'),\n        pass: this.configService.get('GMAIL_PASS'),\n      },\n    });\n  }\n\n  async sendMail(to: string, subject: string, text: string): Promise {\n    await this.transporter.sendMail({\n      from: this.configService.get('GMAIL_USER'),\n      to,\n      subject,\n      text,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubAuthStrategy.html":{"url":"injectables/GithubAuthStrategy.html","title":"injectable - GithubAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GithubAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Strategies/githubAuth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'github')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, jwtService: JwtService, userService: UsersService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/Strategies/githubAuth.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/Strategies/githubAuth.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback, Profile } from 'passport-github';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from '../services/users.service';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class GithubAuthStrategy extends PassportStrategy(Strategy, 'github') {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly jwtService: JwtService,\n    private readonly userService: UsersService,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      clientID: configService.get('GITHUB_CLIENT_ID'),\n      clientSecret: configService.get('GITHUB_CLIENT_SECRET'),\n      callbackURL: configService.get('GITHUB_CALLBACK_URL'),\n      scope: ['user:email', 'user'],\n    });\n  }\n\n  async validate(accessToken: string, refreshToken: string, profile: Profile) {\n    const user = await this.authService.validateGitHubUser(profile);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthStrategy.html":{"url":"injectables/GoogleAuthStrategy.html","title":"injectable - GoogleAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Strategies/googleAuth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'google')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/Strategies/googleAuth.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/Strategies/googleAuth.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy, Profile } from 'passport-google-oauth20';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from '../services/auth.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class GoogleAuthStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      clientID: configService.get('GOOGLE_CLIENT_ID'),\n      clientSecret: configService.get('GOOGLE_CLIENT_SECRET'),\n      callbackURL: configService.get('GOOGLE_CALLBACK_URL'),\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(accessToken: string, refreshToken: string, profile: Profile) {\n    const user = await this.authService.validateGoogleUser(profile);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/filters/http-exception.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      message: exception.message,\n      error: exception.getResponse(),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImageService.html":{"url":"injectables/ImageService.html","title":"injectable - ImageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/image.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/image.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(role: string, id: string, image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/image.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { supabase } from '../supabase/supabaseClient';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Express } from 'express';\n\n@Injectable()\nexport class ImageService {\n  constructor() {}\n\n  async upload(role: string, id: string, image: Express.Multer.File) {\n    const { data, error } = await supabase.storage\n      .from('authgateimages')\n      .upload(`${role}/${id}/${image.originalname}`, image.buffer, {\n        cacheControl: '3600',\n        upsert: false,\n      });\n\n    if (error) {\n      return error;\n    }\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IndexManagementService.html":{"url":"injectables/IndexManagementService.html","title":"injectable - IndexManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IndexManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/indexManagement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ensureIndexes\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/indexManagement.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ensureIndexes\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureIndexes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/indexManagement.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/indexManagement.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from 'src/domain/entities/user.entity';\n\n@Injectable()\nexport class IndexManagementService implements OnModuleInit {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  async onModuleInit() {\n    await this.ensureIndexes();\n  }\n\n  async ensureIndexes() {\n    try {\n      await this.userModel.collection.dropIndex('googleId_1');\n    } catch (error) {\n      if (error.code !== 27) {\n        // 27 is the code for \"index not found\"\n        throw error;\n      }\n    }\n\n    try {\n      await this.userModel.collection.dropIndex('githubId_1');\n    } catch (error) {\n      if (error.code !== 27) {\n        // 27 is the code for \"index not found\"\n        throw error;\n      }\n    }\n\n    await this.userModel.collection.createIndex(\n      { googleId: 1 },\n      { unique: true, sparse: true },\n    );\n    await this.userModel.collection.createIndex(\n      { githubId: 1 },\n      { unique: true, sparse: true },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaypalController.html":{"url":"controllers/PaypalController.html","title":"controller - PaypalController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaypalController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/paypal.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                paypal\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                captureOrder\n                            \n                            \n                                    \n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        captureOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    captureOrder(orderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('capture-order/:orderId')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/paypal.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-order')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/paypal.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Param } from '@nestjs/common';\nimport { PaypalService } from 'src/infrastructure/paypal/paypal.service';\n\n@Controller('paypal')\nexport class PaypalController {\n  constructor(private readonly paypalService: PaypalService) {}\n\n  @Post('create-order')\n  async createOrder() {\n    const order = await this.paypalService.createOrder();\n    return {\n      id: order.id,\n      status: order.status,\n      links: order.links,\n    };\n  }\n\n  @Post('capture-order/:orderId')\n  async captureOrder(@Param('orderId') orderId: string) {\n    const capture = await this.paypalService.captureOrder(orderId);\n    return {\n      id: capture.id,\n      status: capture.status,\n      payer: capture.payer,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaypalModule.html":{"url":"modules/PaypalModule.html","title":"module - PaypalModule","body":"\n                   \n\n\n\n\n    Modules\n    PaypalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaypalModule\n\n\n\ncluster_PaypalModule_providers\n\n\n\n\nPaypalService\n\nPaypalService\n\n\n\nPaypalModule\n\nPaypalModule\n\nPaypalModule -->\n\nPaypalService->PaypalModule\n\n\n\n\n\nPaypalTransactionService\n\nPaypalTransactionService\n\nPaypalModule -->\n\nPaypalTransactionService->PaypalModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/paypal.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaypalService\n                        \n                        \n                            PaypalTransactionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaypalController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PaypalService } from 'src/infrastructure/paypal/paypal.service';\nimport { PaypalController } from 'src/presentation/controllers/paypal.controller';\nimport {\n  PaypalTransactionSchema,\n  PaypalTransaction,\n} from 'src/domain/entities/paypal.entity';\nimport { PaypalTransactionService } from 'src/infrastructure/paypal/paypal-transaction.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: PaypalTransaction.name, schema: PaypalTransactionSchema },\n    ]),\n  ],\n  controllers: [PaypalController],\n  providers: [PaypalService, PaypalTransactionService],\n})\nexport class PaypalModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaypalService.html":{"url":"injectables/PaypalService.html","title":"injectable - PaypalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaypalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/paypal/paypal.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                payPalClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                captureOrder\n                            \n                            \n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paypalTransactionService: PaypalTransactionService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/paypal/paypal.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paypalTransactionService\n                                                  \n                                                        \n                                                                        PaypalTransactionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        captureOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    captureOrder(orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/paypal/paypal.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/paypal/paypal.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        payPalClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     paypal.core.PayPalHttpClient\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/paypal/paypal.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as paypal from '@paypal/checkout-server-sdk';\nimport { Environment } from '@paypal/checkout-server-sdk';\nimport { PaypalTransactionService } from './paypal-transaction.service';\n\n@Injectable()\nexport class PaypalService {\n  private payPalClient: paypal.core.PayPalHttpClient;\n\n  constructor(private paypalTransactionService: PaypalTransactionService) {\n    let environment: Environment;\n    if (process.env.NODE_ENV === 'production') {\n      environment = new paypal.core.LiveEnvironment(\n        process.env.PAYPAL_CLIENT_ID,\n        process.env.PAYPAL_CLIENT_SECRET,\n      );\n    } else {\n      environment = new paypal.core.SandboxEnvironment(\n        process.env.PAYPAL_CLIENT_ID,\n        process.env.PAYPAL_CLIENT_SECRET,\n      );\n    }\n    this.payPalClient = new paypal.core.PayPalHttpClient(environment);\n  }\n\n  async createOrder() {\n    const request = new paypal.orders.OrdersCreateRequest();\n    request.prefer('return=representation');\n    request.requestBody({\n      intent: 'CAPTURE',\n      purchase_units: [\n        {\n          amount: {\n            currency_code: 'EGP',\n            value: '10.00',\n          },\n        },\n      ],\n    });\n\n    const order = await this.payPalClient.execute(request);\n    return order.result;\n  }\n\n  async captureOrder(orderId: string) {\n    const request = new paypal.orders.OrdersCaptureRequest(orderId);\n    request.requestBody({});\n    const capture = await this.payPalClient.execute(request);\n\n    const transactionData = {\n      orderId: capture.result.id,\n      status: capture.result.status,\n      amount: capture.result.purchase_units[0].amount.value,\n      currency: capture.result.purchase_units[0].amount.currency_code,\n      payerEmail: capture.result.payer.email_address,\n      payerName: `${capture.result.payer.name.given_name} ${capture.result.payer.name.surname}`,\n    };\n\n    await this.paypalTransactionService.createTransaction(transactionData);\n\n    return capture.result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaypalTransaction.html":{"url":"classes/PaypalTransaction.html","title":"class - PaypalTransaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaypalTransaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/paypal.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                currency\n                            \n                            \n                                    \n                                orderId\n                            \n                            \n                                    \n                                payerEmail\n                            \n                            \n                                    \n                                payerName\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        payerEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        payerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\n\nexport type PaypalTransactionDocument = PaypalTransaction & Document;\n\n@Schema()\nexport class PaypalTransaction {\n  @Prop({ type: Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop({ required: true })\n  orderId: string;\n\n  @Prop({ required: true })\n  status: string;\n\n  @Prop({ required: true })\n  amount: number;\n\n  @Prop({ required: true })\n  currency: string;\n\n  @Prop({ required: true })\n  payerEmail: string;\n\n  @Prop({ required: true })\n  payerName: string;\n\n  @Prop({ default: Date.now })\n  createdAt: Date;\n}\n\nexport const PaypalTransactionSchema =\n  SchemaFactory.createForClass(PaypalTransaction);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaypalTransactionService.html":{"url":"injectables/PaypalTransactionService.html","title":"injectable - PaypalTransactionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaypalTransactionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/paypal/paypal-transaction.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paypalTransactionModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/paypal/paypal-transaction.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paypalTransactionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransaction(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/paypal/paypal-transaction.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport {\n  PaypalTransaction,\n  PaypalTransactionDocument,\n} from 'src/domain/entities/paypal.entity';\n\n@Injectable()\nexport class PaypalTransactionService {\n  constructor(\n    @InjectModel(PaypalTransaction.name)\n    private paypalTransactionModel: Model,\n  ) {}\n\n  async createTransaction(data: any): Promise {\n    const newTransaction = new this.paypalTransactionModel(data);\n    return newTransaction.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Project.html":{"url":"classes/Project.html","title":"class - Project","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Project\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/project.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                callBackUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                clientID\n                            \n                            \n                                    \n                                    \n                                    \n                                clientSECRET\n                            \n                            \n                                    \n                                deleted\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        callBackUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@IsString()@IsUrl()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        clientID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        clientSECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document, Types } from 'mongoose';\nimport { IsString, IsNotEmpty, IsUrl, IsOptional } from 'class-validator';\n\n@Schema({ timestamps: true })\nexport class Project extends Document {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop()\n  @IsString()\n  @IsOptional()\n  clientID: string;\n\n  @Prop()\n  @IsString()\n  @IsOptional()\n  clientSECRET: string;\n\n  @Prop({ required: true })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @Prop({ required: true })\n  @IsString()\n  @IsUrl()\n  @IsNotEmpty()\n  callBackUrl: string;\n\n  @Prop({ default: false })\n  deleted: boolean;\n}\n\nexport const projectSchema = SchemaFactory.createForClass(Project);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProjectService.html":{"url":"injectables/ProjectService.html","title":"injectable - ProjectService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProjectService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/project.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAllPerTenant\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                undelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(projectModel: Model, tenantModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/project.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        projectModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProjectDto: projectModel, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllPerTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllPerTenant(tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(projectID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProjectDto: projectModel, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Project } from 'src/domain/entities/project.entity';\nimport { Tenant } from 'src/domain/entities/tenant.entity';\nimport { projectModel } from 'src/presentation/dtos/project.model';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable()\nexport class ProjectService {\n  constructor(\n    @InjectModel(Project.name) private projectModel: Model,\n    @InjectModel(Tenant.name) private tenantModel: Model,\n  ) {}\n\n  async create(\n    createProjectDto: projectModel,\n    tenantID: string,\n  ): Promise {\n    const { name, callBackUrl } = createProjectDto;\n    const tenant = await this.tenantModel.findById(tenantID);\n    console.log(tenant);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant with ID ${tenantID} not found`);\n    }\n\n    const clientID = uuidv4();\n    const clientSECRET = uuidv4();\n\n    const createdProject = new this.projectModel({\n      tenantID,\n      clientID,\n      clientSECRET,\n      name,\n      callBackUrl,\n    });\n    console.log(createdProject);\n    try {\n      tenant.projects.push(createdProject);\n      await tenant.save();\n      const projectList = await this.findAllPerTenant(tenantID);\n      return projectList;\n    } catch (error) {\n      throw new BadRequestException('Failed to create project');\n    }\n  }\n\n  async findAllPerTenant(tenantID: string): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant with ID: ${tenantID} not found`);\n    }\n    if (tenant.projects.length >= 1) {\n      return tenant.projects;\n    }\n  }\n\n  async findOne(projectID: string): Promise {\n    const targetTenant = await this.tenantModel\n      .findOne({ 'projects._id': projectID })\n      .exec();\n\n    const project = targetTenant.projects.find(\n      (proj) => proj._id.toString() === projectID,\n    );\n    if (!project) {\n      throw new NotFoundException(\n        `Project with ID: ${projectID} not found in tenant`,\n      );\n    }\n    return project;\n  }\n\n  async update(\n    id: string,\n    updateProjectDto: projectModel,\n    tenantID: string,\n  ): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (tenant) {\n      if (!tenant.projects.find((proj) => proj._id.toString() === id)) {\n        throw new NotFoundException(\n          `you are not able to delete this project, because you don't own it`,\n        );\n      }\n    }\n    if (!tenant) {\n      throw new NotFoundException(\n        `you are not able to delete this project, due to your authorization role`,\n      );\n    }\n\n    const project = tenant.projects.find((proj) => proj._id.toString() === id);\n    if (!project) {\n      throw new NotFoundException(`Project with ID: ${id} not found in tenant`);\n    }\n\n    Object.assign(project, updateProjectDto);\n\n    try {\n      await tenant.save();\n      const projectsAfterUpdate: any = tenant.projects;\n      return projectsAfterUpdate;\n    } catch (error) {\n      throw new BadRequestException('Failed to update project');\n    }\n  }\n\n  async undelete(id: string, tenantID: string): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant with ID: ${tenantID} not found`);\n    }\n\n    const project = tenant.projects.find((proj) => proj._id.toString() === id);\n    if (!project) {\n      throw new NotFoundException(`Project with ID: ${id} not found in tenant`);\n    }\n\n    project.deleted = false;\n    try {\n      await tenant.save({ validateModifiedOnly: true });\n      return project;\n    } catch (error) {\n      throw new BadRequestException('Failed to undelete project');\n    }\n  }\n\n  async delete(id: string, tenantID: string): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant with ID: ${tenantID} not found`);\n    }\n\n    if (!tenant.projects || !Array.isArray(tenant.projects)) {\n      throw new BadRequestException(\n        'Projects list is not available for this tenant',\n      );\n    }\n\n    const project = tenant.projects.find((proj) => proj._id.toString() === id);\n    if (!project) {\n      throw new NotFoundException(`Project with ID: ${id} not found in tenant`);\n    }\n\n    project.deleted = true;\n    try {\n      await tenant.save({ validateModifiedOnly: true });\n      return tenant.projects;\n    } catch (error) {\n      throw new BadRequestException('Failed to delete project');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProjectsController.html":{"url":"controllers/ProjectsController.html","title":"controller - ProjectsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProjectsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/project.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                projects\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                extractTenantId\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                getAllPerTenant\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                undelete\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProjectDto: projectModel, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTenantId\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTenantId(authHeader: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll(authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllPerTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPerTenant(authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('targetTenant')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/undelete')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProjectDto: projectModel, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Header,\n  Headers,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Request,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport { projectModel } from '../dtos/project.model';\nimport { Project } from 'src/domain/entities/project.entity';\nimport { ProjectService } from 'src/infrastructure/services/project.service';\nimport { AuthenticationGuard } from '../guards/auth.guard';\nimport { JwtService } from '@nestjs/jwt';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\nimport { UsersService } from 'src/infrastructure/services/users.service';\n\n@Controller('projects')\n//@UseGuards(AuthenticationGuard)\nexport class ProjectsController {\n  constructor(\n    private readonly projectService: ProjectService,\n    private readonly jwtService: JwtService,\n    private readonly tenantservice: TenantsService,\n    private readonly userservice: UsersService,\n  ) {}\n\n  private extractTenantId(authHeader: string): string {\n    const token = authHeader.split(' ')[1];\n    const payload = this.jwtService.verify(token);\n    return payload.sub;\n  }\n\n  @Post()\n  async create(\n    @Body() createProjectDto: projectModel,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const tenantID = this.extractTenantId(authHeader);\n    const createdProjetc: any = await this.projectService.create(\n      createProjectDto,\n      tenantID,\n    );\n    return createdProjetc;\n  }\n  //\n  @Get()\n  async getAll(@Headers('Authorization') authHeader: string): Promise {\n    const token = authHeader.split(' ')[1];\n    let payload = this.jwtService.verify(token);\n    let role = payload.role;\n    if (role === 'admin') {\n      const tenants = await this.tenantservice.findAll();\n      let projectList: any[] = [];\n      for (let item of tenants) {\n        if (item.projects.length >= 1) projectList.push(item);\n      }\n      return projectList;\n    }\n  }\n\n  @Get('targetTenant')\n  async getAllPerTenant(\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const tenantID = this.extractTenantId(authHeader);\n    return await this.projectService.findAllPerTenant(tenantID);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string): Promise {\n    return await this.projectService.findOne(id);\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateProjectDto: projectModel,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const tenantID = this.extractTenantId(authHeader);\n    const projectList: any = await this.projectService.update(\n      id,\n      updateProjectDto,\n      tenantID,\n    );\n    return projectList;\n  }\n\n  @Patch(':id/undelete')\n  async undelete(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const userID = this.extractTenantId(authHeader);\n    const user = await this.userservice.findById(userID);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    if (user.role === 'admin') {\n      const tenant = await this.tenantservice.findTenantByProjectId(id);\n      if (!tenant) {\n        throw new NotFoundException('Tenant not found for given project ID');\n      }\n      const tenantId = tenant._id;\n      return await this.projectService.undelete(id, tenantId);\n    } else {\n      throw new BadRequestException('Only admins can undelete projects');\n    }\n  }\n\n  @Delete(':id')\n  async remove(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    let tenant: any = '';\n    const userID = this.extractTenantId(authHeader);\n    const user = await this.tenantservice.findById(userID);\n    if (user && user.role === 'tenant' && user) {\n      return await this.projectService.delete(id, userID);\n    } else {\n      const user = await this.userservice.findById(userID);\n      console.log(user);\n\n      if (user && user.role === 'admin') {\n        tenant = await this.tenantservice.findTenantByProjectId(id);\n        if (!tenant) {\n          throw new NotFoundException('Tenant not found for given project ID');\n        }\n        let tenantId = tenant._id;\n        return await this.projectService.delete(id, tenantId);\n      }\n      // throw new NotFoundException('User not found');\n    }\n\n    // @Delete(':id')\n    // async remove(\n    //   @Param('id') id: string,\n    //   @Headers('Authorization') authHeader: string,\n    // ): Promise {\n    //   let tenant: any = '';\n    //   const userID = this.extractTenantId(authHeader);\n    //   const user = await this.tenantservice.findById(userID);\n    //   if (!user) {\n    //     throw new NotFoundException('User not found');\n    //   }\n\n    //   if (user.role === 'tenant') {\n    //     return await this.projectService.delete(id, userID);\n    //   } else if (user.role === 'admin') {\n    //     tenant = await this.tenantservice.findTenantByProjectId(id);\n    //     if (!tenant) {\n    //       throw new NotFoundException('Tenant not found for given project ID');\n    //     }\n    //     let tenantId = tenant._id;\n    //     return await this.projectService.delete(id, tenantId);\n    //   } else {\n    //     throw new BadRequestException('Invalid user role');\n    //   }\n    // }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProjectsModule.html":{"url":"modules/ProjectsModule.html","title":"module - ProjectsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProjectsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProjectsModule\n\n\n\ncluster_ProjectsModule_exports\n\n\n\ncluster_ProjectsModule_providers\n\n\n\n\nProjectService \n\nProjectService \n\n\n\nProjectsModule\n\nProjectsModule\n\nProjectService  -->\n\nProjectsModule->ProjectService \n\n\n\n\n\nProjectService\n\nProjectService\n\nProjectsModule -->\n\nProjectService->ProjectsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/project.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProjectService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProjectsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProjectService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Project, projectSchema } from 'src/domain/entities/project.entity';\nimport { ProjectService } from 'src/infrastructure/services/project.service';\nimport { ProjectsController } from 'src/presentation/controllers/project.controller';\nimport { projectModel } from 'src/presentation/dtos/project.model';\nimport { TenantModule } from './tenant.module';\nimport { UserModule } from './user.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Project.name, schema: projectSchema }]),\n    forwardRef(() => TenantModule),\n    forwardRef(() => UserModule),\n  ],\n  controllers: [ProjectsController],\n  providers: [ProjectService],\n  exports: [ProjectService, MongooseModule],\n})\nexport class ProjectsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseInterceptor.html":{"url":"injectables/ResponseInterceptor.html","title":"injectable - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getMessage\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMessage(statusCode: number, context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/response.interceptor.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                statusCode\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/response.interceptor.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => {\n        const response = context.switchToHttp().getResponse();\n        const statusCode = response.statusCode;\n\n        return {\n          statusCode,\n          message: this.getMessage(statusCode, context),\n          data,\n        };\n      }),\n    );\n  }\n\n  private getMessage(statusCode: number, context: ExecutionContext): string {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n\n    switch (method) {\n      case 'POST':\n        return statusCode === 200 || 201\n          ? 'successfully completed'\n          : 'Error creating resource';\n      case 'PUT':\n      case 'PATCH':\n        return statusCode === 200 || 201\n          ? 'Resource updated successfully'\n          : 'Error updating resource';\n      case 'DELETE':\n        return statusCode === 200 || 201\n          ? 'Resource deleted successfully'\n          : 'Error deleting resource';\n      default:\n        return 'Request completed successfully';\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInRequest.html":{"url":"classes/SignInRequest.html","title":"class - SignInRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/signInRequest.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInRequest.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInRequest.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString } from \"class-validator\";\n\nexport class SignInRequest {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInTenantResponse.html":{"url":"classes/SignInTenantResponse.html","title":"class - SignInTenantResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInTenantResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/signInTenantResponse.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class SignInTenantResponse {\n  @IsString()\n  _id: string;\n\n  @IsString()\n  name: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  address?: string;\n\n  @IsOptional()\n  @IsString()\n  website?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsString()\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInUserResponse.html":{"url":"classes/SignInUserResponse.html","title":"class - SignInUserResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInUserResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/signInUserResponse.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                age\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class SignInUserResponse {\n  @IsString()\n  _id: string;\n\n  @IsString()\n  name: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  age?: number;\n\n  @IsString()\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tenant.html":{"url":"classes/Tenant.html","title":"class - Tenant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tenant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/tenant.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                deleted\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                projects\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, match: undefined, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({match: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Project[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport * as mongoose from 'mongoose';\nimport { Project, projectSchema } from './project.entity';\nimport {\n  ConflictException,\n  InternalServerErrorException,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { IsString } from 'class-validator';\n\nexport type TenantDocument = Tenant & Document;\n\n@Schema()\nexport class Tenant {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop({ required: true, unique: true })\n  name: string;\n\n  @Prop({\n    required: true,\n    match: [/^\\S+@\\S+\\.\\S+$/, 'Please use a valid email address'],\n    unique: true,\n  })\n  email: string;\n\n  @Prop({\n    required: true,\n    validate: [\n      // {\n      //   validator: (value: string) =>\n      //     /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/.test(value),\n      //   message:\n      //     'Password must contain at least one uppercase letter, one lowercase letter, and one digit, and be at least 8 characters long',\n      // },\n      {\n        validator: function (this: Tenant, value: string) {\n          return value === this.confirmPassword;\n        },\n        message: 'Passwords do not match',\n      },\n    ],\n  })\n  password: string;\n\n  @Prop({ required: true })\n  confirmPassword: string;\n\n  @Prop()\n  resetPasswordToken?: string;\n\n  @Prop()\n  resetPasswordExpires?: Date;\n\n  @Prop({\n    match: [/^(?:\\+20|0)?1[0125]\\d{8}$/, 'Please use a valid phone number'],\n  })\n  phone?: string;\n\n  @Prop()\n  address?: string;\n\n  @Prop({\n    // match: [\n    //   /^www\\.[a-zA-Z0-9-]+(\\.[a-zA-Z]+)+$/,\n    //   'Please use a valid website URL',\n    // ],\n  })\n  website?: string;\n\n  @Prop()\n  image?: string;\n\n  @Prop({ type: [projectSchema], default: [] })\n  projects: Project[];\n\n  @Prop()\n  role: string;\n\n  @Prop({ default: false })\n  deleted: boolean;\n}\n\nexport const TenantSchema = SchemaFactory.createForClass(Tenant);\n\nTenantSchema.pre('save', function (next) {\n  if (this.isModified('password') && this.password !== this.confirmPassword) {\n    next(new Error('Passwords do not match'));\n  } else {\n    next();\n  }\n});\n\nTenantSchema.post('save', function (error, doc, next) {\n  if (error.name === 'MongoServerError') {\n    if (error.code === 11000) {\n      if (error.message.includes('name')) {\n        return next(\n          new NotAcceptableException(\n            'Name must be unique. This name is already taken.',\n          ),\n        );\n      } else if (error.message.includes('email')) {\n        return next(\n          new NotAcceptableException(\n            'Email must be unique. This email is already registered.',\n          ),\n        );\n      }\n    } else if (error.message.includes('Password must be strong')) {\n      return next(new ConflictException('Password must be strong.'));\n    }\n  }\n  return next(error);\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TenantController.html":{"url":"controllers/TenantController.html","title":"controller - TenantController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TenantController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/tenant.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tenants\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                authorizeClient\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                getByEmail\n                            \n                            \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getTenantByProjectId\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                undelete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateWithPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        authorizeClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizeClient(clientID: string, clientSECRET: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authorize-client')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSECRET\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTenantByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenantByProjectId(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:184\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/undelete')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateTenantDto: tenantModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@UseGuards(AuthenticationGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateTenantDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(updateTenantDto: updateTenantModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('updateWithPassword')@UseGuards(AuthenticationGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateTenantDto\n                                            \n                                                            updateTenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadImage(id: string, image: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image/:id')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpException,\n  HttpStatus,\n  UseInterceptors,\n  UploadedFile,\n  Headers,\n  UseGuards,\n  Request,\n  Header,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { tenantModel } from '../dtos/tenant.model';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\nimport { ProjectService } from 'src/infrastructure/services/project.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { AuthenticationGuard } from '../guards/auth.guard';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { updateTenantModel } from '../dtos/updateTenant.model';\nimport { plainToInstance } from 'class-transformer';\n\n@Controller('tenants')\nexport class TenantController {\n  constructor(\n    private readonly tenantsService: TenantsService,\n    private readonly jwtservice: JwtService,\n    private readonly authservice: AuthService,\n  ) {}\n\n  @Get()\n  async findAll(): Promise {\n    return this.tenantsService.findAll();\n  }\n\n  @Get(':id')\n  async getById(@Param('id') id: string): Promise {\n    const tenant = await this.tenantsService.findById(id);\n    if (!tenant) {\n      throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n    }\n    return tenant;\n  }\n\n  @Get('email/:email')\n  async getByEmail(@Param('email') email: string): Promise {\n    const tenant = await this.tenantsService.findByEmail(email);\n    if (!tenant) {\n      throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n    }\n    return tenant;\n  }\n\n  @Patch()\n  @UseGuards(AuthenticationGuard)\n  async update(\n    @Body() updateTenantDto: tenantModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const tenantId = this.jwtservice.verify(token).sub;\n      const updatedTenant = await this.tenantsService.update(\n        tenantId,\n        updateTenantDto,\n      );\n      if (!updatedTenant) {\n        throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedTenant;\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw new HttpException(error.message, error.getStatus());\n      }\n      throw new HttpException(\n        error.message || 'Failed to update tenant',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch('updateWithPassword')\n  @UseGuards(AuthenticationGuard)\n  async updateWithPassword(\n    @Body() updateTenantDto: updateTenantModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const tenantId = this.jwtservice.verify(token).sub;\n      const updatedTenant = await this.tenantsService.updateWithPassword(\n        tenantId,\n        updateTenantDto,\n      );\n      if (!updatedTenant) {\n        throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedTenant;\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Failed to update tenant',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch(':id/undelete')\n  async undelete(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const payload = this.jwtservice.verify(token);\n      if (payload.role === 'admin') {\n        const tenant = await this.tenantsService.undelete(id);\n        if (!tenant) {\n          throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n        }\n        return await this.findAll();\n      }\n    } catch (error) {\n      throw new HttpException(\n        'Failed to undelete tenant',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise {\n    try {\n      const tenant = await this.tenantsService.remove(id);\n      if (!tenant) {\n        throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n      }\n      return await this.findAll();\n    } catch (error) {\n      throw new HttpException(\n        'Failed to delete tenant',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Post('authorize-client')\n  async authorizeClient(\n    @Body('clientID') clientID: string,\n    @Body('clientSECRET') clientSECRET: string,\n  ): Promise {\n    try {\n      const projectId = await this.tenantsService.authorizeClient(\n        clientID,\n        clientSECRET,\n      );\n      const frontendURL = 'http://localhost:4200/authorize/';\n      const callbackUrl = frontendURL + projectId;\n      return { callbackUrl };\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.UNAUTHORIZED);\n    }\n  }\n\n  @Post('image/:id')\n  @UseInterceptors(FileInterceptor('image'))\n  async uploadImage(\n    @Param('id') id: string,\n    @UploadedFile() image: Express.Multer.File,\n  ) {\n    return await this.tenantsService.addImage(id, image);\n  }\n\n  async getTenantByProjectId(projectId: string): Promise {\n    const tenant = await this.tenantsService.findTenantByProjectId(projectId);\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n    return tenant;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TenantModule.html":{"url":"modules/TenantModule.html","title":"module - TenantModule","body":"\n                   \n\n\n\n\n    Modules\n    TenantModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TenantModule\n\n\n\ncluster_TenantModule_exports\n\n\n\ncluster_TenantModule_providers\n\n\n\n\nImageService \n\nImageService \n\n\n\nTenantsService \n\nTenantsService \n\n\n\nTenantModule\n\nTenantModule\n\nImageService  -->\n\nTenantModule->ImageService \n\n\n\nTenantsService  -->\n\nTenantModule->TenantsService \n\n\n\n\n\nAuthService\n\nAuthService\n\nTenantModule -->\n\nAuthService->TenantModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nTenantModule -->\n\nEmailService->TenantModule\n\n\n\n\n\nImageService\n\nImageService\n\nTenantModule -->\n\nImageService->TenantModule\n\n\n\n\n\nTenantsService\n\nTenantsService\n\nTenantModule -->\n\nTenantsService->TenantModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tenant.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            ImageService\n                        \n                        \n                            TenantsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TenantController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageService\n                        \n                        \n                            TenantsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Tenant, TenantSchema } from 'src/domain/entities/tenant.entity';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\nimport { TenantController } from 'src/presentation/controllers/tenant.controller';\nimport { ProjectsModule } from './project.module';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { AuthModule } from './auth.module';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { UserModule } from './user.module';\nimport { EmailService } from 'src/infrastructure/services/email.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Tenant.name, schema: TenantSchema }]),\n    forwardRef(() => ProjectsModule),\n    forwardRef(() => UserModule),\n  ],\n  controllers: [TenantController],\n  providers: [TenantsService, ImageService, AuthService, EmailService],\n  exports: [TenantsService, MongooseModule, ImageService],\n})\nexport class TenantModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TenantsService.html":{"url":"injectables/TenantsService.html","title":"injectable - TenantsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TenantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/tenants.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImage\n                            \n                            \n                                    Async\n                                authorizeClient\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findTenantByProjectId\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                undelete\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateWithPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tenantModel: Model, imageService: ImageService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/tenants.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tenantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imageService\n                                                  \n                                                        \n                                                                        ImageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    addImage(id: string, image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizeClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizeClient(clientID: string, clientSECRET: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:175\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSECRET\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTenantDto: tenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTenantDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findTenantByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findTenantByProjectId(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:213\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:155\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTenantDto: tenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTenantDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(id: string, updateTenantDto: updateTenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTenantDto\n                                            \n                                                            updateTenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { tenantModel } from '../../presentation/dtos/tenant.model';\nimport { Tenant, TenantDocument } from '../../domain/entities/tenant.entity';\nimport { ImageService } from './image.service';\nimport * as bcrypt from 'bcrypt';\nimport { updateTenantModel } from 'src/presentation/dtos/updateTenant.model';\nimport { jwtConstants } from '../../constants';\n\n@Injectable()\nexport class TenantsService {\n  constructor(\n    @InjectModel(Tenant.name) private tenantModel: Model,\n    private imageService: ImageService,\n  ) {}\n\n  async create(createTenantDto: tenantModel): Promise {\n    const createdTenant = new this.tenantModel(createTenantDto);\n    return createdTenant.save();\n  }\n\n  async findById(id: string): Promise {\n    return await this.tenantModel.findById(id).exec();\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.tenantModel.findOne({ email }).exec();\n  }\n\n  async findAll(): Promise {\n    return this.tenantModel.find().exec();\n  }\n\n  async update(id: string, updateTenantDto: tenantModel): Promise {\n    let newEmail: any;\n    let newName: any;\n    let targetTenant: tenantModel;\n    let user: any;\n\n    try {\n      if (updateTenantDto.email !== null) {\n        user = await this.findById(id);\n        newEmail = updateTenantDto.email;\n        targetTenant = await this.findByEmail(newEmail);\n        if (\n          targetTenant &&\n          targetTenant.email === newEmail &&\n          user.email != newEmail\n        ) {\n          throw new ConflictException('Email already exists, try to login');\n        }\n      }\n\n      newName = updateTenantDto.name;\n      const tenants = await this.findAll();\n      for (const item of tenants) {\n        if (item.name === newName && user.name != newName) {\n          throw new ConflictException('Name already in use, try another one');\n        }\n      }\n\n      const tenantAfterUpdate = await this.tenantModel\n        .findOneAndUpdate({ _id: id, deleted: false }, updateTenantDto, {\n          new: true,\n        })\n        .exec();\n\n      if (!tenantAfterUpdate) {\n        throw new NotFoundException('Tenant not found or already deleted');\n      }\n\n      return tenantAfterUpdate;\n    } catch (error) {\n      if (error instanceof ConflictException) {\n        throw new ConflictException(error.message);\n      } else if (error instanceof NotFoundException) {\n        throw new NotFoundException(error.message);\n      } else {\n        console.error('Error updating tenant:', error);\n        throw new InternalServerErrorException('Failed to update tenant');\n      }\n    }\n  }\n\n  async updateWithPassword(\n    id: string,\n    updateTenantDto: updateTenantModel,\n  ): Promise {\n    const tenant = await this.tenantModel.findById(id).exec();\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n\n    try {\n      if (updateTenantDto.email !== null) {\n        const newEmail = updateTenantDto.email;\n        const targetTenant = await this.findByEmail(newEmail);\n        if (targetTenant && targetTenant.email === newEmail) {\n          throw new ConflictException('Email already exists, try to login');\n        }\n      }\n\n      if (updateTenantDto.name !== null) {\n        const newName = updateTenantDto.name;\n        const tenants = await this.findAll();\n        if (tenants.some((item) => item.name === newName)) {\n          throw new ConflictException('Name already in use, try another one');\n        }\n      }\n\n      if (updateTenantDto.oldPassword) {\n        const isMatch = await bcrypt.compare(\n          updateTenantDto.oldPassword,\n          tenant.password,\n        );\n        if (!isMatch) {\n          throw new BadRequestException('Old password is incorrect');\n        }\n      }\n\n      if (updateTenantDto.newPassword && updateTenantDto.confirmNewPassword) {\n        if (\n          updateTenantDto.newPassword !== updateTenantDto.confirmNewPassword\n        ) {\n          throw new BadRequestException('New passwords do not match');\n        }\n        const salt = await bcrypt.genSalt();\n        tenant.password = await bcrypt.hash(updateTenantDto.newPassword, salt);\n        tenant.confirmPassword = tenant.password;\n      }\n\n      Object.assign(tenant, updateTenantDto);\n      return await tenant.save();\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      } else {\n        console.error('Error updating tenant with password:', error);\n        throw new InternalServerErrorException('Failed to update tenant');\n      }\n    }\n  }\n\n  async remove(id: string): Promise {\n    const tenant = await this.tenantModel.findById(id).exec();\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n    tenant.deleted = true;\n    await tenant.save({ validateModifiedOnly: true });\n    return tenant;\n  }\n\n  async undelete(id: string): Promise {\n    const tenant = await this.tenantModel.findById(id).exec();\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n    tenant.deleted = false;\n    await tenant.save({ validateModifiedOnly: true });\n    return tenant;\n  }\n\n  async authorizeClient(\n    clientID: string,\n    clientSECRET: string,\n  ): Promise {\n    const tenant = await this.tenantModel\n      .findOne({\n        'projects.clientID': clientID,\n        'projects.clientSECRET': clientSECRET,\n      })\n      .exec();\n    if (!tenant) {\n      throw new Error('Tenant not found for the given client credentials.');\n    }\n    const project = tenant.projects.find(\n      (proj) =>\n        proj.clientID === clientID && proj.clientSECRET === clientSECRET,\n    );\n    if (!project) {\n      throw new Error('Project not found for the given client credentials.');\n    }\n    return project._id.toString();\n  }\n\n  async addImage(id: string, image: Express.Multer.File): Promise {\n    const tenant = await this.tenantModel.findById(id).exec();\n\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n\n    await this.imageService.upload('tenants', id, image);\n\n    tenant.image =\n      jwtConstants.imageUrl + 'tenants/' + `${id}/` + image.originalname;\n\n    return tenant.save();\n  }\n\n  async findTenantByProjectId(projectId: string): Promise {\n    return this.tenantModel.findOne({ 'projects._id': projectId }).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                age\n                            \n                            \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                deleted\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                githubId\n                            \n                            \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                projects\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({min: undefined, max: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, match: undefined, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        githubId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({match: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserProject[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Types } from 'mongoose';\nimport { UserProject } from './userProject.entity';\nimport { IsString } from 'class-validator';\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class User {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({\n    required: true,\n    match: [/^\\S+@\\S+\\.\\S+$/, 'Please use a valid email address'],\n    unique: true,\n  })\n  email: string;\n\n  @Prop({\n    required: true,\n    validate: [\n      // {\n      //   validator: (value: string) =>\n      //     /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/.test(value),\n      //   message:\n      //     'Password must contain at least one uppercase letter, one lowercase letter, and one digit, and be at least 8 characters long',\n      // },\n      {\n        validator: function (this: User, value: string) {\n          return value === this.confirmPassword;\n        },\n        message: 'Passwords do not match',\n      },\n    ],\n  })\n  password: string;\n\n  @Prop({ required: true })\n  confirmPassword: string;\n\n  @Prop()\n  resetPasswordToken?: string;\n\n  @Prop()\n  resetPasswordExpires?: Date;\n\n  @Prop({\n    match: [/^(?:\\+20|0)?1[0125]\\d{8}$/, 'Please use a valid phone number'],\n  })\n  phone: string;\n\n  @Prop()\n  token: string;\n\n  @Prop()\n  image: string;\n\n  @Prop({\n    min: [13, 'Age must be at least 13'],\n    max: [100, 'Age must be at most 100'],\n  })\n  age: number;\n\n  @Prop({ unique: true, sparse: true })\n  googleId?: string;\n\n  @Prop({ unique: true, sparse: true })\n  githubId?: string;\n\n  @Prop({ default: false })\n  deleted: boolean;\n\n  @Prop()\n  role: string;\n\n  @Prop({ type: [UserProject] })\n  projects: UserProject[];\n}\n\nexport const userSchema = SchemaFactory.createForClass(User);\n\nuserSchema.pre('save', function (next) {\n  if (this.isModified('password') && this.password !== this.confirmPassword) {\n    next(new Error('Passwords do not match'));\n  } else {\n    next();\n  }\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                adduserProjectByProjectId\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                getByEmail\n                            \n                            \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                undelete\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateWithPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        adduserProjectByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    adduserProjectByProjectId(body: literal type, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:182\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/undelete')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateUserDto: userModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(updateUserDto: updateUserModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('updateWithPassword')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            updateUserModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadImage(id: string, image: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image/:id')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:199\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Headers,\n  HttpException,\n  HttpStatus,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { userModel } from '../dtos/user.model';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtService } from '@nestjs/jwt';\nimport { updateUserModel } from '../dtos/updateUser.model';\nimport { ProjectService } from 'src/infrastructure/services/project.service';\nimport { error } from 'console';\n\n@Controller('users')\nexport class UserController {\n  constructor(\n    private userService: UsersService,\n    private authservice: AuthService,\n    private imageService: ImageService,\n    private jwtservice: JwtService,\n    private projectservice: ProjectService,\n  ) {}\n\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  async getById(@Param('id') id: string) {\n    try {\n      const user = await this.userService.findById(id);\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Failed to retrieve user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('email/:email')\n  async getByEmail(@Param('email') email: string) {\n    try {\n      const user = await this.userService.findByEmail(email);\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Failed to retrieve user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Post()\n  async adduserProjectByProjectId(\n    @Body() body: { projectId: string },\n    @Headers('Authorization') authHeader: string,\n  ) {\n    try {\n      const token = authHeader.split(' ')[1];\n      const { projectId } = body;\n      let result: any;\n      const targetProject = await this.projectservice.findOne(projectId);\n\n      if (targetProject.deleted === false) {\n        result = await this.authservice.processAuth(projectId, token);\n      } else {\n        throw new HttpException(\n          'project not found, or has been deleted',\n          HttpStatus.NOT_FOUND,\n        );\n      }\n\n      return {\n        result,\n        success: true,\n        message: 'Project Added successfully',\n      };\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw new HttpException(error.message, error.getStatus());\n      }\n      throw new HttpException(\n        error.message || 'Failed to add project',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch()\n  async update(\n    @Body() updateUserDto: userModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const userId = this.jwtservice.verify(token).sub;\n      const updatedUser = await this.userService.update(userId, updateUserDto);\n      if (!updatedUser) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedUser;\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Failed to update user',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch('updateWithPassword')\n  async updateWithPassword(\n    @Body() updateUserDto: updateUserModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const userId = this.jwtservice.verify(token).sub;\n      const updatedUser = await this.userService.updateWithPassword(\n        userId,\n        updateUserDto,\n      );\n      if (!updatedUser) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedUser;\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Failed to update user',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch(':id/undelete')\n  async undelete(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const payload = this.jwtservice.verify(token);\n      if (payload.role === 'admin') {\n        const user = await this.userService.undelete(id);\n        if (!user) {\n          throw new HttpException('user not found', HttpStatus.NOT_FOUND);\n        }\n        return await this.findAll();\n      }\n    } catch (error) {\n      throw new HttpException(\n        'Failed to undelete user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise {\n    try {\n      const user = await this.userService.remove(id);\n      if (!user) {\n        throw new HttpException('user not found', HttpStatus.NOT_FOUND);\n      }\n      return await this.findAll();\n    } catch (error) {\n      throw new HttpException(\n        'Failed to delete user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Post('image/:id')\n  @UseInterceptors(FileInterceptor('image'))\n  async uploadImage(\n    @Param('id') id: string,\n    @UploadedFile() image: Express.Multer.File,\n  ) {\n    return await this.userService.addImage(id, image);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nTenantModule\n\nTenantModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nTenantModule->UserModule\n\n\n\n\n\nImageService \n\nImageService \n\nImageService  -->\n\nUserModule->ImageService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nImageService\n\nImageService\n\nUserModule -->\n\nImageService->UserModule\n\n\n\n\n\nIndexManagementService\n\nIndexManagementService\n\nUserModule -->\n\nIndexManagementService->UserModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            ImageService\n                        \n                        \n                            IndexManagementService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TenantModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Schema } from '@nestjs/mongoose';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { User, userSchema } from '../domain/entities/user.entity';\nimport { UserController } from '../presentation/controllers/user.controller';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\nimport { TenantModule } from './tenant.module';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { ProjectsModule } from './project.module';\nimport { IndexManagementService } from 'src/infrastructure/services/indexManagement.service';\nimport { EmailService } from 'src/infrastructure/services/email.service';\n\n@Module({\n  imports: [\n    TenantModule,\n    MongooseModule.forFeature([{ name: User.name, schema: userSchema }]),\n    forwardRef(() => ProjectsModule),\n  ],\n  providers: [\n    AuthService,\n    UsersService,\n    ImageService,\n    IndexManagementService,\n    EmailService,\n  ],\n  controllers: [UserController],\n  exports: [UsersService, ImageService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProject.html":{"url":"classes/UserProject.html","title":"class - UserProject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/userProject.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationAccessToken\n                            \n                            \n                                    \n                                authorizationCode\n                            \n                            \n                                    \n                                    Optional\n                                callBackUrl\n                            \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                expireDate\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                projectID\n                            \n                            \n                                    \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationAccessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        callBackUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expireDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projectID\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Project'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Types } from 'mongoose';\n\n@Schema()\nexport class UserProject {\n  @Prop({ type: Types.ObjectId, ref: 'Project' })\n  projectID: Types.ObjectId;\n\n  @Prop()\n  authorizationCode: string;\n\n  @Prop()\n  authorizationAccessToken: string;\n\n  @Prop()\n  expireDate: Date;\n\n  @Prop()\n  name?: string;\n\n  @Prop()\n  callBackUrl?: string;\n\n  @Prop()\n  createdAt?: string;\n\n  @Prop()\n  updatedAt?: string;\n}\n\nexport const userProjectSchema = SchemaFactory.createForClass(UserProject);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImage\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createGithubUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findByGitHubId\n                            \n                            \n                                    Async\n                                findByGoogleId\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findId\n                            \n                            \n                                    Private\n                                    Async\n                                getUserProjects\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                undelete\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateWithPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, imageService: ImageService, projectservice: ProjectService, tenantservice: TenantsService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/users.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imageService\n                                                  \n                                                        \n                                                                        ImageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        projectservice\n                                                  \n                                                        \n                                                                        ProjectService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantservice\n                                                  \n                                                        \n                                                                        TenantsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    addImage(id: string, image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:219\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createGithubUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGithubUser(createUserDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByGitHubId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByGitHubId(githubId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                githubId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findId(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getUserProjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserProjects(projectRef: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectRef\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:199\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(user: User | any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User | any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(id: string, updateUserDto: updateUserModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            updateUserModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  HttpException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { userModel } from '../../presentation/dtos/user.model';\nimport { userProjectModel } from 'src/presentation/dtos/userProject.dto';\nimport { User, UserDocument } from '../../domain/entities/user.entity';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { updateUserModel } from 'src/presentation/dtos/updateUser.model';\nimport * as bcrypt from 'bcrypt';\nimport { ProjectService } from './project.service';\nimport { TenantsService } from './tenants.service';\nimport { projectModel } from 'src/presentation/dtos/project.model';\nimport { jwtConstants } from '../../constants';\nimport { error } from 'console';\nimport { ExceptionsHandler } from '@nestjs/core/exceptions/exceptions-handler';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    private imageService: ImageService,\n    private projectservice: ProjectService,\n    private tenantservice: TenantsService,\n  ) {}\n\n  async create(createUserDto: userModel): Promise {\n    const createdUser = new this.userModel(createUserDto);\n    return createdUser.save();\n  }\n\n  async createGithubUser(createUserDto: userModel): Promise {\n    const createdUser = new this.userModel(createUserDto);\n    return createdUser.save({ validateBeforeSave: false });\n  }\n\n  async findAll(): Promise {\n    const users = this.userModel.find().exec();\n    for (const user of await users) {\n      user.projects = await this.getUserProjects(user.projects);\n    }\n    return users;\n  }\n\n  async findId(id: string): Promise {\n    return await this.userModel.findById(id).exec();\n  }\n\n  async findById(id: string): Promise {\n    const user = this.userModel.findById(id).exec();\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    (await user).projects = await this.getUserProjects((await user).projects);\n    return user;\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.userModel.findOne({ email }).exec();\n  }\n\n  private async getUserProjects(projectRef: any[]): Promise {\n    const targetProject = [];\n\n    for (const projRef of projectRef) {\n      const tenant = await this.tenantservice.findTenantByProjectId(\n        projRef.projectID,\n      );\n      if (tenant) {\n        const project = tenant.projects.find(\n          (p) => p._id.toString() === projRef.projectID,\n        );\n        if (project) {\n          targetProject.push(project);\n        }\n      }\n    }\n    return targetProject;\n  }\n  async findByGitHubId(githubId: string): Promise {\n    return this.userModel.findOne({ githubId }).exec();\n  }\n\n  async findByGoogleId(googleId: string): Promise {\n    return this.userModel.findOne({ googleId }).exec();\n  }\n\n  async save(user: User | any): Promise {\n    return await user.save();\n  }\n\n  async update(id: string, updateUserDto: userModel): Promise {\n    let newEmail: any;\n    let targetUser: userModel;\n    let user: any;\n\n    try {\n      user = await this.findById(id);\n      if (updateUserDto.email !== null) {\n        newEmail = updateUserDto.email;\n        targetUser = await this.findByEmail(newEmail);\n      }\n\n      if (\n        targetUser &&\n        targetUser.email === newEmail &&\n        user.email != newEmail\n      ) {\n        throw new ConflictException('Email already exists, try to login');\n      }\n\n      const userAfterUpdate: any = await this.userModel\n        .findByIdAndUpdate(id, updateUserDto, { new: true })\n        .exec();\n\n      if (!userAfterUpdate) {\n        throw new NotFoundException('User not found');\n      }\n\n      return userAfterUpdate;\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw error;\n      } else {\n        console.error('Error updating user:', error);\n        throw new InternalServerErrorException('Failed to update user');\n      }\n    }\n  }\n\n  async updateWithPassword(\n    id: string,\n    updateUserDto: updateUserModel,\n  ): Promise {\n    let newEmail: any;\n    let targetUser: userModel;\n    const user = await this.userModel.findById(id).exec();\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    try {\n      if (updateUserDto.email !== null) {\n        newEmail = updateUserDto.email;\n        targetUser = await this.findByEmail(newEmail);\n      }\n\n      if (targetUser && targetUser.email === newEmail) {\n        throw new ConflictException('Email already exists, try to login');\n      }\n\n      if (updateUserDto.oldPassword) {\n        const isMatch = await bcrypt.compare(\n          updateUserDto.oldPassword,\n          user.password,\n        );\n        console.log('it matches');\n        if (!isMatch) {\n          throw new BadRequestException('Old password is incorrect');\n        }\n      }\n\n      if (updateUserDto.newPassword && updateUserDto.confirmNewPassword) {\n        if (updateUserDto.newPassword !== updateUserDto.confirmNewPassword) {\n          throw new BadRequestException('New passwords do not match');\n        }\n        const salt = await bcrypt.genSalt();\n        user.password = await bcrypt.hash(updateUserDto.newPassword, salt);\n        user.confirmPassword = user.password;\n      }\n\n      Object.assign(user, updateUserDto);\n      return await user.save();\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      } else {\n        console.error('Error updating user with password:', error);\n        throw new InternalServerErrorException('Failed to update user');\n      }\n    }\n  }\n\n  async remove(id: string): Promise {\n    const user = await this.userModel.findById(id).exec();\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    user.deleted = true;\n    await user.save({ validateModifiedOnly: true });\n    return user;\n  }\n\n  async undelete(id: string): Promise {\n    const user = await this.userModel.findById(id).exec();\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n    user.deleted = false;\n    await user.save({ validateModifiedOnly: true });\n    return user;\n  }\n\n  async addImage(id: string, image: Express.Multer.File): Promise {\n    const user = await this.userModel.findById(id).exec();\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    await this.imageService.upload('users', id, image);\n\n    user.image =\n      jwtConstants.imageUrl + 'users/' + `${id}/` + image.originalname;\n    return user.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/paypal.entity.ts\n            \n            class\n            PaypalTransaction\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/domain/entities/paypal.entity.ts\n            \n            variable\n            PaypalTransactionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/project.entity.ts\n            \n            class\n            Project\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/domain/entities/project.entity.ts\n            \n            variable\n            projectSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/tenant.entity.ts\n            \n            class\n            Tenant\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/domain/entities/tenant.entity.ts\n            \n            variable\n            TenantSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/domain/entities/user.entity.ts\n            \n            variable\n            userSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/userProject.entity.ts\n            \n            class\n            UserProject\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/domain/entities/userProject.entity.ts\n            \n            variable\n            userProjectSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/Strategies/githubAuth.strategy.ts\n            \n            injectable\n            GithubAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/Strategies/googleAuth.strategy.ts\n            \n            injectable\n            GoogleAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/paypal/paypal-transaction.service.ts\n            \n            injectable\n            PaypalTransactionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/paypal/paypal.service.ts\n            \n            injectable\n            PaypalService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/services/image.service.ts\n            \n            injectable\n            ImageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/services/indexManagement.service.ts\n            \n            injectable\n            IndexManagementService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/services/project.service.ts\n            \n            injectable\n            ProjectService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/services/tenants.service.ts\n            \n            injectable\n            TenantsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/services/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/infrastructure/supabase/supabaseClient.ts\n            \n            variable\n            supabase\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/supabase/supabaseClient.ts\n            \n            variable\n            supabaseKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/supabase/supabaseClient.ts\n            \n            variable\n            supabaseUrl\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/presentation/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/presentation/controllers/paypal.controller.ts\n            \n            controller\n            PaypalController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/presentation/controllers/project.controller.ts\n            \n            controller\n            ProjectsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/presentation/controllers/tenant.controller.ts\n            \n            controller\n            TenantController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/presentation/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/presentation/dtos/project.model.ts\n            \n            class\n            projectModel\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/presentation/dtos/signInRequest.dto.ts\n            \n            class\n            SignInRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/presentation/dtos/signInTenantResponse.dto.ts\n            \n            class\n            SignInTenantResponse\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/presentation/dtos/signInUserResponse.dto.ts\n            \n            class\n            SignInUserResponse\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/presentation/dtos/tenant.model.ts\n            \n            class\n            tenantModel\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/presentation/dtos/updateTenant.model.ts\n            \n            class\n            updateTenantModel\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/presentation/dtos/updateUser.model.ts\n            \n            class\n            updateUserModel\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/presentation/dtos/user.model.ts\n            \n            class\n            userModel\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/presentation/dtos/userProject.dto.ts\n            \n            class\n            userProjectModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/presentation/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/presentation/guards/auth.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/presentation/interceptors/response.interceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.3.9\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.9\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mongoose : ^10.0.6\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.3.9\n        \n            @paypal/checkout-server-sdk : ^1.0.3\n        \n            @supabase/supabase-js : ^2.43.4\n        \n            bcrypt : ^5.1.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            mongoose : ^8.4.3\n        \n            multer : ^1.4.5-lts.1\n        \n            multer-s3 : ^3.0.1\n        \n            nodemailer : ^6.9.14\n        \n            passport : ^0.7.0\n        \n            passport-github : ^1.1.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            stripe : ^15.11.0\n        \n            uuid : ^10.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaypalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProjectsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TenantModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PaypalModule\n\n\n\ncluster_PaypalModule_providers\n\n\n\ncluster_ProjectsModule\n\n\n\ncluster_ProjectsModule_exports\n\n\n\ncluster_ProjectsModule_providers\n\n\n\ncluster_TenantModule\n\n\n\ncluster_TenantModule_exports\n\n\n\ncluster_TenantModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPaypalModule\n\nPaypalModule\n\nAppModule -->\n\nPaypalModule->AppModule\n\n\n\n\n\nProjectsModule\n\nProjectsModule\n\nAuthModule -->\n\nProjectsModule->AuthModule\n\n\n\nAppModule -->\n\nProjectsModule->AppModule\n\n\n\n\n\nProjectService \n\nProjectService \n\nProjectService  -->\n\nProjectsModule->ProjectService \n\n\n\n\n\nTenantModule\n\nTenantModule\n\nAuthModule -->\n\nTenantModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nTenantModule->UserModule\n\n\n\nAppModule -->\n\nTenantModule->AppModule\n\n\n\n\n\nImageService \n\nImageService \n\nImageService  -->\n\nTenantModule->ImageService \n\n\n\n\n\nTenantsService \n\nTenantsService \n\nTenantsService  -->\n\nTenantModule->TenantsService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nImageService  -->\n\nUserModule->ImageService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nTenantModule -->\n\nAuthService->TenantModule\n\n\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\nTenantModule -->\n\nEmailService->TenantModule\n\n\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nGithubAuthStrategy\n\nGithubAuthStrategy\n\nAuthModule -->\n\nGithubAuthStrategy->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nPaypalService\n\nPaypalService\n\nPaypalModule -->\n\nPaypalService->PaypalModule\n\n\n\n\n\nPaypalTransactionService\n\nPaypalTransactionService\n\nPaypalModule -->\n\nPaypalTransactionService->PaypalModule\n\n\n\n\n\nProjectService\n\nProjectService\n\nProjectsModule -->\n\nProjectService->ProjectsModule\n\n\n\n\n\nImageService\n\nImageService\n\nTenantModule -->\n\nImageService->TenantModule\n\n\n\nUserModule -->\n\nImageService->UserModule\n\n\n\n\n\nTenantsService\n\nTenantsService\n\nTenantModule -->\n\nTenantsService->TenantModule\n\n\n\n\n\nIndexManagementService\n\nIndexManagementService\n\nUserModule -->\n\nIndexManagementService->UserModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/projectModel.html":{"url":"classes/projectModel.html","title":"class - projectModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  projectModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/project.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                callBackUrl\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                clientID\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                clientSECRET\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tenantID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        callBackUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUrl()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        clientID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        clientSECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tenantID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsUrl,\n  IsOptional,\n  IsBoolean,\n} from 'class-validator';\n\nexport class projectModel {\n  @IsString()\n  @IsOptional()\n  tenantID?: string;\n\n  @IsString()\n  @IsOptional()\n  clientID?: string;\n\n  @IsString()\n  @IsOptional()\n  clientSECRET?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsUrl()\n  @IsNotEmpty()\n  callBackUrl: string;\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/tenantModel.html":{"url":"classes/tenantModel.html","title":"class - tenantModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  tenantModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/tenant.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                projects\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'password is required'})@Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {message: 'Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Project[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude, Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsEmail,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { Project } from 'src/domain/entities/project.entity';\n\nexport class tenantModel {\n  @IsNotEmpty()\n  readonly name: string;\n\n  @IsEmail()\n  readonly email: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'password is required' })\n  @Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {\n    message:\n      'Password must include a number, lowercase, uppercase, special character',\n  })\n  password: string;\n  confirmPassword: string;\n\n  @IsOptional()\n  @IsString()\n  resetPasswordToken?: string;\n\n  @IsOptional()\n  @IsDate()\n  resetPasswordExpires?: Date;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  address?: string;\n\n  @IsOptional()\n  @IsString()\n  website?: string;\n\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => Project)\n  @IsOptional()\n  projects?: Project[];\n\n  @IsString()\n  role: string;\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PaypalTransactionDocument   (src/.../paypal.entity.ts)\n                        \n                        \n                            TenantDocument   (src/.../tenant.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/domain/entities/paypal.entity.ts\n    \n    \n        \n            \n                \n                    \n                    PaypalTransactionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/domain/entities/tenant.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TenantDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/domain/entities/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/updateTenantModel.html":{"url":"classes/updateTenantModel.html","title":"class - updateTenantModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  updateTenantModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/updateTenant.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                confirmNewPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                oldPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                projects\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        confirmNewPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'Password too weak'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Project[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  ValidateNested,\n} from 'class-validator';\nimport { Project } from 'src/domain/entities/project.entity';\n\nexport class updateTenantModel {\n  @IsOptional()\n  @IsString()\n  readonly name?: string;\n\n  @IsOptional()\n  @IsEmail()\n  readonly email?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly phone?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly address?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly website?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly image?: string;\n\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => Project)\n  readonly projects?: Project[];\n\n  @IsOptional()\n  @IsBoolean()\n  readonly deleted?: boolean;\n\n  @IsOptional()\n  @IsString()\n  readonly oldPassword?: string;\n\n  @IsOptional()\n  @IsString()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    {\n      message: 'Password too weak',\n    },\n  )\n  readonly newPassword?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly confirmNewPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/updateUserModel.html":{"url":"classes/updateUserModel.html","title":"class - updateUserModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  updateUserModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/updateUser.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                age\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                confirmNewPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                oldPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                projects\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        confirmNewPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'confirmNewPassword is required'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'Confirm New Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(/^\\S+@\\S+\\.\\S+$/, {message: 'email pattern is invalid'})@IsNotEmpty({message: 'email is required'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'name is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'newPassword is required'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'New Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'oldPassword is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserProject[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsOptional,\n  MinLength,\n  IsNumber,\n  IsNotEmpty,\n  Matches,\n  IsArray,\n  IsBoolean,\n} from 'class-validator';\nimport { UserProject } from 'src/domain/entities/userProject.entity';\n\nexport class updateUserModel {\n  @IsString()\n  @IsNotEmpty({ message: 'name is required' })\n  name: string;\n\n  @Matches(/^\\S+@\\S+\\.\\S+$/, {\n    message: 'email pattern is invalid',\n  })\n  @IsNotEmpty({ message: 'email is required' })\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  age?: number;\n\n  @IsOptional()\n  @IsArray()\n  projects?: UserProject[];\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n\n  @IsString()\n  @IsNotEmpty({ message: 'oldPassword is required' })\n  oldPassword: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'newPassword is required' })\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    {\n      message:\n        'New Password must include a number, lowercase, uppercase, special character',\n    },\n  )\n  newPassword: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'confirmNewPassword is required' })\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    {\n      message:\n        'Confirm New Password must include a number, lowercase, uppercase, special character',\n    },\n  )\n  confirmNewPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/userModel.html":{"url":"classes/userModel.html","title":"class - userModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  userModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/user.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                age\n                            \n                            \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                githubId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                projects\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(/^\\S+@\\S+\\.\\S+$/, {message: 'email pattern is invalid'})@IsNotEmpty({message: 'email is required'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        githubId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'name is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'password is required'})@Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {message: 'Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserProject[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsOptional,\n  MinLength,\n  IsNumber,\n  IsNotEmpty,\n  Matches,\n  IsArray,\n  IsBoolean,\n  IsDate,\n} from 'class-validator';\nimport { UserProject } from 'src/domain/entities/userProject.entity';\n\nexport class userModel {\n  @IsString()\n  @IsNotEmpty({ message: 'name is required' })\n  name: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'password is required' })\n  @Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {\n    message:\n      'Password must include a number, lowercase, uppercase, special character',\n  })\n  password: string;\n  confirmPassword: string;\n\n  @IsOptional()\n  @IsString()\n  resetPasswordToken?: string;\n\n  @IsOptional()\n  @IsDate()\n  resetPasswordExpires?: Date;\n\n  @Matches(/^\\S+@\\S+\\.\\S+$/, {\n    message: 'email pattern is invalid',\n  })\n  @IsNotEmpty({ message: 'email is required' })\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  githubId?: string;\n\n  @IsOptional()\n  @IsString()\n  googleId?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  age?: number;\n\n  @IsOptional()\n  @IsArray()\n  projects?: UserProject[];\n\n  @IsString()\n  role: string;\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/userProjectModel.html":{"url":"classes/userProjectModel.html","title":"class - userProjectModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  userProjectModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/userProject.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationAccessToken\n                            \n                            \n                                    \n                                authorizationCode\n                            \n                            \n                                    \n                                expireDate\n                            \n                            \n                                    \n                                projectID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationAccessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expireDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projectID\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsEmail, IsString } from 'class-validator';\nimport { ObjectId } from 'mongoose';\n\nexport class userProjectModel {\n  @IsString()\n  projectID: ObjectId;\n\n  @IsString()\n  authorizationCode: string;\n\n  @IsString()\n  authorizationAccessToken: string;\n\n  @IsDate()\n  expireDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            PaypalTransactionSchema   (src/.../paypal.entity.ts)\n                        \n                        \n                            projectSchema   (src/.../project.entity.ts)\n                        \n                        \n                            supabase   (src/.../supabaseClient.ts)\n                        \n                        \n                            supabaseKey   (src/.../supabaseClient.ts)\n                        \n                        \n                            supabaseUrl   (src/.../supabaseClient.ts)\n                        \n                        \n                            TenantSchema   (src/.../tenant.entity.ts)\n                        \n                        \n                            userProjectSchema   (src/.../userProject.entity.ts)\n                        \n                        \n                            userSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret:\n    'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',\n  imageUrl:\n    'https://pqvvtmvqzwsewlhbgdzr.supabase.co/storage/v1/object/public/authgateimages/',\n}\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/paypal.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaypalTransactionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(PaypalTransaction)\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/project.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        projectSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Project)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/supabase/supabaseClient.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        supabase\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createClient(supabaseUrl, supabaseKey)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        supabaseKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBxdnZ0bXZxendzZXdsaGJnZHpyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTgyMTIxNjQsImV4cCI6MjAzMzc4ODE2NH0.jvdWxDzzzvoWfQ3pFqFLYmugrcQUcQEd2MVQ9eJQmpo'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        supabaseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://pqvvtmvqzwsewlhbgdzr.supabase.co'\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/tenant.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TenantSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Tenant)\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/userProject.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userProjectSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(UserProject)\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
