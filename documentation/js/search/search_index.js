var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.361,1,2.485]],["body/modules/AppModule.html",[0,2.34,1,5.07,2,2.114,3,2.114,4,2.412,5,2.412,6,2.114,7,3.375,8,2.412,9,3.794,10,3.794,11,3.749,12,0.021,13,4.356,14,3.505,15,3.505,16,3.505,17,3.069,18,2.254,19,2.412,20,0.259,21,0.2,22,0.229,23,4.437,24,3.298,25,0.419,26,0.689,27,2.802,28,1.42,29,4.437,30,4.437,31,4.437,32,4.437,33,1.989,34,4.437,35,4.437,36,2.592,37,4.437,38,4.437,39,4.437,40,1.582,41,4.437,42,1.769,43,0.259,44,0.152,45,2.254,46,1.672,47,1.874,48,1.672,49,0.016,50,0.016]],["title/controllers/AuthController.html",[51,1.525,52,2.485]],["body/controllers/AuthController.html",[12,0.021,20,0.126,21,0.097,22,0.112,25,0.373,26,0.335,42,0.861,43,0.126,44,0.074,46,1.569,47,1.758,48,1.569,49,0.009,50,0.009,51,0.912,52,2.326,53,1.847,54,1.364,55,1.847,56,0.157,57,0.828,58,2.068,59,3.379,60,4.162,61,3.379,62,3.379,63,3.379,64,3.379,65,4.162,66,4.708,67,4.708,68,4.708,69,3.559,70,3.379,71,2.89,72,2.89,73,2.89,74,2.16,75,4.026,76,0.527,77,1.803,78,2.16,79,0.68,80,2.16,81,1.563,82,0.605,83,0.872,84,4.633,85,1.62,86,2.11,87,2.16,88,2.16,89,2.16,90,2.288,91,2.16,92,6.468,93,4.681,94,2.16,95,2.16,96,6.023,97,2.16,98,2.16,99,2.16,100,2.16,101,2.16,102,2.16,103,2.16,104,2.16,105,2.16,106,2.16,107,0.878,108,2.244,109,3.379,110,2.16,111,1.61,112,2.16,113,2.16,114,2.16,115,2.16,116,2.16,117,2.16,118,1.847,119,2.973,120,2.973,121,4.708,122,1.427,123,2.16,124,3.185,125,2.16,126,3.379,127,2.16,128,1.025,129,2.16,130,3.241,131,2.16,132,2.16,133,3.379,134,1.847,135,2.392,136,2.16,137,2.16,138,2.89,139,1.847,140,2.244,141,2.16,142,2.16,143,2.89,144,2.134,145,1.097,146,2.16,147,1.641,148,1.262,149,1.262,150,2.16,151,1.487,152,2.16,153,1.364,154,2.16,155,1.847,156,1.847,157,1.364,158,2.16,159,1.364,160,1.174,161,1.487,162,1.364,163,2.16,164,1.364,165,2.16,166,2.16,167,0.655,168,1.354,169,1.029,170,1.847,171,2.16,172,5.109,173,2.16,174,2.16,175,1.557,176,2.16,177,2.16,178,2.16,179,2.16,180,2.16,181,4.708,182,2.16,183,2.16,184,2.16,185,2.16,186,2.16,187,2.16,188,2.16,189,2.16,190,4.708,191,1.4,192,2.567,193,1.717,194,3.379,195,4.708,196,3.379,197,2.16,198,3.379,199,3.379,200,3.379,201,1.332,202,2.16,203,2.16,204,2.16,205,2.16,206,3.379,207,2.16,208,2.16,209,0.861,210,0.691,211,1.847,212,0.77,213,2.16,214,2.16,215,3.379,216,2.16,217,2.16,218,4.162,219,3.559,220,1.332,221,2.16,222,4.162,223,2.16,224,4.162,225,2.16,226,3.379,227,2.16,228,2.16,229,2.16,230,2.16,231,2.16,232,3.379,233,2.16,234,2.16,235,2.16,236,2.16,237,2.16,238,2.16,239,2.16,240,2.16,241,2.16,242,2.16,243,1.847,244,1.847,245,2.16]],["title/modules/AuthModule.html",[0,1.361,11,1.962]],["body/modules/AuthModule.html",[0,2.233,2,1.917,3,1.917,4,2.187,5,2.187,6,1.917,7,3.22,8,3.22,11,4.039,12,0.021,14,3.414,15,3.414,16,3.414,17,2.88,18,2.044,19,2.187,20,0.235,21,0.181,22,0.208,24,3.095,25,0.421,26,0.624,40,1.435,42,2.113,43,0.235,44,0.138,48,2.714,49,0.015,50,0.015,52,4.079,153,2.54,246,3.44,247,3.44,248,4.023,249,3.44,250,3.414,251,4.243,252,4.243,253,4.243,254,4.023,255,4.023,256,2.044,257,1.917,258,2.769,259,4.023,260,3.056,261,3.056,262,3.056,263,4.023,264,4.023,265,3.056,266,4.023,267,4.023,268,4.023,269,2.187,270,2.54,271,4.023,272,3.44,273,4.023]],["title/injectables/AuthService.html",[48,1.361,274,0.526]],["body/injectables/AuthService.html",[12,0.021,18,1.226,20,0.083,21,0.064,22,0.074,25,0.35,26,0.222,43,0.083,44,0.049,46,1.682,47,2.007,48,0.909,49,0.007,50,0.007,56,0.103,57,0.591,58,1.986,69,2.678,71,2.678,72,2.063,73,2.063,76,0.461,79,0.594,81,1.417,82,0.632,83,0.791,85,1.388,86,1.404,90,2.629,107,0.847,118,1.221,119,1.978,120,1.978,122,2.53,124,1.702,128,1.973,134,2.063,135,1.87,138,2.678,139,2.063,140,1.96,143,2.678,145,0.726,149,0.834,162,1.524,164,1.524,167,0.732,168,1.058,175,1.389,191,1.448,193,2.089,201,1.002,209,2.307,210,1.916,211,1.221,212,0.509,219,3.147,220,2.309,250,2.414,256,0.726,269,1.311,272,1.221,274,0.352,275,0.482,276,1.221,277,3.132,278,2.412,279,2.412,280,3.132,281,3.132,282,2.412,283,2.412,284,2.412,285,1.428,286,2.775,287,1.428,288,1.428,289,2.534,290,3.147,291,1.428,292,2.537,293,1.428,294,2.412,295,1.428,296,1.428,297,1.428,298,2.412,299,1.428,300,1.428,301,1.428,302,1.428,303,1.428,304,1.428,305,1.428,306,2.412,307,1.428,308,3.072,309,2.412,310,1.428,311,2.412,312,1.428,313,0.902,314,0.776,315,1.226,316,1.221,317,1.428,318,1.428,319,1.221,320,1.221,321,1.428,322,1.661,323,2.063,324,1.428,325,1.428,326,1.221,327,1.591,328,0.983,329,1.311,330,1.085,331,0.983,332,1.428,333,3.68,334,2.678,335,1.221,336,1.428,337,2.236,338,2.412,339,1.428,340,1.221,341,2.324,342,3.68,343,1.428,344,4.084,345,4.396,346,2.593,347,3.125,348,3.68,349,1.87,350,4.75,351,1.96,352,4.113,353,1.781,354,4.445,355,4.113,356,2.818,357,4.462,358,0.603,359,1.221,360,1.843,361,0.834,362,1.428,363,0.834,364,1.428,365,0.983,366,3.132,367,3.283,368,2.412,369,1.524,370,2.063,371,1.833,372,1.661,373,1.524,374,2.796,375,4.113,376,5.989,377,2.412,378,1.428,379,1.428,380,1.428,381,2.063,382,2.412,383,2.063,384,1.428,385,1.428,386,1.428,387,1.428,388,0.983,389,1.428,390,2.379,391,1.221,392,1.833,393,1.428,394,1.833,395,0.726,396,2.412,397,1.428,398,2.412,399,1.428,400,1.428,401,2.412,402,1.428,403,1.428,404,1.428,405,1.428,406,1.428,407,1.428,408,1.428,409,1.428,410,1.428,411,3.132,412,2.063,413,1.221,414,1.428,415,0.983,416,1.843,417,1.833,418,1.221,419,1.221,420,1.15,421,1.428,422,2.412,423,3.68,424,3.147,425,1.428,426,3.132,427,2.412,428,2.412,429,3.132,430,2.412,431,3.132,432,1.428,433,1.524,434,2.412,435,2.063,436,1.428,437,2.063,438,1.428,439,1.221,440,1.221,441,2.412,442,1.524,443,1.428,444,2.15,445,2.678,446,2.678,447,2.678,448,1.428,449,1.428,450,1.311,451,2.063,452,1.428,453,1.428,454,1.428,455,1.085,456,1.428,457,1.428,458,2.412,459,1.428,460,2.412,461,1.428,462,2.412,463,2.412,464,1.428,465,2.412,466,1.428,467,1.428,468,1.428,469,1.428,470,1.428,471,1.428,472,1.428,473,1.428,474,1.428,475,1.428,476,1.428]],["title/guards/AuthenticationGuard.html",[151,2.485,477,2.743]],["body/guards/AuthenticationGuard.html",[12,0.021,20,0.229,21,0.177,22,0.202,25,0.364,26,0.608,40,1.397,43,0.229,44,0.134,49,0.015,50,0.015,56,0.284,57,1.275,58,1.917,76,0.532,79,0.64,81,1.526,82,0.591,83,0.851,85,1.432,90,2.631,107,0.829,124,3.625,149,3.895,151,3.583,160,2.129,167,1.188,168,1.917,175,1.511,191,1.295,193,1.579,209,2.331,210,1.871,256,1.99,257,1.866,269,2.129,270,2.473,274,0.759,286,3.895,315,2.971,341,3.287,450,3.178,478,3.916,479,3.349,480,6.23,481,5.205,482,3.583,483,3.916,484,3.916,485,5.205,486,4.733,487,3.916,488,2.975,489,5.205,490,3.916,491,5.205,492,3.916,493,2.975,494,2.473,495,2.696,496,3.349,497,3.916,498,2.645,499,3.916,500,3.916,501,2.481,502,2.696,503,1.562,504,2.696,505,3.916,506,3.916]],["title/injectables/EmailService.html",[250,1.834,274,0.526]],["body/injectables/EmailService.html",[12,0.021,20,0.266,21,0.205,22,0.235,25,0.367,26,0.706,36,2.657,43,0.266,44,0.156,49,0.016,50,0.016,55,3.889,56,0.33,57,1.405,58,1.806,76,0.501,79,0.645,81,1.405,82,0.544,83,0.783,85,1.114,90,2.422,107,0.919,167,1.379,168,1.806,193,1.379,220,1.455,250,2.913,274,0.836,275,1.536,495,3.131,507,3.889,508,1.649,509,6.28,510,5.734,511,3.455,512,4.779,513,5.734,514,5.734,515,6.594,516,6.594,517,4.548,518,5.734,519,4.903,520,4.548,521,4.548,522,3.889,523,4.548,524,4.548,525,4.548,526,4.548,527,1.921,528,5.734,529,4.548,530,4.548,531,4.548]],["title/injectables/FacebookAuthStrategy.html",[251,2.28,274,0.526]],["body/injectables/FacebookAuthStrategy.html",[12,0.021,20,0.234,21,0.181,22,0.207,25,0.382,26,0.622,36,2.342,43,0.234,44,0.137,48,2.579,49,0.015,50,0.015,56,0.29,57,1.295,58,1.701,76,0.421,79,0.543,81,1.295,82,0.596,83,0.722,85,0.982,86,1.797,107,0.858,108,1.911,111,1.911,128,1.603,159,2.532,167,1.603,168,1.52,169,2.519,175,1.036,191,1.23,193,1.216,220,1.283,251,3.339,274,0.771,275,1.354,308,4.782,315,2.686,370,5.058,416,1.797,420,1.911,424,4.521,435,3.428,437,5.058,439,3.428,440,3.428,444,2.342,445,3.428,446,3.428,447,3.428,455,4.493,511,3.046,512,4.621,527,1.693,532,3.428,533,3.639,534,4.493,535,4.493,536,3.735,537,4.009,538,3.046,539,4.493,540,5.914,541,4.072,542,4.009,543,4.016,544,3.046,545,2.76,546,3.046,547,4.009,548,4.009,549,4.009,550,4.009,551,3.046,552,4.009,553,4.009,554,2.532,555,4.009,556,3.428,557,4.009,558,2.342,559,4.009,560,4.009,561,4.009,562,4.009,563,4.009,564,4.009]],["title/injectables/GithubAuthStrategy.html",[252,2.28,274,0.526]],["body/injectables/GithubAuthStrategy.html",[12,0.021,20,0.245,21,0.189,22,0.216,25,0.404,26,0.65,36,2.445,43,0.245,44,0.143,46,2.41,48,2.606,49,0.015,50,0.015,56,0.303,57,1.332,58,1.737,76,0.434,79,0.559,81,1.332,82,0.516,83,0.743,85,1.025,86,1.876,107,0.868,108,1.995,111,1.995,159,2.644,167,1.649,168,1.839,169,3.047,175,1.082,191,0.87,193,1.27,209,1.669,210,1.34,220,2.046,252,3.434,256,2.127,274,0.793,275,1.414,286,4.04,308,4.761,315,2.763,420,1.995,511,3.18,512,4.676,533,3.744,534,3.18,535,3.18,536,3.434,538,4.131,539,4.589,543,3.18,544,3.18,545,2.882,546,3.18,551,3.18,565,3.58,566,4.65,567,5.165,568,4.589,569,4.186,570,4.186,571,4.186,572,4.186,573,4.186,574,4.186,575,4.186,576,4.186,577,4.186]],["title/injectables/GoogleAuthStrategy.html",[253,2.28,274,0.526]],["body/injectables/GoogleAuthStrategy.html",[12,0.021,20,0.256,21,0.198,22,0.227,25,0.393,26,0.681,36,2.563,43,0.256,44,0.15,48,2.592,49,0.016,50,0.016,56,0.318,57,1.373,58,1.776,76,0.447,79,0.576,81,1.373,82,0.532,83,0.766,85,1.075,86,1.966,107,0.879,108,2.091,111,2.091,128,1.331,159,2.771,167,1.7,168,1.612,169,2.671,175,1.134,191,0.912,193,1.331,209,1.749,210,1.404,220,1.977,253,3.54,274,0.817,275,1.482,308,4.873,315,2.848,420,2.091,512,4.813,533,3.859,534,3.333,535,3.333,536,3.54,538,4.258,539,4.692,543,3.333,544,3.333,545,3.021,546,3.333,551,3.333,566,4.793,578,3.752,579,5.282,580,4.388,581,4.388,582,4.388,583,3.752,584,4.388,585,4.388,586,4.388,587,4.388]],["title/classes/HttpExceptionFilter.html",[44,0.123,588,2.743]],["body/classes/HttpExceptionFilter.html",[12,0.021,20,0.284,21,0.219,22,0.251,25,0.349,26,0.754,43,0.284,44,0.166,49,0.017,50,0.017,56,0.352,57,1.463,76,0.387,79,0.499,81,1.189,82,0.461,83,0.663,85,1.189,93,4.537,149,3.489,160,2.639,191,1.403,494,3.772,501,3.083,503,1.936,522,5.532,588,4.537,589,1.554,590,5.107,591,4.152,592,6.469,593,5.972,594,5.127,595,6.749,596,4.855,597,4.855,598,4.855,599,4.855,600,4.855,601,4.855,602,4.855,603,4.855,604,4.112,605,4.855,606,4.855,607,4.152,608,2.314,609,4.855,610,4.855]],["title/injectables/ImageService.html",[33,1.618,274,0.526]],["body/injectables/ImageService.html",[12,0.021,20,0.273,21,0.21,22,0.241,25,0.4,26,0.724,33,2.611,43,0.273,44,0.16,46,1.758,49,0.016,50,0.016,56,0.338,57,1.427,58,1.827,76,0.372,79,0.599,81,1.142,82,0.442,83,0.637,85,1.142,86,2.09,107,0.893,160,3.167,167,1.927,175,1.506,191,0.97,193,1.415,220,1.492,274,0.849,275,1.575,316,3.988,331,3.211,346,2.09,353,2.266,416,2.847,503,2.533,527,1.97,611,3.988,612,5.826,613,4.664,614,5.826,615,4.012,616,4.664,617,3.543,618,4.664,619,4.011,620,4.664,621,4.664,622,4.664,623,4.664,624,4.664,625,4.664,626,4.664]],["title/injectables/IndexManagementService.html",[274,0.526,627,2.28]],["body/injectables/IndexManagementService.html",[12,0.021,20,0.241,21,0.186,22,0.213,25,0.372,26,0.641,28,1.321,40,2.413,43,0.241,44,0.141,49,0.015,50,0.015,56,0.299,57,1.32,58,1.946,76,0.329,79,0.616,81,1.011,82,0.392,83,0.564,85,1.32,140,2.568,167,1.252,168,1.187,193,2.091,209,2.392,220,1.321,274,0.786,275,1.394,331,2.842,433,2.607,442,2.607,444,2.411,494,2.607,498,3.048,501,2.859,503,2.698,627,3.403,628,3.53,629,6.36,630,6.766,631,3.53,632,4.016,633,4.128,634,4.128,635,4.128,636,2.607,637,1.646,638,2.842,639,4.128,640,4.128,641,4.128,642,5.13,643,5.999,644,4.128,645,4.128,646,5.999,647,3.505,648,4.13,649,5.13]],["title/controllers/PaypalController.html",[51,1.525,650,2.485]],["body/controllers/PaypalController.html",[12,0.021,20,0.268,21,0.207,22,0.237,25,0.337,26,0.713,42,1.831,43,0.268,44,0.157,49,0.016,50,0.016,51,1.939,54,2.9,56,0.333,57,1.413,58,2.001,76,0.366,77,1.573,79,0.593,81,1.125,82,0.436,83,0.627,85,1.413,86,2.586,107,0.806,144,2.9,148,2.682,169,2.188,175,1.491,191,1.199,193,1.75,416,2.586,495,3.161,604,3.972,650,3.972,651,3.926,652,3.926,653,4.933,654,5.659,655,3.926,656,5.769,657,5.769,658,4.592,659,4.383,660,5.769,661,5.394,662,4.592,663,3.161,664,3.685,665,3.926,666,4.592,667,4.592,668,4.592,669,4.592,670,4.592,671,4.592,672,4.592,673,3.926,674,4.592,675,4.592,676,4.592,677,4.592,678,4.592]],["title/modules/PaypalModule.html",[0,1.361,13,2.28]],["body/modules/PaypalModule.html",[0,2.423,2,2.281,3,2.281,4,2.602,5,2.602,6,2.281,7,3.494,8,2.602,12,0.021,13,4.547,17,3.218,18,2.432,19,2.602,20,0.28,21,0.216,22,0.247,24,2.796,25,0.411,26,0.743,27,3.023,28,1.532,42,2.361,43,0.28,44,0.164,49,0.017,50,0.017,82,0.454,650,4.425,664,4.107,665,4.093,679,4.093,680,4.093,681,4.107,682,4.786,683,4.786,684,4.076,685,3.023,686,4.093,687,3.636,688,4.093,689,3.295,690,4.786,691,2.281]],["title/injectables/PaypalService.html",[274,0.526,664,2.109]],["body/injectables/PaypalService.html",[12,0.021,20,0.225,21,0.174,22,0.199,25,0.362,26,0.598,43,0.225,44,0.132,49,0.014,50,0.014,56,0.279,57,1.261,58,1.908,76,0.462,79,0.636,81,1.261,82,0.488,83,0.703,85,1.261,86,2.307,107,0.741,149,3.008,167,1.169,168,1.667,175,1.331,191,1.341,193,1.759,210,2.064,274,0.751,275,1.301,495,2.652,508,1.481,604,2.652,652,4.403,653,4.403,654,5.293,655,4.403,659,3.911,661,3.294,664,3.008,673,4.403,681,3.877,688,3.294,692,3.294,693,5.799,694,3.853,695,5.148,696,3.853,697,3.853,698,5.148,699,4.403,700,3.911,701,4.403,702,6.45,703,3.853,704,3.294,705,3.853,706,5.148,707,5.148,708,3.853,709,3.853,710,3.853,711,3.853,712,3.853,713,5.148,714,3.853,715,3.853,716,4.403,717,3.853,718,3.853,719,2.652,720,3.853,721,2.927,722,3.853,723,3.853,724,3.853,725,3.853,726,3.853,727,3.853,728,4.403,729,3.853,730,3.853,731,3.853,732,5.148,733,3.853,734,3.853,735,3.853,736,3.853,737,3.853,738,3.853,739,3.294,740,3.853,741,3.294,742,3.853,743,3.294,744,3.853,745,3.853,746,3.853,747,3.853]],["title/classes/PaypalTransaction.html",[44,0.123,685,2.28]],["body/classes/PaypalTransaction.html",[12,0.021,20,0.238,21,0.183,22,0.21,25,0.312,28,1.301,40,2.598,43,0.348,44,0.139,49,0.015,50,0.015,56,0.294,76,0.567,77,1.899,79,0.716,107,0.909,191,0.845,349,3.025,395,2.71,450,2.899,508,1.534,558,2.374,589,1.301,604,4.099,637,1.62,659,4.523,684,2.798,685,3.76,691,2.542,716,5.092,739,5.092,741,5.092,743,5.092,748,2.798,749,5.092,750,3.76,751,2.567,752,3.672,753,4.064,754,2.71,755,4.638,756,4.064,757,2.567,758,4.064,759,4.064,760,4.064,761,4.064,762,4.064,763,4.064,764,4.45,765,2.567,766,3.672,767,3.088,768,3.662,769,2.209,770,4.064,771,3.475]],["title/injectables/PaypalTransactionService.html",[274,0.526,681,2.109]],["body/injectables/PaypalTransactionService.html",[12,0.021,20,0.283,21,0.219,22,0.251,25,0.394,26,0.752,28,1.55,43,0.283,44,0.166,49,0.017,50,0.017,56,0.351,57,1.461,58,1.858,76,0.476,79,0.613,81,1.461,82,0.566,83,0.815,85,1.187,90,2.519,167,1.809,168,1.393,175,1.252,191,1.007,210,1.55,274,0.87,275,1.636,619,3.336,632,4.259,636,3.06,637,1.932,681,3.485,685,3.06,686,4.143,687,4.91,767,3.681,772,4.143,773,5.965,774,4.845,775,4.845,776,5.965,777,5.965,778,4.845,779,4.845,780,4.845,781,4.845,782,4.845]],["title/classes/Project.html",[44,0.123,201,1.155]],["body/classes/Project.html",[12,0.021,20,0.246,21,0.19,22,0.218,25,0.354,28,1.349,40,2.47,43,0.319,44,0.187,49,0.015,50,0.015,56,0.305,76,0.552,77,1.855,79,0.699,82,0.575,107,0.897,108,2.888,111,2.888,191,0.877,201,1.748,212,2.162,349,3.079,420,2.888,450,2.292,508,1.571,527,2.307,533,2.902,558,2.463,589,1.349,637,2.178,648,3.761,691,2.603,750,3.45,751,2.663,752,3.761,755,3.761,757,2.663,764,4.375,765,2.663,766,3.761,768,2.97,769,2.292,783,3.203,784,4.216,785,4.216,786,4.216,787,5.463,788,4.216,789,4.216,790,2.603,791,4.216,792,4.216,793,4.216,794,2.503,795,3.54,796,4.672,797,3.079,798,1.504,799,4.216,800,3.203,801,2.663,802,3.605]],["title/injectables/ProjectService.html",[45,1.834,274,0.526]],["body/injectables/ProjectService.html",[12,0.021,20,0.142,21,0.11,22,0.126,25,0.345,26,0.377,28,0.777,40,1.598,43,0.142,44,0.083,45,1.879,49,0.01,50,0.01,56,0.176,57,0.906,58,1.988,76,0.471,79,0.607,81,1.447,82,0.592,83,0.807,85,1.391,90,2.77,107,0.917,108,1.762,111,1.762,135,2.276,167,1.122,168,1.063,175,1.468,191,1.418,193,1.962,201,2.225,209,2.72,210,2.199,274,0.539,275,0.82,292,2.545,313,2.336,314,2.93,323,3.162,329,3.39,330,1.844,337,3.21,346,1.088,358,1.562,360,3.057,381,2.076,391,2.076,412,2.076,416,3.057,418,2.076,420,1.762,498,2.545,501,2.387,503,1.997,527,1.025,632,3.73,636,1.533,637,0.968,647,1.418,803,2.076,804,3.163,805,3.087,806,3.698,807,3.831,808,2.617,809,2.926,810,2.428,811,2.428,812,2.076,813,4.73,814,2.428,815,3.831,816,3.162,817,2.428,818,3.698,819,2.428,820,3.698,821,2.428,822,2.16,823,2.428,824,1.671,825,4.283,826,2.428,827,1.533,828,2.076,829,2.428,830,2.076,831,5.391,832,4.283,833,2.428,834,2.428,835,2.428,836,2.428,837,4.283,838,3.162,839,2.428,840,4.283,841,2.428,842,5.009,843,2.428,844,2.428,845,1.844,846,2.076,847,1.844,848,5.391,849,5.009,850,3.698,851,2.428,852,2.076,853,3.162,854,2.428,855,3.698,856,3.162,857,2.81,858,2.428,859,2.076,860,2.076]],["title/controllers/ProjectsController.html",[51,1.525,861,2.485]],["body/controllers/ProjectsController.html",[12,0.021,20,0.124,21,0.096,22,0.11,25,0.341,26,0.33,42,0.848,43,0.124,44,0.073,45,2.094,46,1.258,47,1.41,49,0.009,50,0.009,51,0.898,54,1.343,56,0.154,57,0.818,58,2.017,76,0.465,77,1.535,79,0.599,81,1.428,82,0.553,83,0.796,85,1.428,90,2.835,107,0.922,124,1.815,144,2.603,145,2.094,148,2.408,157,1.343,161,1.464,167,0.645,168,1.619,169,2.225,175,1.616,191,1.458,193,2.136,201,1.723,209,2.324,210,1.865,220,1.723,256,1.081,257,1.014,258,1.464,269,1.156,270,1.343,286,2.408,289,3.492,313,1.343,314,1.156,315,1.081,329,3.06,337,2.538,341,3.786,346,2.092,347,3.131,358,1.41,360,2.749,365,3.214,388,1.464,415,2.837,416,2.889,482,2.299,498,1.081,501,1.014,502,1.464,503,0.848,504,1.464,568,1.616,647,1.95,663,1.464,804,2.603,805,2.24,807,2.855,808,2.727,809,2.408,812,1.819,813,4.305,815,3.524,822,1.243,824,1.464,825,3.992,827,1.343,838,3.992,852,2.855,861,2.299,862,1.819,863,4.121,864,4.121,865,2.948,866,5.138,867,2.127,868,2.127,869,2.536,870,2.127,871,2.127,872,2.127,873,2.127,874,3.339,875,2.127,876,1.343,877,3.131,878,2.127,879,2.536,880,2.127,881,3.339,882,2.127,883,2.536,884,2.127,885,1.616,886,1.464,887,2.127,888,1.616,889,2.127,890,1.819,891,4.277,892,4.277,893,4.09,894,3.339,895,2.127,896,1.616,897,2.536,898,2.127,899,2.127,900,2.127,901,2.127,902,2.127,903,2.127,904,2.127,905,3.547,906,2.127,907,3.524,908,4.121,909,3.131,910,4.121,911,2.127,912,2.127,913,2.127,914,3.339,915,4.668,916,3.339,917,2.127,918,3.339,919,3.339,920,2.127,921,1.616]],["title/modules/ProjectsModule.html",[0,1.361,14,1.834]],["body/modules/ProjectsModule.html",[0,2.353,2,2.138,3,2.138,4,2.439,5,2.439,6,2.138,7,3.393,8,3.393,11,2.439,12,0.021,14,3.57,15,2.889,16,2.889,17,3.091,18,2.28,19,2.439,20,0.262,21,0.202,22,0.232,24,2.621,25,0.425,26,0.697,27,3.591,28,1.436,42,2.267,43,0.262,44,0.153,45,3.716,46,1.691,49,0.016,50,0.016,82,0.426,140,2.138,157,2.834,201,1.436,260,3.409,261,3.409,320,3.837,329,2.439,330,3.409,689,3.089,691,2.138,801,3.591,827,2.834,861,4.297,888,3.409,922,3.837,923,3.837,924,3.837,925,4.487,926,4.742,927,4.487,928,3.837,929,4.487]],["title/injectables/ResponseInterceptor.html",[274,0.526,930,2.743]],["body/injectables/ResponseInterceptor.html",[12,0.021,20,0.237,21,0.183,22,0.21,25,0.348,26,0.63,43,0.237,44,0.139,49,0.015,50,0.015,56,0.294,57,1.305,76,0.425,79,0.547,81,1.305,82,0.505,83,0.728,85,1.305,93,3.082,107,0.681,148,2.37,149,3.112,168,1.711,175,1.74,191,1.313,212,1.447,274,0.777,275,1.37,486,5.214,488,4.985,494,2.562,496,3.469,503,2.372,554,3.757,607,5.759,608,1.933,619,2.793,754,3.023,769,2.205,805,2.205,886,2.793,930,4.048,931,3.469,932,5.328,933,4.556,934,5.328,935,4.057,936,4.556,937,5.402,938,4.057,939,5.087,940,4.556,941,3.082,942,3.469,943,3.469,944,4.057,945,4.057,946,4.057,947,4.057,948,4.057,949,5.328,950,4.057,951,4.057,952,6.317,953,5.949,954,5.949,955,5.402,956,5.328,957,4.057,958,6.561,959,4.057,960,4.057,961,3.082,962,4.057]],["title/injectables/SanitizeInterceptor.html",[274,0.526,963,2.743]],["body/injectables/SanitizeInterceptor.html",[12,0.021,20,0.255,21,0.196,22,0.225,25,0.36,26,0.676,43,0.255,44,0.149,49,0.016,50,0.016,56,0.316,57,1.366,76,0.491,79,0.632,81,1.508,82,0.584,83,0.841,84,5.738,85,1.508,168,1.974,175,1.734,191,0.905,274,0.813,275,1.471,486,4.931,488,3.309,494,2.751,554,3.887,619,2.998,805,3.033,933,4.771,936,4.771,937,5.55,939,5.263,940,4.771,941,3.309,942,3.724,943,3.724,963,4.238,964,3.724,965,5.579,966,5.579,967,4.355,968,5.579,969,4.355,970,5.579,971,4.355,972,4.355,973,4.355,974,4.355,975,4.355,976,4.355,977,4.355,978,4.355,979,3.724,980,5.579,981,5.579,982,4.355,983,4.355]],["title/classes/SignInRequest.html",[44,0.123,130,2.485]],["body/classes/SignInRequest.html",[12,0.021,20,0.308,21,0.237,22,0.272,25,0.308,43,0.308,44,0.215,49,0.018,50,0.018,56,0.382,76,0.5,77,1.71,79,0.644,107,0.886,122,2.83,128,2.032,130,4.319,508,1.804,589,1.685,794,2.525,798,1.878,984,4.502,985,3.405,986,5.265,987,5.265]],["title/classes/SignInTenantResponse.html",[44,0.123,164,2.28]],["body/classes/SignInTenantResponse.html",[12,0.021,20,0.256,21,0.198,22,0.226,25,0.256,43,0.256,44,0.192,49,0.016,50,0.016,56,0.317,76,0.564,77,1.929,79,0.727,82,0.585,83,0.967,107,0.946,128,1.872,164,3.536,346,2.766,349,3.136,351,2.941,353,2.201,361,3.605,363,3.605,508,1.61,589,1.401,794,2.732,797,3.415,798,1.562,985,3.136,988,3.745,989,4.379,990,3.799,991,4.379,992,4.379,993,4.379,994,4.379,995,4.379,996,4.379,997,4.379]],["title/classes/SignInUserResponse.html",[44,0.123,162,2.28]],["body/classes/SignInUserResponse.html",[12,0.021,20,0.253,21,0.195,22,0.224,25,0.325,43,0.253,44,0.19,49,0.016,50,0.016,56,0.313,76,0.563,77,1.924,79,0.725,82,0.582,83,0.964,107,0.93,128,1.861,162,3.507,327,3.117,328,2.977,346,2.749,349,3.117,351,2.923,353,2.188,356,3.874,358,2.591,508,1.597,589,1.384,754,2.821,794,2.687,797,3.401,798,1.542,985,3.117,990,3.244,998,3.697,999,4.324,1000,2.977,1001,4.324,1002,4.324,1003,4.324,1004,4.324,1005,4.324,1006,3.285,1007,4.324,1008,4.324,1009,3.507,1010,3.823]],["title/classes/Tenant.html",[44,0.123,360,1.618]],["body/classes/Tenant.html",[12,0.021,20,0.16,21,0.124,22,0.142,25,0.347,26,0.425,28,0.877,40,2.447,43,0.282,44,0.139,49,0.011,50,0.011,56,0.198,76,0.558,77,1.87,79,0.705,82,0.539,83,0.92,107,0.915,122,2.247,128,1.803,145,1.392,175,1.467,191,0.57,201,1.541,210,1.296,212,1.718,346,2.159,349,2.447,351,2.536,353,1.718,358,2.034,360,2.385,361,3.108,363,3.108,367,3.042,369,3.753,372,2.787,373,3.042,395,2.057,450,3.231,503,1.092,508,1.164,527,1.71,536,2.557,541,3.316,554,3.586,558,1.6,589,0.877,608,1.93,637,1.921,642,2.342,648,4.092,691,1.93,719,3.316,728,2.342,750,2.557,751,2.557,752,2.787,754,1.392,755,3.663,757,1.73,764,4.506,765,1.73,766,2.787,768,2.892,769,2.618,790,1.93,794,1.032,798,1.718,800,2.081,801,2.557,1011,1.886,1012,3.316,1013,3.316,1014,2.739,1015,2.739,1016,2.739,1017,2.739,1018,2.739,1019,2.739,1020,2.739,1021,2.739,1022,2.342,1023,2.739,1024,2.739,1025,2.739,1026,2.739,1027,2.739,1028,2.739,1029,2.739,1030,2.081,1031,4.816,1032,2.081,1033,2.342,1034,3.659,1035,4.119,1036,1.886,1037,2.342,1038,2.814,1039,2.342,1040,2.342,1041,3.659,1042,1.73,1043,3.462,1044,1.73,1045,2.342,1046,2.342,1047,2.342,1048,2.342,1049,3.462,1050,1.886,1051,2.342,1052,2.739,1053,2.739,1054,2.739,1055,2.739,1056,1.886,1057,2.342,1058,2.739,1059,2.342,1060,2.342,1061,3.462,1062,2.342,1063,2.739,1064,2.739,1065,2.739,1066,2.739,1067,2.739,1068,2.739,1069,2.739,1070,2.739,1071,2.739,1072,2.739,1073,4.049,1074,2.739,1075,2.739]],["title/controllers/TenantController.html",[51,1.525,1076,2.485]],["body/controllers/TenantController.html",[12,0.021,20,0.125,21,0.096,22,0.11,25,0.329,26,0.331,42,0.851,43,0.125,44,0.073,47,1.745,49,0.009,50,0.009,51,0.902,54,1.348,56,0.155,57,0.82,58,2.066,76,0.49,77,1.636,79,0.643,81,1.504,82,0.582,83,0.839,85,1.533,86,0.957,90,2.895,107,0.911,108,2.229,111,1.969,124,1.82,128,1.016,135,2.377,144,2.609,145,1.701,147,1.622,148,1.247,156,1.825,160,1.16,161,1.47,167,0.647,168,1.461,169,1.596,170,2.863,175,1.618,191,1.397,193,2.002,209,2.604,210,2.089,243,1.825,244,1.825,256,1.085,257,1.017,258,1.47,269,1.16,270,1.348,286,2.413,292,2.099,314,1.82,315,1.085,334,1.825,337,3.064,341,3.209,353,1.668,360,3.01,365,1.47,413,1.825,416,2.616,420,1.596,482,2.305,498,2.739,501,2.569,502,1.47,503,2.327,504,1.47,594,3.86,615,2.609,647,1.247,663,1.47,805,1.82,808,2.732,809,2.968,813,3.22,822,1.247,865,2.114,866,4.665,869,2.544,876,1.348,877,2.544,879,2.544,883,2.544,885,1.622,886,2.844,891,3.138,892,3.138,893,2.544,896,1.622,897,1.622,905,2.544,909,1.622,921,1.622,1076,2.305,1077,1.825,1078,3.532,1079,3.22,1080,2.863,1081,2.863,1082,3.348,1083,2.844,1084,3.532,1085,1.825,1086,3.348,1087,2.863,1088,2.135,1089,2.135,1090,1.825,1091,2.863,1092,2.135,1093,1.825,1094,2.135,1095,3.348,1096,2.135,1097,2.135,1098,2.135,1099,2.135,1100,2.135,1101,4.61,1102,2.135,1103,2.954,1104,2.863,1105,2.135,1106,1.825,1107,1.825,1108,2.135,1109,2.135,1110,1.825,1111,2.863,1112,1.825,1113,1.622,1114,2.135,1115,2.135,1116,2.135,1117,1.825,1118,2.135,1119,5.391,1120,4.61,1121,1.825,1122,5.391,1123,2.135,1124,2.305,1125,2.863,1126,1.825,1127,2.863,1128,4,1129,2.863,1130,4,1131,2.135,1132,2.135,1133,2.544,1134,1.825,1135,2.135,1136,2.135,1137,2.135,1138,2.135,1139,1.825,1140,1.825,1141,2.135]],["title/modules/TenantModule.html",[0,1.361,15,1.834]],["body/modules/TenantModule.html",[0,2.288,2,2.016,3,2.016,4,2.3,5,2.3,6,2.016,7,3.3,8,3.3,11,2.3,12,0.021,14,2.782,15,3.72,16,2.782,17,2.977,18,2.15,19,2.3,20,0.247,21,0.191,22,0.219,24,2.472,25,0.422,26,0.657,27,3.458,28,1.354,33,3.251,42,2.183,43,0.247,44,0.145,47,3.064,48,2.567,49,0.015,50,0.015,82,0.401,153,2.672,161,2.913,250,3.461,260,3.214,262,3.214,265,3.214,360,1.896,689,2.913,691,2.016,828,3.618,926,4.612,928,3.618,1056,3.77,1076,4.18,1142,3.618,1143,3.618,1144,3.618,1145,4.231,1146,4.231,1147,2.913,1148,3.618]],["title/injectables/TenantsService.html",[47,1.525,274,0.526]],["body/injectables/TenantsService.html",[12,0.021,20,0.114,21,0.088,22,0.101,25,0.341,26,0.303,28,0.625,33,2.44,40,1.587,43,0.114,44,0.067,47,1.317,49,0.009,50,0.009,56,0.141,57,0.764,58,2.046,76,0.487,79,0.639,81,1.496,82,0.636,83,0.834,85,1.496,90,2.887,107,0.902,108,2.318,111,2.12,119,2.46,120,2.46,122,1.317,128,1.769,135,3.038,145,1.979,167,0.946,168,0.897,175,1.578,191,1.373,193,2.035,201,0.998,209,2.655,210,2.131,212,1.389,220,1.247,257,0.93,274,0.455,275,0.659,292,1.585,313,1.97,314,2.118,322,2.147,337,3.074,344,1.483,345,1.483,349,0.992,353,1.587,360,2.984,369,1.233,371,2.37,372,3.571,373,1.97,374,2.37,383,3.805,415,2.147,416,2.68,419,1.669,493,1.483,498,2.635,501,1.486,503,2.435,527,1.317,615,2.46,632,2.81,636,1.233,637,1.244,804,1.97,808,1.822,809,2.599,822,1.822,824,2.147,830,1.669,837,3.805,845,1.483,847,1.483,857,2.37,865,1.97,876,1.97,897,2.959,909,3.94,961,2.37,1030,1.483,1032,1.483,1041,2.37,1050,1.344,1078,3.331,1079,3.063,1083,2.682,1085,1.669,1087,2.667,1101,5.113,1103,2.81,1124,3.349,1133,2.37,1148,2.667,1149,1.669,1150,2.667,1151,2.667,1152,2.667,1153,3.119,1154,1.952,1155,1.952,1156,2.667,1157,1.952,1158,1.952,1159,3.119,1160,1.952,1161,1.952,1162,1.952,1163,2.667,1164,1.952,1165,2.667,1166,1.952,1167,3.119,1168,1.952,1169,1.952,1170,1.952,1171,1.952,1172,1.669,1173,1.952,1174,1.952,1175,1.952,1176,1.952,1177,1.952,1178,1.952,1179,1.952,1180,1.952,1181,4.864,1182,3.895,1183,1.952,1184,1.669,1185,3.119,1186,1.952,1187,2.667,1188,2.667,1189,3.119,1190,1.952,1191,3.119,1192,3.119,1193,3.895,1194,1.952,1195,2.667,1196,2.667,1197,2.37,1198,1.952,1199,1.952,1200,1.952,1201,2.667,1202,1.952,1203,3.895,1204,1.669,1205,1.669,1206,1.669,1207,1.669,1208,1.952,1209,1.952,1210,1.952,1211,3.119,1212,1.952,1213,1.952,1214,1.952,1215,3.119,1216,1.669,1217,1.952,1218,1.952,1219,1.952,1220,1.952,1221,1.952,1222,1.669,1223,1.669]],["title/classes/User.html",[44,0.123,220,1.155]],["body/classes/User.html",[12,0.021,20,0.164,21,0.127,22,0.145,25,0.315,28,0.898,40,2.578,43,0.286,44,0.141,49,0.012,50,0.012,56,0.203,76,0.568,77,1.916,79,0.722,82,0.463,83,0.901,107,0.928,122,2.274,124,2.656,128,1.633,175,0.726,191,0.584,212,1.743,220,1.723,327,2.736,346,2.19,349,2.483,351,2.566,353,1.743,356,3.622,358,2.064,363,1.64,367,3.086,369,3.622,373,2.604,395,2.095,433,3.086,442,3.086,444,2.854,450,3.369,508,1.186,527,1.741,536,2.604,541,2.838,554,2.604,558,1.64,589,0.898,608,1.965,637,1.644,638,1.933,648,3.948,649,5.127,691,1.965,719,3.364,750,2.604,751,2.604,752,2.838,754,2.483,755,3.707,757,1.773,764,4.551,765,1.773,766,1.933,768,2.927,769,1.526,790,1.965,794,1.058,798,1.743,800,2.133,1012,3.364,1013,3.364,1022,2.401,1033,2.401,1034,3.132,1035,3.526,1036,1.933,1037,2.401,1038,1.64,1039,2.401,1040,2.401,1041,3.712,1042,1.773,1043,3.526,1044,1.773,1045,2.401,1046,2.401,1047,2.401,1048,2.401,1049,3.526,1050,1.933,1051,2.401,1059,2.401,1060,2.401,1061,2.401,1062,2.401,1224,1.933,1225,2.807,1226,2.807,1227,4.123,1228,2.807,1229,2.807,1230,2.807,1231,2.807,1232,4.886,1233,2.807,1234,2.807,1235,2.807,1236,2.807,1237,2.807,1238,2.807,1239,2.807,1240,2.807,1241,2.807,1242,2.807,1243,2.807,1244,2.807,1245,2.807,1246,2.807,1247,4.123,1248,4.123,1249,1.933,1250,2.401,1251,2.807]],["title/controllers/UserController.html",[51,1.525,1252,2.485]],["body/controllers/UserController.html",[12,0.021,20,0.104,21,0.081,22,0.092,25,0.348,26,0.277,33,1.645,40,0.637,42,0.713,43,0.104,44,0.061,45,1.865,46,1.095,48,1.383,49,0.008,50,0.008,51,0.755,54,1.129,56,0.129,57,0.712,58,2.026,75,2.484,76,0.492,77,1.622,79,0.623,81,1.458,82,0.564,83,0.813,85,1.486,86,0.801,90,2.845,107,0.903,124,1.579,128,0.881,140,2.014,144,3.316,145,1.476,147,1.358,148,2.144,153,1.129,155,1.528,157,1.129,160,0.971,167,0.542,168,1.574,175,1.595,191,1.4,192,1.358,193,2.043,201,1.353,209,2.631,210,2.111,212,0.637,220,2.19,256,0.908,257,0.852,258,1.23,269,0.971,270,1.129,286,2.144,289,3.615,290,2.484,292,1.865,314,1.579,315,0.908,331,1.23,337,3.075,341,3.316,347,2.207,353,1.508,365,2,388,1.23,415,1.23,416,2.766,417,1.358,482,2,498,2.875,501,2.696,502,1.23,503,2.373,504,1.23,527,0.755,568,1.358,594,4.418,608,0.852,615,2.318,647,1.044,663,1.23,805,1.579,808,2.469,809,2.717,822,1.044,865,1.835,866,4.876,869,2.207,876,1.129,877,2.207,879,2.207,883,2.207,885,1.358,886,2.527,888,1.358,891,3.533,892,3.533,893,3.211,896,1.358,905,2.788,907,1.528,921,1.358,955,1.528,1079,2.91,1080,2.484,1081,2.484,1083,2.527,1084,3.138,1090,1.528,1091,2.484,1093,1.528,1104,2.484,1106,1.528,1107,1.528,1110,1.528,1111,2.484,1112,1.528,1113,1.358,1117,1.528,1120,4.68,1121,1.528,1124,2,1125,1.528,1126,1.528,1127,3.138,1128,4.68,1129,3.138,1130,4.68,1133,2.207,1134,1.528,1139,1.528,1140,1.528,1147,1.23,1252,2,1253,1.528,1254,3.67,1255,2.905,1256,3.67,1257,1.787,1258,1.787,1259,1.787,1260,1.787,1261,1.787,1262,1.787,1263,2.905,1264,1.787,1265,1.787,1266,1.787,1267,2.905,1268,1.787,1269,1.787,1270,1.787,1271,1.787,1272,4.261,1273,1.787,1274,2.67,1275,1.787,1276,1.787,1277,1.787,1278,1.787,1279,1.787,1280,1.787,1281,1.787,1282,5.251,1283,3.67,1284,1.787,1285,1.787,1286,1.787,1287,3.67,1288,1.787,1289,1.787,1290,1.787,1291,1.787,1292,1.787,1293,1.787,1294,1.787,1295,4.983,1296,1.787,1297,1.787,1298,1.787,1299,1.787,1300,3.138,1301,2.905,1302,1.787,1303,2.905,1304,1.787,1305,1.787]],["title/modules/UserModule.html",[0,1.361,16,1.834]],["body/modules/UserModule.html",[0,2.242,2,1.933,3,1.933,4,2.205,5,2.205,6,1.933,7,3.234,8,3.234,12,0.021,14,2.707,15,3.487,16,3.752,17,2.896,18,2.061,19,2.205,20,0.237,21,0.183,22,0.21,24,3.112,25,0.421,26,0.63,27,2.562,28,1.705,33,3.231,42,2.124,43,0.237,44,0.139,46,2.718,48,2.538,49,0.015,50,0.015,82,0.385,153,2.562,157,2.562,220,1.298,250,3.422,261,3.082,262,3.082,265,3.082,345,3.082,627,4.253,689,2.793,691,2.539,926,4.52,1147,2.793,1249,3.668,1252,4.096,1306,3.469,1307,4.057,1308,3.469,1309,3.469,1310,4.057,1311,3.469,1312,4.057,1313,4.057]],["title/classes/UserProject.html",[44,0.123,327,1.834]],["body/classes/UserProject.html",[12,0.021,20,0.239,21,0.184,22,0.211,25,0.349,28,1.307,43,0.313,44,0.183,49,0.015,50,0.015,56,0.296,76,0.568,77,1.923,79,0.725,82,0.566,83,0.953,107,0.922,191,0.849,201,1.713,212,2.129,292,3.033,327,2.719,390,4.535,392,4.535,394,4.535,395,2.719,420,2.845,450,2.221,508,1.539,527,2.261,558,2.386,589,1.307,637,2.134,691,2.551,749,5.104,750,3.77,751,2.58,757,2.58,764,4.639,765,2.58,769,2.221,790,2.551,794,2.017,798,1.457,1314,3.103,1315,5.969,1316,4.085,1317,4.085,1318,4.085,1319,4.085,1320,4.085,1321,4.085,1322,4.085,1323,4.085,1324,5.352,1325,4.085,1326,4.085,1327,3.103,1328,3.493]],["title/injectables/UsersService.html",[46,1.361,274,0.526]],["body/injectables/UsersService.html",[12,0.021,20,0.095,21,0.074,22,0.084,25,0.33,26,0.253,28,0.522,33,2.263,40,1.702,43,0.095,44,0.056,46,1.016,47,1.69,49,0.008,50,0.008,56,0.118,57,0.661,58,2.093,76,0.512,79,0.671,81,1.572,82,0.609,83,0.877,85,1.587,90,2.982,107,0.91,122,1.139,128,0.818,140,2.915,145,1.751,167,0.818,168,1.372,175,1.674,191,1.347,192,3.626,193,2.056,201,1.418,209,2.56,210,2.073,220,2.189,257,0.778,274,0.393,275,0.551,289,2.372,292,1.37,313,2.176,314,1.873,319,1.395,322,1.856,335,2.306,337,2.87,340,2.947,344,1.24,353,1.427,354,1.395,358,0.689,359,2.947,360,1.794,369,1.031,371,2.049,372,1.856,374,2.049,388,3.285,416,2.742,417,2.049,433,1.703,442,1.703,444,1.575,451,2.306,493,1.24,498,2.251,501,1.642,503,2.356,527,1.139,615,2.176,631,1.395,632,2.528,636,1.031,637,0.651,638,1.123,804,1.703,805,1.873,808,1.575,809,2.338,816,2.306,822,1.575,824,1.856,832,1.395,840,1.395,845,1.24,846,3.422,847,1.24,853,1.395,856,1.395,857,2.618,859,1.395,860,1.395,865,1.703,876,1.703,890,2.947,961,2.049,1030,1.24,1050,1.123,1079,2.755,1083,2.372,1124,3.051,1147,1.123,1150,2.306,1151,2.306,1152,2.306,1156,2.306,1163,2.306,1165,2.306,1172,1.395,1184,1.395,1187,2.306,1188,2.306,1195,2.306,1196,2.306,1201,2.306,1204,1.395,1205,1.395,1206,1.395,1207,1.395,1216,1.395,1222,1.395,1223,1.395,1272,4.515,1274,2.528,1300,4.081,1311,1.395,1329,1.395,1330,2.697,1331,4.002,1332,2.697,1333,2.697,1334,2.697,1335,2.697,1336,2.697,1337,2.697,1338,2.697,1339,1.632,1340,1.632,1341,2.697,1342,1.632,1343,2.697,1344,2.697,1345,1.632,1346,1.632,1347,1.632,1348,1.632,1349,1.632,1350,2.697,1351,1.632,1352,2.697,1353,1.632,1354,2.697,1355,1.632,1356,1.632,1357,2.697,1358,1.632,1359,2.697,1360,1.632,1361,2.697,1362,1.632,1363,2.697,1364,1.632,1365,2.697,1366,1.632,1367,1.632,1368,1.632,1369,1.632,1370,1.632,1371,1.632,1372,1.632,1373,2.697,1374,2.697,1375,2.697,1376,1.632,1377,1.632,1378,2.697,1379,1.632,1380,3.446,1381,4.431,1382,1.632,1383,1.632,1384,2.697,1385,1.632,1386,1.632,1387,1.632,1388,4.772,1389,5.05,1390,4.002,1391,2.697,1392,2.697,1393,3.446,1394,1.632,1395,1.632,1396,3.446,1397,2.697,1398,1.632,1399,2.697,1400,2.697,1401,1.632,1402,1.632,1403,1.632,1404,1.632,1405,1.632,1406,1.632,1407,1.632,1408,1.632]],["title/coverage.html",[1409,3.743]],["body/coverage.html",[6,1.651,12,0.021,22,0.179,33,1.552,44,0.245,45,1.76,46,1.306,47,1.463,48,1.306,49,0.013,50,0.013,51,2.626,52,2.385,53,2.962,76,0.276,130,2.385,135,1.76,140,1.651,151,2.385,162,2.188,164,2.188,201,1.109,210,1.109,220,1.109,250,1.76,251,2.188,252,2.188,253,2.188,257,1.651,274,1.039,276,2.962,327,1.76,329,1.883,360,1.552,477,2.632,479,2.962,507,2.962,532,2.962,541,2.385,565,2.962,578,2.962,588,2.632,590,2.962,591,2.962,611,2.962,617,2.632,627,2.188,628,2.962,650,2.385,651,2.962,664,2.024,681,2.024,684,2.385,685,2.188,687,2.632,692,2.962,748,3.297,772,2.962,783,3.639,801,2.188,803,2.962,861,2.385,862,2.962,930,2.632,931,2.962,963,2.632,964,2.962,984,2.962,988,2.962,998,2.962,1011,3.297,1056,2.385,1076,2.385,1077,2.962,1103,2.188,1149,2.962,1224,3.297,1249,2.385,1252,2.385,1253,2.962,1274,2.188,1314,3.639,1327,2.632,1329,2.962,1409,2.632,1410,3.464,1411,3.464,1412,3.464,1413,2.962,1414,6.819,1415,7.55,1416,6.902,1417,5.923,1418,4.789,1419,3.464,1420,3.464,1421,3.464,1422,6.717,1423,5.49,1424,4.789,1425,5.49,1426,3.464,1427,4.789,1428,3.464,1429,4.694,1430,2.962,1431,2.962,1432,2.962,1433,4.789,1434,4.789,1435,2.962,1436,2.962,1437,2.962,1438,2.962,1439,3.464,1440,2.962,1441,2.962,1442,2.632,1443,3.464,1444,3.464,1445,3.464]],["title/dependencies.html",[3,2.069,1446,2.578]],["body/dependencies.html",[3,2.272,12,0.021,26,0.74,28,1.526,36,2.785,44,0.202,49,0.016,50,0.016,159,3.011,160,2.591,256,2.422,322,3.282,326,4.077,455,3.622,519,4.077,545,4.835,567,4.077,579,4.077,583,4.077,637,1.901,699,4.077,700,3.622,701,4.077,798,1.7,941,3.622,1113,3.622,1447,6.416,1448,4.767,1449,4.767,1450,4.767,1451,4.767,1452,4.767,1453,4.767,1454,4.767,1455,4.767,1456,4.767,1457,4.767,1458,4.767,1459,4.767,1460,3.622,1461,4.767,1462,4.767,1463,4.767,1464,5.905,1465,4.767,1466,4.767,1467,4.767,1468,4.767,1469,4.767,1470,4.767,1471,4.767,1472,4.767,1473,4.767,1474,4.767,1475,4.767,1476,4.767,1477,4.767,1478,4.767,1479,4.767,1480,4.767,1481,4.767,1482,4.767]],["title/miscellaneous/functions.html",[1483,1.761,1484,3.713]],["body/miscellaneous/functions.html",[6,3.315,12,0.018,49,0.018,50,0.018,56,0.418,1432,4.929,1483,3.367,1484,4.929,1485,5.764]],["title/index.html",[56,0.218,1486,3.014,1487,3.014]],["body/index.html",[12,0.021,21,0.215,49,0.016,50,0.016,201,1.522,361,2.779,556,4.068,700,3.614,704,4.068,721,3.614,1034,3.614,1409,3.614,1488,4.758,1489,4.758,1490,5.898,1491,4.758,1492,4.758,1493,4.758,1494,4.758,1495,4.758,1496,6.41,1497,4.758,1498,4.758,1499,4.758,1500,6.41,1501,7.117,1502,4.758,1503,4.758,1504,4.758,1505,7.02,1506,4.758,1507,4.758,1508,5.898,1509,4.758,1510,4.758,1511,4.758,1512,5.898,1513,5.898,1514,4.758,1515,4.758,1516,4.758,1517,5.898,1518,5.898,1519,4.758,1520,4.758,1521,4.758,1522,4.758,1523,4.068,1524,4.758,1525,4.758,1526,4.758,1527,4.758,1528,4.758,1529,4.758,1530,4.758,1531,4.758,1532,4.758,1533,4.068,1534,4.758,1535,4.758,1536,4.758,1537,4.758,1538,4.758,1539,4.068]],["title/modules.html",[2,2.348]],["body/modules.html",[1,3.758,2,2.602,11,2.968,12,0.018,13,3.448,14,2.774,15,2.774,16,2.774,49,0.018,50,0.018,1523,6.199,1540,7.249,1541,7.249,1542,7.249]],["title/overview.html",[1543,4.213]],["body/overview.html",[0,1.452,1,4.925,2,1.836,3,1.836,4,2.094,5,2.094,6,1.836,7,2.094,8,2.094,9,3.294,10,3.294,11,4.014,12,0.021,13,4.28,14,3.443,15,3.692,16,3.732,17,2.799,18,1.958,19,2.094,33,3.157,42,1.536,45,3.443,46,2.554,47,2.862,48,2.628,49,0.014,50,0.014,246,3.294,247,3.294,249,3.294,250,3.277,251,3.662,252,3.662,253,3.662,275,1.301,477,2.927,589,1.233,627,3.662,647,2.251,664,3.387,679,3.294,680,3.294,681,3.387,922,3.294,923,3.294,924,3.294,1142,3.294,1143,3.294,1144,3.294,1306,3.294,1308,3.294,1309,3.294,1543,3.294,1544,3.853,1545,3.853,1546,3.853,1547,3.853]],["title/classes/projectModel.html",[44,0.123,329,1.962]],["body/classes/projectModel.html",[12,0.021,20,0.266,21,0.206,22,0.236,25,0.266,43,0.266,44,0.196,49,0.016,50,0.016,56,0.33,76,0.554,77,1.893,79,0.713,82,0.596,83,0.974,107,0.926,108,2.996,111,2.996,212,2.242,329,3.121,420,2.996,508,1.651,589,1.458,790,2.736,794,2.618,795,3.672,796,4.909,797,3.456,798,1.625,813,4.327,1435,3.896,1548,4.556,1549,4.556,1550,6.286,1551,4.556,1552,4.556,1553,2.878,1554,4.556,1555,4.556,1556,4.556,1557,4.556,1558,3.626]],["title/properties.html",[508,1.249,1446,2.578]],["body/properties.html",[12,0.02,49,0.018,50,0.018,508,1.646,721,4.348,1533,4.894,1539,4.894,1559,5.723,1560,5.723,1561,5.723]],["title/classes/tenantModel.html",[44,0.123,135,1.834]],["body/classes/tenantModel.html",[12,0.021,20,0.203,21,0.156,22,0.179,25,0.321,40,1.237,43,0.203,44,0.188,49,0.013,50,0.013,56,0.251,76,0.571,77,1.918,79,0.728,82,0.521,83,0.984,107,0.934,122,2.785,128,1.666,135,2.436,169,3.066,201,1.896,212,1.959,346,2.462,351,2.618,353,1.959,358,2.321,361,3.209,363,3.209,367,3.47,395,2.436,508,1.379,589,1.11,608,2.618,754,2.436,768,1.886,790,2.285,794,2.533,795,3.462,797,3.466,798,1.237,827,2.191,985,2.791,990,3.462,1000,2.388,1009,3.028,1010,3.301,1012,3.782,1013,3.782,1038,2.801,1042,3.028,1044,3.028,1436,2.967,1460,2.636,1553,2.191,1558,3.028,1562,3.469,1563,3.469,1564,3.469,1565,3.469,1566,3.469,1567,3.469,1568,2.636,1569,2.967,1570,4.1,1571,4.1,1572,4.1,1573,3.642,1574,3.642,1575,3.642,1576,3.469,1577,3.469,1578,3.469,1579,3.469,1580,3.469,1581,2.967,1582,3.469,1583,3.469,1584,3.469,1585,3.469,1586,3.469,1587,3.642,1588,2.388,1589,2.636,1590,4.1,1591,2.636,1592,2.967,1593,2.967]],["title/miscellaneous/typealiases.html",[1483,1.761,1594,4.342]],["body/miscellaneous/typealiases.html",[12,0.018,49,0.018,50,0.018,56,0.41,76,0.451,638,4.503,748,3.893,767,4.97,1011,3.893,1032,4.97,1224,3.893,1483,3.303,1595,5.654,1596,4.835,1597,4.835,1598,4.835]],["title/classes/updateTenantModel.html",[44,0.123,1103,2.28]],["body/classes/updateTenantModel.html",[12,0.021,20,0.205,21,0.158,22,0.181,25,0.323,40,1.25,43,0.205,44,0.189,49,0.013,50,0.013,56,0.254,76,0.566,77,1.905,79,0.718,82,0.524,83,1.005,107,0.929,119,3.489,120,3.489,122,2.039,128,1.675,169,3.566,201,1.905,212,1.97,351,2.632,353,1.97,358,2.333,361,3.227,363,3.227,508,1.389,589,1.122,608,2.301,790,2.301,794,2.577,795,2.048,797,3.58,798,1.25,827,2.214,985,2.453,990,3.863,1009,3.049,1036,3.324,1038,2.821,1103,3.049,1197,4.197,1437,2.997,1460,2.663,1553,2.214,1558,3.049,1588,3.324,1590,4.129,1593,2.997,1599,3.505,1600,3.505,1601,3.505,1602,3.505,1603,3.505,1604,3.505,1605,3.505,1606,3.505,1607,4.129,1608,4.129,1609,4.828,1610,3.505,1611,3.505,1612,3.505,1613,3.505,1614,3.505,1615,3.505,1616,3.505]],["title/classes/updateUserModel.html",[44,0.123,1274,2.28]],["body/classes/updateUserModel.html",[12,0.021,20,0.2,21,0.155,22,0.177,25,0.278,43,0.2,44,0.163,49,0.013,50,0.013,56,0.248,76,0.549,77,1.878,79,0.708,82,0.588,83,0.941,107,0.909,119,3.912,120,3.912,122,2.491,128,1.994,210,1.887,212,1.947,327,2.774,328,2.361,351,2.602,353,1.947,356,3.448,358,2.306,508,1.368,589,1.097,608,3.317,754,3.257,768,3.573,790,2.266,794,2.477,795,3.744,797,3.257,798,1.223,985,2.416,990,2.778,1000,2.361,1006,2.605,1009,3.004,1010,3.274,1036,4.06,1038,3.445,1042,3.724,1044,3.724,1197,4.706,1274,3.004,1438,2.932,1553,2.166,1558,3.004,1568,3.613,1573,4.48,1574,4.48,1575,4.48,1588,3.759,1589,2.605,1591,3.613,1607,5.043,1608,5.043,1617,3.429,1618,4.756,1619,4.756,1620,3.429,1621,3.429,1622,4.067,1623,4.067,1624,2.932,1625,2.932,1626,3.429,1627,3.429,1628,4.067,1629,3.429,1630,3.429,1631,3.429,1632,3.429,1633,3.429,1634,2.932]],["title/classes/userModel.html",[44,0.123,140,1.72]],["body/classes/userModel.html",[12,0.021,20,0.193,21,0.149,22,0.171,25,0.271,43,0.193,44,0.158,49,0.013,50,0.013,56,0.239,76,0.567,77,1.929,79,0.731,82,0.579,83,0.993,107,0.934,122,2.747,128,1.973,140,2.207,212,1.908,327,2.718,328,2.272,346,2.397,351,2.549,353,1.908,356,3.378,358,2.259,367,3.378,395,2.353,433,3.378,442,3.378,444,3.125,508,1.332,589,1.056,608,3.099,754,2.947,768,3.153,790,2.207,794,2.604,795,3.388,797,3.511,798,1.177,985,2.353,990,3.699,1000,2.272,1006,2.507,1009,2.924,1010,3.188,1012,3.683,1013,3.683,1038,2.705,1042,2.924,1044,2.924,1440,2.822,1553,2.084,1558,2.924,1568,2.507,1569,2.822,1570,3.96,1571,3.96,1572,3.96,1573,3.518,1574,3.518,1575,3.518,1581,2.822,1587,3.518,1588,2.272,1589,2.507,1591,2.507,1592,2.822,1622,3.96,1623,3.96,1624,2.822,1625,2.822,1628,2.822,1634,2.822,1635,3.3,1636,3.3,1637,3.3,1638,3.3,1639,3.3,1640,3.3,1641,3.3,1642,3.3,1643,3.3,1644,3.3,1645,3.3,1646,3.3,1647,3.3,1648,3.3,1649,3.3]],["title/classes/userProjectModel.html",[44,0.123,1442,2.743]],["body/classes/userProjectModel.html",[12,0.021,20,0.287,21,0.222,22,0.254,25,0.352,43,0.287,44,0.206,49,0.017,50,0.017,56,0.356,76,0.54,77,1.848,79,0.696,107,0.866,292,3.305,390,4.941,392,4.941,394,4.941,395,3.058,508,1.731,589,1.573,637,1.96,794,2.701,798,1.753,985,2.498,1441,4.203,1442,4.572,1587,4.941,1650,4.915,1651,4.915,1652,4.915,1653,6.504,1654,4.915]],["title/miscellaneous/variables.html",[1483,1.761,1655,3.713]],["body/miscellaneous/variables.html",[12,0.021,21,0.213,49,0.016,50,0.016,56,0.343,76,0.51,107,0.751,257,2.8,269,3.194,373,2.987,617,4.464,684,4.046,719,5.02,748,3.256,769,3.937,771,4.044,783,3.593,801,3.711,802,4.044,804,2.987,979,4.044,1011,3.256,1056,4.046,1057,4.044,1224,3.256,1249,4.046,1250,4.044,1314,3.593,1327,4.464,1328,4.044,1413,4.044,1429,4.044,1430,5.467,1431,5.025,1483,2.763,1596,4.044,1597,4.044,1598,4.044,1655,4.044,1656,4.729,1657,4.729,1658,6.393,1659,4.729,1660,4.729,1661,4.729,1662,4.729,1663,4.729,1664,4.729,1665,4.729,1666,4.729,1667,4.729,1668,4.729,1669,4.729,1670,4.729]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1415,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1560,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1462,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1480,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1461,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1470,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1416,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1421,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1439,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1434,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1427,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1424,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1419,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1433,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1420,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1443,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1428,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1422,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1425,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1423,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1418,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1426,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1417,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":647,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.0.0",{"_index":1477,"title":{},"body":{"dependencies.html":{}}}],["1.0.3",{"_index":1453,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":1472,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1465,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["10.0.0",{"_index":1482,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["10.0.6",{"_index":1451,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1450,"title":{},"body":{"dependencies.html":{}}}],["10.3.9",{"_index":1447,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1248,"title":{},"body":{"classes/User.html":{}}}],["1000",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["10000)}@authgate.com",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["11000",{"_index":1067,"title":{},"body":{"classes/Tenant.html":{}}}],["13",{"_index":1247,"title":{},"body":{"classes/User.html":{}}}],["14",{"_index":1546,"title":{},"body":{"overview.html":{}}}],["15",{"_index":1547,"title":{},"body":{"overview.html":{}}}],["1d",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{}}}],["1h",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["2.0.0",{"_index":1473,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1459,"title":{},"body":{"dependencies.html":{}}}],["2.43.4",{"_index":1456,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":953,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["201",{"_index":954,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["20|0)?1[0125]\\d{8",{"_index":1051,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["24",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["27",{"_index":643,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["3.0.0",{"_index":1471,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":1468,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1448,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":625,"title":{},"body":{"injectables/ImageService.html":{}}}],["3600000",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.0.1",{"_index":1475,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1545,"title":{},"body":{"overview.html":{}}}],["5.00",{"_index":720,"title":{},"body":{"injectables/PaypalService.html":{}}}],["5.1.1",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["587",{"_index":525,"title":{},"body":{"injectables/EmailService.html":{}}}],["6",{"_index":1544,"title":{},"body":{"overview.html":{}}}],["6.9.14",{"_index":1469,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["7.8.1",{"_index":1481,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1046,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["8.4.3",{"_index":1463,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1054,"title":{},"body":{"classes/Tenant.html":{}}}],["_id",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{}}}],["access_token",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accesstoken",{"_index":543,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["add",{"_index":1294,"title":{},"body":{"controllers/UserController.html":{}}}],["added",{"_index":1293,"title":{},"body":{"controllers/UserController.html":{}}}],["addimage",{"_index":1150,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["addimage(id",{"_index":1156,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["addprojecttouserbyprojectid",{"_index":1254,"title":{},"body":{"controllers/UserController.html":{}}}],["addprojecttouserbyprojectid(body",{"_index":1257,"title":{},"body":{"controllers/UserController.html":{}}}],["address",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["admin",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["admins",{"_index":913,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["adminuser",{"_index":919,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["adminuser.role",{"_index":920,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["age",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInUserResponse.html":{},"classes/User.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["aliases",{"_index":1595,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":1524,"title":{},"body":{"index.html":{}}}],["amount",{"_index":716,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["another",{"_index":1192,"title":{},"body":{"injectables/TenantsService.html":{}}}],["app",{"_index":1503,"title":{},"body":{"index.html":{}}}],["application_context",{"_index":724,"title":{},"body":{"injectables/PaypalService.html":{}}}],["applications",{"_index":1495,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":595,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array.isarray(data",{"_index":974,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["array.isarray(tenant.projects",{"_index":858,"title":{},"body":{"injectables/ProjectService.html":{}}}],["array.isarray(user.projects",{"_index":1405,"title":{},"body":{"injectables/UsersService.html":{}}}],["async",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{}}}],["auth.module",{"_index":928,"title":{},"body":{"modules/ProjectsModule.html":{},"modules/TenantModule.html":{}}}],["auth_token",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcode",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontroller",{"_index":52,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticationguard",{"_index":151,"title":{"guards/AuthenticationGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authguard",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader",{"_index":866,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["authheader.split",{"_index":921,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1533,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":852,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["authorizationaccesstoken",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProject.html":{},"classes/userProjectModel.html":{}}}],["authorizationcode",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProject.html":{},"classes/userProjectModel.html":{}}}],["authorizeclient",{"_index":1078,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["authorizeclient(clientid",{"_index":1085,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["authservice",{"_index":48,"title":{"injectables/AuthService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":752,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["available",{"_index":860,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":1525,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('failed",{"_index":840,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('new",{"_index":1206,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('old",{"_index":1204,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('only",{"_index":912,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["badrequestexception('passwords",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('tenant",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1398,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(oldpassword",{"_index":1202,"title":{},"body":{"injectables/TenantsService.html":{}}}],["bcrypt.compare(password",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":1207,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(newpassword",{"_index":1208,"title":{},"body":{"injectables/TenantsService.html":{}}}],["bcrypt.hash(password",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(updateuserdto.newpassword",{"_index":1401,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(uuidv4",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcryptjs",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":506,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["body",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["body('clientid",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["body('clientsecret",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["body('confirmnewpassword",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('newpassword",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('token",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":790,"title":{},"body":{"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1542,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1540,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1491,"title":{},"body":{"index.html":{}}}],["buy",{"_index":722,"title":{},"body":{"injectables/PaypalService.html":{}}}],["cachecontrol",{"_index":624,"title":{},"body":{"injectables/ImageService.html":{}}}],["callback",{"_index":727,"title":{},"body":{"injectables/PaypalService.html":{}}}],["callbackurl",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{}}}],["callhandler",{"_index":937,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{}}}],["can't",{"_index":918,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["canactivate",{"_index":480,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":485,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cancel",{"_index":731,"title":{},"body":{"injectables/PaypalService.html":{}}}],["cancel_url",{"_index":729,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture",{"_index":673,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["capture.id",{"_index":675,"title":{},"body":{"controllers/PaypalController.html":{}}}],["capture.payer",{"_index":678,"title":{},"body":{"controllers/PaypalController.html":{}}}],["capture.result",{"_index":747,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.id",{"_index":736,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.payer.email_address",{"_index":742,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.payer.name.given_name",{"_index":744,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.payer.name.surname",{"_index":745,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.purchase_units[0].amount.currency_code",{"_index":740,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.purchase_units[0].amount.value",{"_index":738,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.result.status",{"_index":737,"title":{},"body":{"injectables/PaypalService.html":{}}}],["capture.status",{"_index":676,"title":{},"body":{"controllers/PaypalController.html":{}}}],["captureorder",{"_index":653,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["captureorder(@param('orderid",{"_index":672,"title":{},"body":{"controllers/PaypalController.html":{}}}],["captureorder(orderid",{"_index":655,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["case",{"_index":952,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["catch",{"_index":501,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":593,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":599,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["character",{"_index":1575,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["characters",{"_index":1047,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["class",{"_index":44,"title":{"classes/HttpExceptionFilter.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["classes",{"_index":589,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"overview.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["click",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["client",{"_index":1087,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["clientid",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/projectModel.html":{}}}],["clientsecret",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/projectModel.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_paypalmodule",{"_index":679,"title":{},"body":{"modules/PaypalModule.html":{},"overview.html":{}}}],["cluster_paypalmodule_providers",{"_index":680,"title":{},"body":{"modules/PaypalModule.html":{},"overview.html":{}}}],["cluster_projectsmodule",{"_index":922,"title":{},"body":{"modules/ProjectsModule.html":{},"overview.html":{}}}],["cluster_projectsmodule_exports",{"_index":923,"title":{},"body":{"modules/ProjectsModule.html":{},"overview.html":{}}}],["cluster_projectsmodule_providers",{"_index":924,"title":{},"body":{"modules/ProjectsModule.html":{},"overview.html":{}}}],["cluster_tenantmodule",{"_index":1142,"title":{},"body":{"modules/TenantModule.html":{},"overview.html":{}}}],["cluster_tenantmodule_exports",{"_index":1143,"title":{},"body":{"modules/TenantModule.html":{},"overview.html":{}}}],["cluster_tenantmodule_providers",{"_index":1144,"title":{},"body":{"modules/TenantModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1306,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1309,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1307,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1308,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coffee",{"_index":723,"title":{},"body":{"injectables/PaypalService.html":{}}}],["completed",{"_index":956,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["complex",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":512,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('facebook_callback_url",{"_index":549,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["configservice.get('facebook_client_id",{"_index":547,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["configservice.get('facebook_client_secret",{"_index":548,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["configservice.get('github_callback_url",{"_index":575,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["configservice.get('github_client_id",{"_index":573,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["configservice.get('github_client_secret",{"_index":574,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["configservice.get('google_callback_url",{"_index":586,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_client_id",{"_index":584,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_client_secret",{"_index":585,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["confirm",{"_index":1619,"title":{},"body":{"classes/updateUserModel.html":{}}}],["confirmnewpassword",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["confirmpassword",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["conflictexception",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["conflictexception('email",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["conflictexception('name",{"_index":1191,"title":{},"body":{"injectables/TenantsService.html":{}}}],["conflictexception('password",{"_index":1074,"title":{},"body":{"classes/Tenant.html":{}}}],["conflictexception('project",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["conflictexception('tenant",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('error",{"_index":1195,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["const",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":493,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":639,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["constructor(authservice",{"_index":580,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["constructor(configservice",{"_index":511,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{}}}],["constructor(jwtservice",{"_index":483,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(paypaltransactionmodel",{"_index":774,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["constructor(paypaltransactionservice",{"_index":694,"title":{},"body":{"injectables/PaypalService.html":{}}}],["constructor(private",{"_index":495,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["constructor(projectmodel",{"_index":810,"title":{},"body":{"injectables/ProjectService.html":{}}}],["constructor(tenantmodel",{"_index":1154,"title":{},"body":{"injectables/TenantsService.html":{}}}],["constructor(usermodel",{"_index":631,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["contain",{"_index":1040,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["context",{"_index":488,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":496,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":946,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["controller",{"_index":51,"title":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('paypal",{"_index":666,"title":{},"body":{"controllers/PaypalController.html":{}}}],["controller('projects",{"_index":889,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["controller('tenants",{"_index":1115,"title":{},"body":{"controllers/TenantController.html":{}}}],["controller('users",{"_index":1279,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":1409,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":804,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["create(createprojectdto",{"_index":812,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["create(createtenantdto",{"_index":1159,"title":{},"body":{"injectables/TenantsService.html":{}}}],["create(createuserdto",{"_index":1341,"title":{},"body":{"injectables/UsersService.html":{}}}],["createclient(supabaseurl",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["created",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["createdat",{"_index":749,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/UserProject.html":{}}}],["createdproject",{"_index":834,"title":{},"body":{"injectables/ProjectService.html":{}}}],["createdtenant",{"_index":1178,"title":{},"body":{"injectables/TenantsService.html":{}}}],["createdtenant.save",{"_index":1180,"title":{},"body":{"injectables/TenantsService.html":{}}}],["createduser",{"_index":1373,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":1375,"title":{},"body":{"injectables/UsersService.html":{}}}],["creategithubuser",{"_index":1330,"title":{},"body":{"injectables/UsersService.html":{}}}],["creategithubuser(createuserdto",{"_index":1344,"title":{},"body":{"injectables/UsersService.html":{}}}],["createorder",{"_index":654,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["createprojectdto",{"_index":815,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["createtenantdto",{"_index":1161,"title":{},"body":{"injectables/TenantsService.html":{}}}],["createtransaction",{"_index":773,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["createtransaction(data",{"_index":777,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["createuserdto",{"_index":1343,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":957,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["credentials",{"_index":1215,"title":{},"body":{"injectables/TenantsService.html":{}}}],["crypto",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["crypto.randombytes(16).tostring('hex",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["crypto.randombytes(32).tostring('hex",{"_index":833,"title":{},"body":{"injectables/ProjectService.html":{}}}],["ctx",{"_index":600,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":603,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":602,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["currency",{"_index":739,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["currency_code",{"_index":717,"title":{},"body":{"injectables/PaypalService.html":{}}}],["data",{"_index":619,"title":{},"body":{"injectables/ImageService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{}}}],["data.map((item",{"_index":975,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["date",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{},"classes/PaypalTransaction.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["date(date.now",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["date.now",{"_index":770,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"controllers/ProjectsController.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["default",{"_index":769,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["delete",{"_index":805,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":877,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["delete('project/:id",{"_index":1267,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(id",{"_index":816,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["deleted",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Project.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["deleting",{"_index":962,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":721,"title":{},"body":{"injectables/PaypalService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1504,"title":{},"body":{"index.html":{}}}],["digit",{"_index":1045,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["disable",{"_index":553,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["displayname",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["doc",{"_index":1064,"title":{},"body":{"classes/Tenant.html":{}}}],["document",{"_index":766,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["documentation",{"_index":1410,"title":{},"body":{"coverage.html":{}}}],["domain/entities/tenant.entity",{"_index":1175,"title":{},"body":{"injectables/TenantsService.html":{}}}],["domain/entities/user.entity",{"_index":1311,"title":{},"body":{"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["don't",{"_index":850,"title":{},"body":{"injectables/ProjectService.html":{}}}],["done",{"_index":540,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["done(new",{"_index":563,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["done(null",{"_index":564,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["dtos/project.model",{"_index":887,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["dtos/signinrequest.model",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/signintenantresponse.model",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/signinuserresponse.model",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/tenant.model",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["dtos/updatetenant.model",{"_index":1114,"title":{},"body":{"controllers/TenantController.html":{}}}],["dtos/updateuser.model",{"_index":1278,"title":{},"body":{"controllers/UserController.html":{}}}],["dtos/user.model",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["due",{"_index":851,"title":{},"body":{"injectables/ProjectService.html":{}}}],["e2e",{"_index":1514,"title":{},"body":{"index.html":{}}}],["each",{"_index":1593,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["efficient",{"_index":1492,"title":{},"body":{"index.html":{}}}],["email",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["email.service",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["emails",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["emails[0",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["emails[0].value",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["emailservice",{"_index":250,"title":{"injectables/EmailService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["ensureindexes",{"_index":629,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["environment",{"_index":702,"title":{},"body":{"injectables/PaypalService.html":{}}}],["error",{"_index":503,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["error('passwords",{"_index":1062,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["error('project",{"_index":1219,"title":{},"body":{"injectables/TenantsService.html":{}}}],["error('tenant",{"_index":1214,"title":{},"body":{"injectables/TenantsService.html":{}}}],["error(`user",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.code",{"_index":642,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/Tenant.html":{}}}],["error.getstatus",{"_index":1126,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["error.message",{"_index":1127,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["error.message.includes('email",{"_index":1070,"title":{},"body":{"classes/Tenant.html":{}}}],["error.message.includes('name",{"_index":1068,"title":{},"body":{"classes/Tenant.html":{}}}],["error.message.includes('password",{"_index":1072,"title":{},"body":{"classes/Tenant.html":{}}}],["error.name",{"_index":1065,"title":{},"body":{"classes/Tenant.html":{}}}],["error.status",{"_index":1129,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["eslint",{"_index":552,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["eslint/ban",{"_index":557,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["example",{"_index":1500,"title":{},"body":{"index.html":{}}}],["exception",{"_index":597,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":591,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":596,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":610,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":605,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":609,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":592,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exchangecodewithtoken",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["exchangecodewithtoken(@body",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["exchangecodewithtoken(obj",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["exchangetokenforuserdata",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{}}}],["exchangetokenforuserdata(obj",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["exclude",{"_index":1586,"title":{},"body":{"classes/tenantModel.html":{}}}],["exec",{"_index":846,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":486,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{}}}],["existingtenant",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{}}}],["existingtenant.email",{"_index":1186,"title":{},"body":{"injectables/TenantsService.html":{}}}],["existinguser",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["existinguserproject",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserproject.authorizationaccesstoken",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserproject.authorizationcode",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserproject.expiredate",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":1187,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["expired",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["expiredate",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProject.html":{},"classes/userProjectModel.html":{}}}],["expiresin",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":615,"title":{},"body":{"injectables/ImageService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["extends",{"_index":533,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Project.html":{}}}],["extracttokenfromheader",{"_index":481,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["extracttokenfromheader(request",{"_index":489,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpc3mioijzdxbhymfzzsisinjlzii6inbxdnz0bxzxendzzxdsagjnzhpyiiwicm9szsi6imfub24ilcjpyxqioje3mtgymtixnjqsimv4cci6mjazmzc4ode2nh0.jvdwxdzzzvowfq3pfqflymugrcqucqed2mvq9ejqmpo",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebook",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"dependencies.html":{}}}],["facebookauthcallback",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookauthcallback(@req",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookauthcallback(req",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookauthstrategy",{"_index":251,"title":{"injectables/FacebookAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/FacebookAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["facebookid",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/IndexManagementService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/userModel.html":{}}}],["failed",{"_index":1128,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["false",{"_index":527,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/ImageService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["fileinterceptor",{"_index":1112,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["findall",{"_index":1079,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["findallprojectspertenant",{"_index":806,"title":{},"body":{"injectables/ProjectService.html":{}}}],["findallprojectspertenant(tenantid",{"_index":818,"title":{},"body":{"injectables/ProjectService.html":{}}}],["findalluserswithprojects",{"_index":1331,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail",{"_index":1151,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":1163,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbyfacebookid",{"_index":1332,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyfacebookid(facebookid",{"_index":1350,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbygithubid",{"_index":1333,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbygithubid(githubid",{"_index":1352,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbygoogleid",{"_index":1334,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbygoogleid(googleid",{"_index":1354,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid",{"_index":1152,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":1165,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["findbyidandupdate(id",{"_index":1395,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyidwithprojects",{"_index":1335,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyidwithprojects(id",{"_index":1357,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":807,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["findone(@param('id",{"_index":903,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["findone(id",{"_index":868,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["findone(projectid",{"_index":820,"title":{},"body":{"injectables/ProjectService.html":{}}}],["findtenantbyprojectid",{"_index":1153,"title":{},"body":{"injectables/TenantsService.html":{}}}],["findtenantbyprojectid(projectid",{"_index":1167,"title":{},"body":{"injectables/TenantsService.html":{}}}],["finduserbyprojectid",{"_index":1336,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyprojectid(projectid",{"_index":1359,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["following",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["forwardref",{"_index":926,"title":{},"body":{"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["found",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1490,"title":{},"body":{"index.html":{}}}],["from('authgateimages",{"_index":621,"title":{},"body":{"injectables/ImageService.html":{}}}],["frontendurl",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["function",{"_index":541,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"classes/Tenant.html":{},"classes/User.html":{},"coverage.html":{}}}],["functions",{"_index":1484,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generalresponse",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":869,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["get('email/:email",{"_index":1091,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["get('facebook",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('facebook')@useguards(undefined",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('facebook/callback",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('facebook/callback')@useguards(undefined",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github')@useguards(undefined",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github/callback",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('github/callback')@useguards(undefined",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@useguards(undefined",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback')@useguards(undefined",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('projects/:id",{"_index":1263,"title":{},"body":{"controllers/UserController.html":{}}}],["get('tenantprojects",{"_index":874,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getall",{"_index":863,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getall(authheader",{"_index":871,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getallpertenant",{"_index":864,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getallpertenant(authheader",{"_index":873,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["getbyemail",{"_index":1080,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyemail(@param('email",{"_index":1121,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyemail(email",{"_index":1090,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyid",{"_index":1081,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyid(@param('id",{"_index":1117,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyid(id",{"_index":1093,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["getbyidwithprojects",{"_index":1255,"title":{},"body":{"controllers/UserController.html":{}}}],["getbyidwithprojects(@param('id",{"_index":1284,"title":{},"body":{"controllers/UserController.html":{}}}],["getbyidwithprojects(id",{"_index":1262,"title":{},"body":{"controllers/UserController.html":{}}}],["getmessage",{"_index":932,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["getmessage(statuscode",{"_index":934,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["getprofile",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["gettenantbyprojectid",{"_index":1082,"title":{},"body":{"controllers/TenantController.html":{}}}],["gettenantbyprojectid(projectid",{"_index":1095,"title":{},"body":{"controllers/TenantController.html":{}}}],["getting",{"_index":1486,"title":{"index.html":{}},"body":{}}],["getuserprojects",{"_index":1337,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserprojects(projectref",{"_index":1361,"title":{},"body":{"injectables/UsersService.html":{}}}],["github",{"_index":567,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"dependencies.html":{}}}],["githubauthcallback",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback(@req",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback(req",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthstrategy",{"_index":252,"title":{"injectables/GithubAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GithubAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["githubid",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IndexManagementService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/userModel.html":{}}}],["given",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{}}}],["global",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{}}}],["google",{"_index":579,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["googleauthcallback",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(@req",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(req",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthstrategy",{"_index":253,"title":{"injectables/GoogleAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IndexManagementService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/userModel.html":{}}}],["grow",{"_index":1520,"title":{},"body":{"index.html":{}}}],["guard",{"_index":477,"title":{"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":478,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards/auth.guard",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["hashedpassword",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers",{"_index":885,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["headers('authorization",{"_index":891,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["here",{"_index":1530,"title":{},"body":{"index.html":{}}}],["host",{"_index":522,"title":{},"body":{"injectables/EmailService.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":601,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http://localhost:4200",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["http://localhost:4200/authorize",{"_index":1137,"title":{},"body":{"controllers/TenantController.html":{}}}],["http://localhost:4200/paypal/callback",{"_index":726,"title":{},"body":{"injectables/PaypalService.html":{}}}],["http://localhost:4200/paypal/cancel",{"_index":730,"title":{},"body":{"injectables/PaypalService.html":{}}}],["http://localhost:4200/reset",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpcode",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('authcode",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('login",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('registertenant",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('registeruser",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('token/user",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":594,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpexception('tenant",{"_index":1119,"title":{},"body":{"controllers/TenantController.html":{}}}],["httpexception('user",{"_index":1282,"title":{},"body":{"controllers/UserController.html":{}}}],["httpexception(error.message",{"_index":1125,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpexceptionfilter",{"_index":588,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":1536,"title":{},"body":{"index.html":{}}}],["https://pqvvtmvqzwsewlhbgdzr.supabase.co",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://pqvvtmvqzwsewlhbgdzr.supabase.co/storage/v1/object/public/authgateimages",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpstatus.internal_server_error",{"_index":1130,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpstatus.not_found",{"_index":1120,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["httpstatus.unauthorized",{"_index":1138,"title":{},"body":{"controllers/TenantController.html":{}}}],["id",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1411,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["image.buffer",{"_index":623,"title":{},"body":{"injectables/ImageService.html":{}}}],["image.originalname",{"_index":1223,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["image.service",{"_index":1176,"title":{},"body":{"injectables/TenantsService.html":{}}}],["imageservice",{"_index":33,"title":{"injectables/ImageService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ImageService.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["imageurl",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implements",{"_index":494,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/IndexManagementService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{}}}],["import",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["imports",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":1573,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["incorrect",{"_index":1205,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["index",{"_index":56,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["indexmanagementservice",{"_index":627,"title":{"injectables/IndexManagementService.html":{}},"body":{"injectables/IndexManagementService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["info",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["infrastructure/services/image.service",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":274,"title":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":636,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(paypaltransaction.name",{"_index":779,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["injectmodel(project.name",{"_index":829,"title":{},"body":{"injectables/ProjectService.html":{}}}],["injectmodel(tenant.name",{"_index":830,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{}}}],["injectmodel(user.name",{"_index":1372,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1499,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1502,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1124,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["instead",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intent",{"_index":714,"title":{},"body":{"injectables/PaypalService.html":{}}}],["intercept",{"_index":933,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{}}}],["intercept(context",{"_index":936,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{}}}],["internalservererrorexception",{"_index":1030,"title":{},"body":{"classes/Tenant.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception('failed",{"_index":1196,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["invalid",{"_index":1634,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["invalid'})@isnotempty({message",{"_index":1624,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isarray",{"_index":1009,"title":{},"body":{"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isarray()@validatenested({each",{"_index":1578,"title":{},"body":{"classes/tenantModel.html":{}}}],["isboolean",{"_index":1558,"title":{},"body":{"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isdate",{"_index":1587,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["isemail",{"_index":985,"title":{},"body":{"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["isglobal",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatch",{"_index":1201,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["isnameinuse",{"_index":1189,"title":{},"body":{"injectables/TenantsService.html":{}}}],["isnotempty",{"_index":795,"title":{},"body":{"classes/Project.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isnumber",{"_index":1010,"title":{},"body":{"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional",{"_index":797,"title":{},"body":{"classes/Project.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isarray",{"_index":1006,"title":{},"body":{"classes/SignInUserResponse.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":1613,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["isoptional()@isboolean",{"_index":1553,"title":{},"body":{"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isdate",{"_index":1581,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isemail",{"_index":1602,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["isoptional()@isnumber",{"_index":1000,"title":{},"body":{"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isstring",{"_index":990,"title":{},"body":{"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isoptional()@isstring()@matches(/^(?=.*[a",{"_index":1606,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["ispasswordmatch",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":794,"title":{},"body":{"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["isstring()@isnotempty",{"_index":1555,"title":{},"body":{"classes/projectModel.html":{}}}],["isstring()@isnotempty({message",{"_index":1628,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["isstring()@isoptional",{"_index":1550,"title":{},"body":{"classes/projectModel.html":{}}}],["isstring()@isurl()@isnotempty",{"_index":1548,"title":{},"body":{"classes/projectModel.html":{}}}],["isstring()@minlength(8)@isnotempty({message",{"_index":1568,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["istenant",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["istenant(clientid",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["isurl",{"_index":796,"title":{},"body":{"classes/Project.html":{},"classes/projectModel.html":{}}}],["item",{"_index":899,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["item.projects.length",{"_index":900,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["join",{"_index":1527,"title":{},"body":{"index.html":{}}}],["js",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":1474,"title":{},"body":{"dependencies.html":{}}}],["jwtconstants",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.imageurl",{"_index":1222,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["jwtconstants.secret",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["jwtmodule",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["kamil",{"_index":1534,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["letter",{"_index":1043,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["license",{"_index":1539,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1518,"title":{},"body":{"index.html":{}}}],["line",{"_index":555,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["link",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["links",{"_index":670,"title":{},"body":{"controllers/PaypalController.html":{}}}],["list",{"_index":859,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["local",{"_index":1476,"title":{},"body":{"dependencies.html":{}}}],["login",{"_index":1188,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["loginwithfacebook",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithgithub",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithgoogle",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["long",{"_index":1048,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["lowercase",{"_index":1044,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["lts.1",{"_index":1466,"title":{},"body":{"dependencies.html":{}}}],["map",{"_index":942,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{}}}],["map((data",{"_index":945,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["match",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":1588,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["matches(/^(?=.[a",{"_index":1592,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["matches(/^\\s+@\\s+\\.\\s",{"_index":1622,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["matching",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1227,"title":{},"body":{"classes/User.html":{}}}],["message",{"_index":608,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{},"classes/Tenant.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["metadata",{"_index":1479,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":949,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["methods",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":1246,"title":{},"body":{"classes/User.html":{}}}],["minlength",{"_index":1589,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["minlength(8",{"_index":1591,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["miscellaneous",{"_index":1483,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1517,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1508,"title":{},"body":{"index.html":{}}}],["model",{"_index":632,"title":{},"body":{"injectables/IndexManagementService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/paypal.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/project.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/tenant.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":637,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"classes/userProjectModel.html":{}}}],["mongoose.schema.types.objectid",{"_index":800,"title":{},"body":{"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["mongoosemodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":689,"title":{},"body":{"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot('mongodb://localhost:27017/authgate",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoservererror",{"_index":1066,"title":{},"body":{"classes/Tenant.html":{}}}],["more",{"_index":1529,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1464,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1535,"title":{},"body":{"index.html":{}}}],["name",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["name.familyname",{"_index":561,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["name.givenname",{"_index":560,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["nest",{"_index":1496,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1538,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":940,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1449,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"injectables/IndexManagementService.html":{},"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1113,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateUserModel.html":{}}}],["newemail",{"_index":1389,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["newpayload",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["newtransaction",{"_index":780,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["newtransaction.save",{"_index":782,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["newuserproject",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuserproject.authorizationaccesstoken",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuserproject.authorizationcode",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuserproject.expiredate",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":554,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["next(error",{"_index":1075,"title":{},"body":{"classes/Tenant.html":{}}}],["next(new",{"_index":1061,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["next.handle().pipe",{"_index":944,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":972,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["node.js",{"_index":1489,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":519,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":521,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailer.transporter",{"_index":518,"title":{},"body":{"injectables/EmailService.html":{}}}],["notacceptableexception",{"_index":1031,"title":{},"body":{"classes/Tenant.html":{}}}],["notfoundexception",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":843,"title":{},"body":{"injectables/ProjectService.html":{}}}],["notfoundexception('tenant",{"_index":909,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["notfoundexception('user",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`project",{"_index":853,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`tenant",{"_index":832,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["notunique",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["npm",{"_index":1501,"title":{},"body":{"index.html":{}}}],["null",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":754,"title":{},"body":{"classes/PaypalTransaction.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["oauth20",{"_index":583,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["obj",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SanitizeInterceptor.html":{}}}],["obj._doc",{"_index":981,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["object",{"_index":979,"title":{},"body":{"injectables/SanitizeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["object.assign(project",{"_index":854,"title":{},"body":{"injectables/ProjectService.html":{}}}],["object.assign(tenant",{"_index":1210,"title":{},"body":{"injectables/TenantsService.html":{}}}],["object.assign(user",{"_index":1403,"title":{},"body":{"injectables/UsersService.html":{}}}],["objectid",{"_index":1653,"title":{},"body":{"classes/userProjectModel.html":{}}}],["observable",{"_index":939,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{}}}],["oldpassword",{"_index":1197,"title":{},"body":{"injectables/TenantsService.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["one",{"_index":1041,"title":{},"body":{"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{}}}],["onmoduleinit",{"_index":630,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["open",{"_index":1519,"title":{},"body":{"index.html":{}}}],["optional",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["order",{"_index":661,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["order.id",{"_index":668,"title":{},"body":{"controllers/PaypalController.html":{}}}],["order.links",{"_index":671,"title":{},"body":{"controllers/PaypalController.html":{}}}],["order.result",{"_index":733,"title":{},"body":{"injectables/PaypalService.html":{}}}],["order.status",{"_index":669,"title":{},"body":{"controllers/PaypalController.html":{}}}],["order/:orderid",{"_index":657,"title":{},"body":{"controllers/PaypalController.html":{}}}],["orderid",{"_index":659,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["out",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["outside",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1543,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1385,"title":{},"body":{"injectables/UsersService.html":{}}}],["p._id.tostring",{"_index":1386,"title":{},"body":{"injectables/UsersService.html":{}}}],["package",{"_index":1446,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":663,"title":{},"body":{"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":905,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["pass",{"_index":529,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":545,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":534,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["passportstrategy(strategy",{"_index":566,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["password",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInRequest.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["password/${resettoken",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["password/request",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["password:\\n",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":1050,"title":{},"body":{"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":886,"title":{},"body":{"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":881,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["patch('undelete/:id",{"_index":879,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["patch('updatewithpassword",{"_index":1104,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["pattern",{"_index":1623,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["payer",{"_index":677,"title":{},"body":{"controllers/PaypalController.html":{}}}],["payeremail",{"_index":741,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["payername",{"_index":743,"title":{},"body":{"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["payload",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["payload.role",{"_index":896,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["payload.sub",{"_index":893,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["paypal",{"_index":652,"title":{},"body":{"controllers/PaypalController.html":{},"injectables/PaypalService.html":{}}}],["paypal.core.liveenvironment",{"_index":705,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.core.paypalhttpclient",{"_index":698,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.core.paypalhttpclient(environment",{"_index":710,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.core.sandboxenvironment",{"_index":708,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.orders.orderscapturerequest(orderid",{"_index":734,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal.orders.orderscreaterequest",{"_index":711,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypal/checkout",{"_index":699,"title":{},"body":{"injectables/PaypalService.html":{},"dependencies.html":{}}}],["paypalclient",{"_index":693,"title":{},"body":{"injectables/PaypalService.html":{}}}],["paypalcontroller",{"_index":650,"title":{"controllers/PaypalController.html":{}},"body":{"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"coverage.html":{}}}],["paypalmodule",{"_index":13,"title":{"modules/PaypalModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaypalModule.html":{},"modules.html":{},"overview.html":{}}}],["paypalservice",{"_index":664,"title":{"injectables/PaypalService.html":{}},"body":{"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"coverage.html":{},"overview.html":{}}}],["paypaltransaction",{"_index":685,"title":{"classes/PaypalTransaction.html":{}},"body":{"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"coverage.html":{}}}],["paypaltransaction.name",{"_index":690,"title":{},"body":{"modules/PaypalModule.html":{}}}],["paypaltransactiondocument",{"_index":767,"title":{},"body":{"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"miscellaneous/typealiases.html":{}}}],["paypaltransactionmodel",{"_index":776,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["paypaltransactionschema",{"_index":684,"title":{},"body":{"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paypaltransactionservice",{"_index":681,"title":{"injectables/PaypalTransactionService.html":{}},"body":{"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"coverage.html":{},"overview.html":{}}}],["phone",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["photos",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["photos[0",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["photos[0].value",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["picture",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{}}}],["please",{"_index":1034,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"index.html":{}}}],["port",{"_index":524,"title":{},"body":{"injectables/EmailService.html":{}}}],["post",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["post('authcode",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('authorize",{"_index":1086,"title":{},"body":{"controllers/TenantController.html":{}}}],["post('capture",{"_index":656,"title":{},"body":{"controllers/PaypalController.html":{}}}],["post('create",{"_index":660,"title":{},"body":{"controllers/PaypalController.html":{}}}],["post('image/:id",{"_index":1139,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["post('image/:id')@useinterceptors(undefined",{"_index":1107,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["post('istenant",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('registertenant",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('registeruser",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/user",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["presentation/controllers/user.controller",{"_index":1312,"title":{},"body":{"modules/UserModule.html":{}}}],["presentation/dtos/tenant.model",{"_index":1174,"title":{},"body":{"injectables/TenantsService.html":{}}}],["presentation/dtos/user.model",{"_index":1370,"title":{},"body":{"injectables/UsersService.html":{}}}],["private",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/IndexManagementService.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":703,"title":{},"body":{"injectables/PaypalService.html":{}}}],["process.env.password_reset_jwt_secret",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.paypal_client_id",{"_index":706,"title":{},"body":{"injectables/PaypalService.html":{}}}],["process.env.paypal_client_secret",{"_index":707,"title":{},"body":{"injectables/PaypalService.html":{}}}],["processauth",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["processauth(projectid",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["production",{"_index":704,"title":{},"body":{"injectables/PaypalService.html":{},"index.html":{}}}],["profile",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["profile.email",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile.id",{"_index":559,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["profilefields",{"_index":550,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["progressive",{"_index":1488,"title":{},"body":{"index.html":{}}}],["proj",{"_index":847,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["proj._id.tostring",{"_index":848,"title":{},"body":{"injectables/ProjectService.html":{}}}],["proj.clientid",{"_index":1217,"title":{},"body":{"injectables/TenantsService.html":{}}}],["proj.clientsecret",{"_index":1218,"title":{},"body":{"injectables/TenantsService.html":{}}}],["proj.projectid.tostring",{"_index":1407,"title":{},"body":{"injectables/UsersService.html":{}}}],["project",{"_index":201,"title":{"classes/Project.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["project._id.tostring",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{}}}],["project.authorizationaccesstoken",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["project.authorizationcode",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["project.deleted",{"_index":856,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/UsersService.html":{}}}],["project.entity",{"_index":1029,"title":{},"body":{"classes/Tenant.html":{}}}],["project.module",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["project.name",{"_index":929,"title":{},"body":{"modules/ProjectsModule.html":{}}}],["project.projectid",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["projectid",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/userProjectModel.html":{}}}],["projectlist",{"_index":838,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["projectlist.push(item",{"_index":901,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["projectmodel",{"_index":329,"title":{"classes/projectModel.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"coverage.html":{},"classes/projectModel.html":{}}}],["projectname",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["projectref",{"_index":1363,"title":{},"body":{"injectables/UsersService.html":{}}}],["projects",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["projects._id",{"_index":845,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["projects.clientid",{"_index":1212,"title":{},"body":{"injectables/TenantsService.html":{}}}],["projects.clientsecret",{"_index":1213,"title":{},"body":{"injectables/TenantsService.html":{}}}],["projectsafterupdate",{"_index":855,"title":{},"body":{"injectables/ProjectService.html":{}}}],["projectschema",{"_index":801,"title":{},"body":{"classes/Project.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["projectscontroller",{"_index":861,"title":{"controllers/ProjectsController.html":{}},"body":{"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"coverage.html":{}}}],["projectservice",{"_index":45,"title":{"injectables/ProjectService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["projectsmodule",{"_index":14,"title":{"modules/ProjectsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["projetlistcreated",{"_index":894,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["projref",{"_index":1382,"title":{},"body":{"injectables/UsersService.html":{}}}],["projref.projectid",{"_index":1384,"title":{},"body":{"injectables/UsersService.html":{}}}],["promise",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":764,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["prop()@isstring",{"_index":1322,"title":{},"body":{"classes/UserProject.html":{}}}],["prop()@isstring()@isoptional",{"_index":787,"title":{},"body":{"classes/Project.html":{}}}],["prop({default",{"_index":757,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["prop({match",{"_index":1022,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["prop({min",{"_index":1226,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":755,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["prop({type",{"_index":751,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["prop({unique",{"_index":1232,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":508,"title":{"properties.html":{}},"body":{"injectables/EmailService.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["purchase_units",{"_index":715,"title":{},"body":{"injectables/PaypalService.html":{}}}],["put",{"_index":959,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["read",{"_index":1528,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"controllers/PaypalController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["redirecturl",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["ref",{"_index":1324,"title":{},"body":{"classes/UserProject.html":{}}}],["reflect",{"_index":1478,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":539,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["registered",{"_index":1071,"title":{},"body":{"classes/Tenant.html":{}}}],["remove",{"_index":865,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":1134,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":876,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["removeproject",{"_index":1256,"title":{},"body":{"controllers/UserController.html":{}}}],["removeproject(id",{"_index":1266,"title":{},"body":{"controllers/UserController.html":{}}}],["removesensitivefields",{"_index":965,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["removesensitivefields(obj",{"_index":968,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["repository",{"_index":1498,"title":{},"body":{"index.html":{}}}],["req",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PaypalService.html":{},"injectables/ResponseInterceptor.html":{}}}],["request.headers.authorization?.split",{"_index":505,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["request.method",{"_index":950,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["request.prefer('return=representation",{"_index":712,"title":{},"body":{"injectables/PaypalService.html":{}}}],["request.requestbody",{"_index":713,"title":{},"body":{"injectables/PaypalService.html":{}}}],["request['user",{"_index":500,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["required",{"_index":768,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["required'})@isemail",{"_index":1625,"title":{},"body":{"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["required'})@matches(/^(?=.*[a",{"_index":1618,"title":{},"body":{"classes/updateUserModel.html":{}}}],["required'})@matches(/^(?=.[a",{"_index":1569,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["res",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.redirect(redirecturl",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resetlink",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassword",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(token",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpasswordexpires",{"_index":1012,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["resetpasswordtoken",{"_index":1013,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["resettoken",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["resource",{"_index":958,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["response",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["response.status(status).json",{"_index":606,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.statuscode",{"_index":947,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["responseinterceptor",{"_index":930,"title":{"injectables/ResponseInterceptor.html":{}},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["result",{"_index":1287,"title":{},"body":{"controllers/UserController.html":{}}}],["results",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/projectModel.html":{},"properties.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1283,"title":{},"body":{"controllers/UserController.html":{}}}],["return",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["return_url",{"_index":725,"title":{},"body":{"injectables/PaypalService.html":{}}}],["returns",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"injectables/PaypalTransactionService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["run",{"_index":1505,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":941,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":943,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{}}}],["s+@\\s+\\.\\s",{"_index":1033,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["s3",{"_index":1467,"title":{},"body":{"dependencies.html":{}}}],["safe",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salt",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["sanitizedobj",{"_index":980,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["sanitizedobj.confirmpassword",{"_index":983,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["sanitizedobj.password",{"_index":982,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["sanitizeinterceptor",{"_index":963,"title":{"injectables/SanitizeInterceptor.html":{}},"body":{"injectables/SanitizeInterceptor.html":{},"coverage.html":{}}}],["sanitizeresponse",{"_index":966,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["sanitizeresponse(data",{"_index":970,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["save",{"_index":1338,"title":{},"body":{"injectables/UsersService.html":{}}}],["save(user",{"_index":1365,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":1493,"title":{},"body":{"index.html":{}}}],["schema",{"_index":691,"title":{},"body":{"modules/PaypalModule.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"modules/ProjectsModule.html":{},"classes/Tenant.html":{},"modules/TenantModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{}}}],["schemafactory",{"_index":765,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["schemafactory.createforclass(paypaltransaction",{"_index":771,"title":{},"body":{"classes/PaypalTransaction.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(project",{"_index":802,"title":{},"body":{"classes/Project.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(tenant",{"_index":1057,"title":{},"body":{"classes/Tenant.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1250,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(userproject",{"_index":1328,"title":{},"body":{"classes/UserProject.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":551,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["sdk",{"_index":701,"title":{},"body":{"injectables/PaypalService.html":{},"dependencies.html":{}}}],["secret",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["secure",{"_index":526,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail",{"_index":510,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(to",{"_index":514,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendpasswordresetemail",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendpasswordresetemail(@body('email",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendpasswordresetemail(email",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendresetpasswordresetemail",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendresetpasswordresetemail(email",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":700,"title":{},"body":{"injectables/PaypalService.html":{},"dependencies.html":{},"index.html":{}}}],["services/auth.service",{"_index":544,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["services/users.service",{"_index":572,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["side",{"_index":1494,"title":{},"body":{"index.html":{}}}],["signin",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(email",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(signindto",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto.password",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinrequest",{"_index":130,"title":{"classes/SignInRequest.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignInRequest.html":{},"coverage.html":{}}}],["signinresponse",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["signintenantresponse",{"_index":164,"title":{"classes/SignInTenantResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"coverage.html":{}}}],["signinuserresponse",{"_index":162,"title":{"classes/SignInUserResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInUserResponse.html":{},"coverage.html":{}}}],["signinwithfacebook",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithfacebook(user",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithgithub",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithgithub(user",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithgoogle",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithgoogle(user",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{}}}],["signupastenant",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupastenant(@body",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupastenant(tenantsignupdto",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupasuser",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupasuser(@body",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupasuser(usersignupdto",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["smtp.office365.com",{"_index":523,"title":{},"body":{"injectables/EmailService.html":{}}}],["source",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"modules/PaypalModule.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["sparse",{"_index":649,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/User.html":{}}}],["special",{"_index":1574,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["sponsors",{"_index":1522,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1485,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../paypal.entity.ts",{"_index":1596,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../project.entity.ts",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabaseclient.ts",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tenant.entity.ts",{"_index":1597,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":1598,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../userproject.entity.ts",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["src/constants",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["src/constants.ts",{"_index":1413,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/paypal.entity",{"_index":686,"title":{},"body":{"modules/PaypalModule.html":{},"injectables/PaypalTransactionService.html":{}}}],["src/domain/entities/paypal.entity.ts",{"_index":748,"title":{},"body":{"classes/PaypalTransaction.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/paypal.entity.ts:12",{"_index":760,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:15",{"_index":763,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:18",{"_index":756,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:21",{"_index":759,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:24",{"_index":761,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:27",{"_index":762,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:30",{"_index":758,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/paypal.entity.ts:9",{"_index":753,"title":{},"body":{"classes/PaypalTransaction.html":{}}}],["src/domain/entities/project.entity",{"_index":827,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["src/domain/entities/project.entity.ts",{"_index":783,"title":{},"body":{"classes/Project.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/project.entity.ts:13",{"_index":788,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:18",{"_index":789,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:23",{"_index":793,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:29",{"_index":786,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:32",{"_index":791,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/project.entity.ts:8",{"_index":784,"title":{},"body":{"classes/Project.html":{}}}],["src/domain/entities/tenant.entity",{"_index":828,"title":{},"body":{"injectables/ProjectService.html":{},"modules/TenantModule.html":{}}}],["src/domain/entities/tenant.entity.ts",{"_index":1011,"title":{},"body":{"classes/Tenant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/tenant.entity.ts:17",{"_index":1014,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:20",{"_index":1020,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:27",{"_index":1018,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:46",{"_index":1021,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:49",{"_index":1016,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:52",{"_index":1026,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:55",{"_index":1025,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:60",{"_index":1023,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:63",{"_index":1015,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:71",{"_index":1028,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:74",{"_index":1019,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:77",{"_index":1024,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:80",{"_index":1027,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/tenant.entity.ts:83",{"_index":1017,"title":{},"body":{"classes/Tenant.html":{}}}],["src/domain/entities/user.entity",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/UserController.html":{}}}],["src/domain/entities/user.entity.ts",{"_index":1224,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/user.entity.ts:11",{"_index":1225,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:14",{"_index":1237,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:21",{"_index":1231,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:40",{"_index":1238,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:43",{"_index":1229,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:46",{"_index":1242,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:49",{"_index":1241,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:54",{"_index":1239,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:57",{"_index":1244,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:60",{"_index":1236,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:66",{"_index":1228,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:69",{"_index":1235,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:72",{"_index":1234,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:75",{"_index":1233,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:78",{"_index":1230,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:81",{"_index":1243,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/user.entity.ts:84",{"_index":1240,"title":{},"body":{"classes/User.html":{}}}],["src/domain/entities/userproject.entity",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInUserResponse.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["src/domain/entities/userproject.entity.ts",{"_index":1314,"title":{},"body":{"classes/UserProject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/entities/userproject.entity.ts:11",{"_index":1317,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:14",{"_index":1316,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:17",{"_index":1321,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:21",{"_index":1323,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:24",{"_index":1318,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:27",{"_index":1319,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:30",{"_index":1326,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:33",{"_index":1320,"title":{},"body":{"classes/UserProject.html":{}}}],["src/domain/entities/userproject.entity.ts:8",{"_index":1325,"title":{},"body":{"classes/UserProject.html":{}}}],["src/infrastructure/paypal/paypal",{"_index":687,"title":{},"body":{"modules/PaypalModule.html":{},"injectables/PaypalTransactionService.html":{},"coverage.html":{}}}],["src/infrastructure/paypal/paypal.service",{"_index":665,"title":{},"body":{"controllers/PaypalController.html":{},"modules/PaypalModule.html":{}}}],["src/infrastructure/paypal/paypal.service.ts",{"_index":692,"title":{},"body":{"injectables/PaypalService.html":{},"coverage.html":{}}}],["src/infrastructure/paypal/paypal.service.ts:26",{"_index":697,"title":{},"body":{"injectables/PaypalService.html":{}}}],["src/infrastructure/paypal/paypal.service.ts:50",{"_index":696,"title":{},"body":{"injectables/PaypalService.html":{}}}],["src/infrastructure/paypal/paypal.service.ts:8",{"_index":695,"title":{},"body":{"injectables/PaypalService.html":{}}}],["src/infrastructure/services/auth.service",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["src/infrastructure/services/auth.service.ts",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/services/auth.service.ts:123",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:153",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:227",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:24",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:252",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:276",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:298",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:32",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:322",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:356",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:377",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:401",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/auth.service.ts:93",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/services/email.service",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{}}}],["src/infrastructure/services/email.service.ts",{"_index":507,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/infrastructure/services/email.service.ts:21",{"_index":517,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/infrastructure/services/email.service.ts:7",{"_index":513,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/infrastructure/services/image.service",{"_index":1147,"title":{},"body":{"modules/TenantModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/services/image.service.ts",{"_index":611,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{}}}],["src/infrastructure/services/image.service.ts:11",{"_index":616,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/infrastructure/services/image.service.ts:8",{"_index":613,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/infrastructure/services/indexmanagement.service",{"_index":1313,"title":{},"body":{"modules/UserModule.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts",{"_index":628,"title":{},"body":{"injectables/IndexManagementService.html":{},"coverage.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts:10",{"_index":635,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts:14",{"_index":634,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["src/infrastructure/services/indexmanagement.service.ts:7",{"_index":633,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["src/infrastructure/services/project.service",{"_index":888,"title":{},"body":{"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/UserController.html":{}}}],["src/infrastructure/services/project.service.ts",{"_index":803,"title":{},"body":{"injectables/ProjectService.html":{},"coverage.html":{}}}],["src/infrastructure/services/project.service.ts:114",{"_index":823,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:136",{"_index":817,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:14",{"_index":811,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:20",{"_index":814,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:50",{"_index":819,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:62",{"_index":821,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/project.service.ts:79",{"_index":826,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/infrastructure/services/tenants.service",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{}}}],["src/infrastructure/services/tenants.service.ts",{"_index":1149,"title":{},"body":{"injectables/TenantsService.html":{},"coverage.html":{}}}],["src/infrastructure/services/tenants.service.ts:156",{"_index":1169,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:166",{"_index":1170,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:176",{"_index":1158,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:18",{"_index":1155,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:198",{"_index":1157,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:213",{"_index":1168,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:24",{"_index":1160,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:29",{"_index":1166,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:33",{"_index":1164,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:37",{"_index":1162,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:41",{"_index":1171,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/tenants.service.ts:97",{"_index":1173,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/infrastructure/services/users.service",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["src/infrastructure/services/users.service.ts",{"_index":1329,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/services/users.service.ts:103",{"_index":1368,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:145",{"_index":1369,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:19",{"_index":1339,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:202",{"_index":1364,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:212",{"_index":1346,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:240",{"_index":1367,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:250",{"_index":1340,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:26",{"_index":1342,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:263",{"_index":1360,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:31",{"_index":1345,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:36",{"_index":1347,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:44",{"_index":1348,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:49",{"_index":1356,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:53",{"_index":1358,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:64",{"_index":1349,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:68",{"_index":1362,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:87",{"_index":1353,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:91",{"_index":1355,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:95",{"_index":1351,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/services/users.service.ts:99",{"_index":1366,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/strategies/facebookauth.strategy",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/strategies/facebookauth.strategy.ts",{"_index":532,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/strategies/facebookauth.strategy.ts:11",{"_index":537,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["src/infrastructure/strategies/facebookauth.strategy.ts:24",{"_index":542,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["src/infrastructure/strategies/githubauth.strategy",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/strategies/githubauth.strategy.ts",{"_index":565,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/strategies/githubauth.strategy.ts:10",{"_index":569,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["src/infrastructure/strategies/githubauth.strategy.ts:25",{"_index":570,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["src/infrastructure/strategies/googleauth.strategy",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/strategies/googleauth.strategy.ts",{"_index":578,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/strategies/googleauth.strategy.ts:21",{"_index":582,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["src/infrastructure/strategies/googleauth.strategy.ts:8",{"_index":581,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["src/infrastructure/supabase/supabaseclient.ts",{"_index":1429,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1432,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth.module.ts",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/paypal.module.ts",{"_index":682,"title":{},"body":{"modules/PaypalModule.html":{}}}],["src/modules/project.module.ts",{"_index":925,"title":{},"body":{"modules/ProjectsModule.html":{}}}],["src/modules/tenant.module.ts",{"_index":1145,"title":{},"body":{"modules/TenantModule.html":{}}}],["src/modules/user.module.ts",{"_index":1310,"title":{},"body":{"modules/UserModule.html":{}}}],["src/presentation/controllers/auth.controller",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/presentation/controllers/auth.controller.ts",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/presentation/controllers/auth.controller.ts:109",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:113",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:125",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:129",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:141",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:145",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:156",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:161",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:174",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:38",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:44",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:50",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:56",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:62",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/auth.controller.ts:83",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/presentation/controllers/paypal.controller",{"_index":683,"title":{},"body":{"modules/PaypalModule.html":{}}}],["src/presentation/controllers/paypal.controller.ts",{"_index":651,"title":{},"body":{"controllers/PaypalController.html":{},"coverage.html":{}}}],["src/presentation/controllers/paypal.controller.ts:19",{"_index":658,"title":{},"body":{"controllers/PaypalController.html":{}}}],["src/presentation/controllers/paypal.controller.ts:9",{"_index":662,"title":{},"body":{"controllers/PaypalController.html":{}}}],["src/presentation/controllers/project.controller",{"_index":927,"title":{},"body":{"modules/ProjectsModule.html":{}}}],["src/presentation/controllers/project.controller.ts",{"_index":862,"title":{},"body":{"controllers/ProjectsController.html":{},"coverage.html":{}}}],["src/presentation/controllers/project.controller.ts:143",{"_index":878,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:177",{"_index":884,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:33",{"_index":867,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:47",{"_index":872,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:63",{"_index":875,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:72",{"_index":870,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:77",{"_index":882,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/project.controller.ts:93",{"_index":880,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["src/presentation/controllers/tenant.controller",{"_index":1146,"title":{},"body":{"modules/TenantModule.html":{}}}],["src/presentation/controllers/tenant.controller.ts",{"_index":1077,"title":{},"body":{"controllers/TenantController.html":{},"coverage.html":{}}}],["src/presentation/controllers/tenant.controller.ts:110",{"_index":1098,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:132",{"_index":1097,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:148",{"_index":1088,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:167",{"_index":1108,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:174",{"_index":1096,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:182",{"_index":1109,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:33",{"_index":1089,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:38",{"_index":1094,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:47",{"_index":1092,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:56",{"_index":1100,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/tenant.controller.ts:86",{"_index":1105,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/presentation/controllers/user.controller.ts",{"_index":1253,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/presentation/controllers/user.controller.ts:138",{"_index":1271,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:159",{"_index":1275,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:183",{"_index":1269,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:205",{"_index":1265,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:221",{"_index":1268,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:245",{"_index":1276,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:252",{"_index":1277,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:40",{"_index":1259,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:45",{"_index":1261,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:61",{"_index":1264,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:77",{"_index":1260,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user.controller.ts:93",{"_index":1258,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/dtos/project.model",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"modules/ProjectsModule.html":{}}}],["src/presentation/dtos/project.model.ts",{"_index":1435,"title":{},"body":{"coverage.html":{},"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:12",{"_index":1557,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:16",{"_index":1551,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:20",{"_index":1552,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:24",{"_index":1556,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:29",{"_index":1549,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/project.model.ts:33",{"_index":1554,"title":{},"body":{"classes/projectModel.html":{}}}],["src/presentation/dtos/signinrequest.model.ts",{"_index":984,"title":{},"body":{"classes/SignInRequest.html":{},"coverage.html":{}}}],["src/presentation/dtos/signinrequest.model.ts:5",{"_index":986,"title":{},"body":{"classes/SignInRequest.html":{}}}],["src/presentation/dtos/signinrequest.model.ts:8",{"_index":987,"title":{},"body":{"classes/SignInRequest.html":{}}}],["src/presentation/dtos/signintenantresponse.model",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts",{"_index":988,"title":{},"body":{"classes/SignInTenantResponse.html":{},"coverage.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:11",{"_index":992,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:15",{"_index":995,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:19",{"_index":991,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:23",{"_index":997,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:27",{"_index":993,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:30",{"_index":996,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:5",{"_index":989,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signintenantresponse.model.ts:8",{"_index":994,"title":{},"body":{"classes/SignInTenantResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts",{"_index":998,"title":{},"body":{"classes/SignInUserResponse.html":{},"coverage.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:12",{"_index":999,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:15",{"_index":1004,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:18",{"_index":1002,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:22",{"_index":1005,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:26",{"_index":1003,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:30",{"_index":1001,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:33",{"_index":1008,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/signinuserresponse.model.ts:37",{"_index":1007,"title":{},"body":{"classes/SignInUserResponse.html":{}}}],["src/presentation/dtos/tenant.model",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/presentation/dtos/tenant.model.ts",{"_index":1436,"title":{},"body":{"coverage.html":{},"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:19",{"_index":1567,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:22",{"_index":1565,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:31",{"_index":1576,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:32",{"_index":1563,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:36",{"_index":1583,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:40",{"_index":1582,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:44",{"_index":1566,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:48",{"_index":1577,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:52",{"_index":1562,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:56",{"_index":1585,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:62",{"_index":1580,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:65",{"_index":1584,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/tenant.model.ts:69",{"_index":1564,"title":{},"body":{"classes/tenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model",{"_index":1177,"title":{},"body":{"injectables/TenantsService.html":{}}}],["src/presentation/dtos/updatetenant.model.ts",{"_index":1437,"title":{},"body":{"coverage.html":{},"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:17",{"_index":1605,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:21",{"_index":1603,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:25",{"_index":1612,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:29",{"_index":1599,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:33",{"_index":1616,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:37",{"_index":1604,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:43",{"_index":1615,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:47",{"_index":1601,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:51",{"_index":1611,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:61",{"_index":1610,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updatetenant.model.ts:65",{"_index":1600,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["src/presentation/dtos/updateuser.model",{"_index":1371,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/presentation/dtos/updateuser.model.ts",{"_index":1438,"title":{},"body":{"coverage.html":{},"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:17",{"_index":1629,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:24",{"_index":1626,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:28",{"_index":1632,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:32",{"_index":1627,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:36",{"_index":1617,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:40",{"_index":1633,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:44",{"_index":1621,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:48",{"_index":1631,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:60",{"_index":1630,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/updateuser.model.ts:72",{"_index":1620,"title":{},"body":{"classes/updateUserModel.html":{}}}],["src/presentation/dtos/user.model",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"modules/ProjectsModule.html":{}}}],["src/presentation/dtos/user.model.ts",{"_index":1440,"title":{},"body":{"coverage.html":{},"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:18",{"_index":1643,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:27",{"_index":1644,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:28",{"_index":1636,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:32",{"_index":1648,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:36",{"_index":1647,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:43",{"_index":1638,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:47",{"_index":1645,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:51",{"_index":1640,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:55",{"_index":1641,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:59",{"_index":1639,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:63",{"_index":1642,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:67",{"_index":1635,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:71",{"_index":1646,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:74",{"_index":1649,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/user.model.ts:78",{"_index":1637,"title":{},"body":{"classes/userModel.html":{}}}],["src/presentation/dtos/userproject.model.ts",{"_index":1441,"title":{},"body":{"coverage.html":{},"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.model.ts:12",{"_index":1650,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.model.ts:15",{"_index":1652,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.model.ts:6",{"_index":1654,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/dtos/userproject.model.ts:9",{"_index":1651,"title":{},"body":{"classes/userProjectModel.html":{}}}],["src/presentation/filters/http",{"_index":590,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/presentation/guards/auth.guard.ts",{"_index":479,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/presentation/guards/auth.guard.ts:12",{"_index":484,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/presentation/guards/auth.guard.ts:15",{"_index":487,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/presentation/guards/auth.guard.ts:30",{"_index":492,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/presentation/guards/auth.guard.ts:40",{"_index":490,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/presentation/interceptors/response.interceptor.ts",{"_index":931,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/presentation/interceptors/response.interceptor.ts:12",{"_index":938,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/presentation/interceptors/response.interceptor.ts:27",{"_index":935,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/presentation/interceptors/sanitize.interceptor.ts",{"_index":964,"title":{},"body":{"injectables/SanitizeInterceptor.html":{},"coverage.html":{}}}],["src/presentation/interceptors/sanitize.interceptor.ts:12",{"_index":967,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["src/presentation/interceptors/sanitize.interceptor.ts:16",{"_index":971,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["src/presentation/interceptors/sanitize.interceptor.ts:23",{"_index":969,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["start",{"_index":1506,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1509,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1510,"title":{},"body":{"index.html":{}}}],["started",{"_index":1487,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1497,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1412,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":604,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{}}}],["statuscode",{"_index":607,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["stay",{"_index":1531,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":535,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["string",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["strong",{"_index":1073,"title":{},"body":{"classes/Tenant.html":{}}}],["sub",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":515,"title":{},"body":{"injectables/EmailService.html":{}}}],["success",{"_index":1292,"title":{},"body":{"controllers/UserController.html":{}}}],["successfully",{"_index":955,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"controllers/UserController.html":{}}}],["supabase",{"_index":617,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["supabase.storage",{"_index":620,"title":{},"body":{"injectables/ImageService.html":{}}}],["supabase/supabase",{"_index":1454,"title":{},"body":{"dependencies.html":{}}}],["supabase/supabaseclient",{"_index":618,"title":{},"body":{"injectables/ImageService.html":{}}}],["supabasekey",{"_index":1430,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["supabaseurl",{"_index":1431,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":546,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["support",{"_index":1523,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1541,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":951,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["t.name",{"_index":1200,"title":{},"body":{"injectables/TenantsService.html":{}}}],["table",{"_index":1445,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1444,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":1069,"title":{},"body":{"classes/Tenant.html":{}}}],["targetproject",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["targetproject.callbackurl",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetproject.deleted",{"_index":1289,"title":{},"body":{"controllers/UserController.html":{}}}],["targetproject.name",{"_index":1290,"title":{},"body":{"controllers/UserController.html":{}}}],["targetproject.push(project",{"_index":1387,"title":{},"body":{"injectables/UsersService.html":{}}}],["targettenant",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["targettenant.projects.find",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{}}}],["targetuser",{"_index":1300,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["targetuser._id",{"_index":1304,"title":{},"body":{"controllers/UserController.html":{}}}],["targetuser.email",{"_index":1392,"title":{},"body":{"injectables/UsersService.html":{}}}],["targetuserid",{"_index":1303,"title":{},"body":{"controllers/UserController.html":{}}}],["targetuserproject",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["targetuserproject.authorizationaccesstoken",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["targetuserproject.deleted",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["targetuserproject.expiredate",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["tenant",{"_index":360,"title":{"classes/Tenant.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tenant._id",{"_index":910,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["tenant.confirmpassword",{"_index":1209,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.deleted",{"_index":1211,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.email",{"_index":1198,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.image",{"_index":1221,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.module",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/UserModule.html":{}}}],["tenant.name",{"_index":1148,"title":{},"body":{"modules/TenantModule.html":{},"injectables/TenantsService.html":{}}}],["tenant.password",{"_index":1203,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenant.projects",{"_index":842,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.projects.find",{"_index":1216,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["tenant.projects.find((proj",{"_index":849,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.projects.length",{"_index":841,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.projects.push(createdproject",{"_index":836,"title":{},"body":{"injectables/ProjectService.html":{}}}],["tenant.save",{"_index":837,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{}}}],["tenantafterupdate",{"_index":1193,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenantcontroller",{"_index":1076,"title":{"controllers/TenantController.html":{}},"body":{"controllers/TenantController.html":{},"modules/TenantModule.html":{},"coverage.html":{}}}],["tenantdocument",{"_index":1032,"title":{},"body":{"classes/Tenant.html":{},"injectables/TenantsService.html":{},"miscellaneous/typealiases.html":{}}}],["tenantid",{"_index":813,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"classes/projectModel.html":{}}}],["tenantmodel",{"_index":135,"title":{"classes/tenantModel.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"coverage.html":{},"classes/tenantModel.html":{}}}],["tenantmodule",{"_index":15,"title":{"modules/TenantModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["tenants",{"_index":897,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["tenants.service",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["tenants.some",{"_index":1190,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenants.some((t",{"_index":1199,"title":{},"body":{"injectables/TenantsService.html":{}}}],["tenantschema",{"_index":1056,"title":{},"body":{"classes/Tenant.html":{},"modules/TenantModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tenantschema.post('save",{"_index":1063,"title":{},"body":{"classes/Tenant.html":{}}}],["tenantschema.pre('save",{"_index":1058,"title":{},"body":{"classes/Tenant.html":{}}}],["tenantservice",{"_index":890,"title":{},"body":{"controllers/ProjectsController.html":{},"injectables/UsersService.html":{}}}],["tenantsignupdto",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tenantsservice",{"_index":47,"title":{"injectables/TenantsService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"modules/TenantModule.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["tenanttocreate",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["tenantuser",{"_index":916,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["tenantuser.role",{"_index":917,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["test",{"_index":1513,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1516,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1515,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1512,"title":{},"body":{"index.html":{}}}],["text",{"_index":516,"title":{},"body":{"injectables/EmailService.html":{}}}],["thanks",{"_index":1521,"title":{},"body":{"index.html":{}}}],["this.authservice.processauth",{"_index":1291,"title":{},"body":{"controllers/UserController.html":{}}}],["this.authservice.resetpassword",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendresetpasswordresetemail(email",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto.email",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinwithfacebook(user1",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinwithgithub(user1",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinwithgoogle(user1",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupastenant(tenantsignupdto",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupasuser(usersignupdto",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validatefacebookuser(user",{"_index":562,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{}}}],["this.authservice.validategithubuser(profile",{"_index":577,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["this.authservice.validategoogleuser(profile",{"_index":587,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["this.configservice.get('gmail_pass",{"_index":530,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('gmail_user",{"_index":528,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.confirmpassword",{"_index":1049,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["this.emailservice.sendmail",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ensureindexes",{"_index":640,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.extracttokenfromheader(request",{"_index":497,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.findall",{"_index":1133,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{}}}],["this.findallprojectspertenant(tenantid",{"_index":839,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.findbyemail(email",{"_index":1185,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.findbyemail(newemail",{"_index":1391,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findbyid(id",{"_index":1184,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["this.frontendurl}/auth/facebook/callback?token=${access_token}&user=${encodeuricomponent(json.stringify(user",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.frontendurl}/auth/github/callback?token=${access_token}&user=${json.stringify(user",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.frontendurl}/auth/google/callback?token=${access_token}&user=${json.stringify(user",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.getmessage(statuscode",{"_index":948,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["this.getuserprojects(user.projects",{"_index":1378,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.imageservice.upload('tenants",{"_index":1220,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.imageservice.upload('users",{"_index":1408,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.ismodified('password",{"_index":1059,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["this.jwtservice.sign",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(newpayload",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":502,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["this.password",{"_index":1060,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["this.paypalclient",{"_index":709,"title":{},"body":{"injectables/PaypalService.html":{}}}],["this.paypalclient.execute(request",{"_index":732,"title":{},"body":{"injectables/PaypalService.html":{}}}],["this.paypalservice.captureorder(orderid",{"_index":674,"title":{},"body":{"controllers/PaypalController.html":{}}}],["this.paypalservice.createorder",{"_index":667,"title":{},"body":{"controllers/PaypalController.html":{}}}],["this.paypaltransactionmodel(data",{"_index":781,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["this.paypaltransactionservice.createtransaction(transactiondata",{"_index":746,"title":{},"body":{"injectables/PaypalService.html":{}}}],["this.projectmodel",{"_index":835,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.projectservice.create",{"_index":895,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.delete(id",{"_index":915,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.findallprojectspertenant(tenantid",{"_index":902,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.findone(id",{"_index":904,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.findone(projectid",{"_index":1288,"title":{},"body":{"controllers/UserController.html":{}}}],["this.projectservice.undelete(id",{"_index":911,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.projectservice.update",{"_index":906,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.removesensitivefields(data",{"_index":977,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["this.removesensitivefields(item",{"_index":976,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["this.sanitizeresponse(data",{"_index":973,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["this.signin(email",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tenantmodel",{"_index":844,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.tenantmodel(createtenantdto",{"_index":1179,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantmodel.find",{"_index":1183,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantmodel.findbyid(id",{"_index":1181,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantmodel.findbyid(tenantid",{"_index":831,"title":{},"body":{"injectables/ProjectService.html":{}}}],["this.tenantmodel.findone",{"_index":1182,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantmodel.findoneandupdate",{"_index":1194,"title":{},"body":{"injectables/TenantsService.html":{}}}],["this.tenantservice.findall",{"_index":898,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.tenantservice.findbyid(userid",{"_index":914,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.tenantservice.findtenantbyprojectid",{"_index":1383,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.tenantservice.findtenantbyprojectid(id",{"_index":908,"title":{},"body":{"controllers/ProjectsController.html":{}}}],["this.tenantsservice.addimage(id",{"_index":1141,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.authorizeclient",{"_index":1136,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.authorizeclient(clientid",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.tenantsservice.create(tenanttocreate",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tenantsservice.findall",{"_index":1116,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.findbyemail(decoded.email",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tenantsservice.findbyemail(email",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TenantController.html":{}}}],["this.tenantsservice.findbyid(id",{"_index":1118,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.findtenantbyprojectid(projectid",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TenantController.html":{}}}],["this.tenantsservice.remove(id",{"_index":1135,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.undelete(id",{"_index":1132,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.update",{"_index":1123,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantsservice.updatewithpassword",{"_index":1131,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.transporter",{"_index":520,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.transporter.sendmail",{"_index":531,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.usermodel",{"_index":1394,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel(createuserdto",{"_index":1374,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.collection.createindex",{"_index":646,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.usermodel.collection.dropindex('facebookid_1",{"_index":645,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.usermodel.collection.dropindex('githubid_1",{"_index":644,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.usermodel.collection.dropindex('googleid_1",{"_index":641,"title":{},"body":{"injectables/IndexManagementService.html":{}}}],["this.usermodel.find",{"_index":1377,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().populate('projects",{"_index":1379,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id",{"_index":1380,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id).exec",{"_index":1396,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid",{"_index":1404,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1381,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.addimage(id",{"_index":1305,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.delete(id",{"_index":1301,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1280,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":1286,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(id",{"_index":1281,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(userid",{"_index":907,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/UserController.html":{}}}],["this.userservice.findbyidwithprojects(id",{"_index":1285,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.finduserbyprojectid(id",{"_index":1302,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":1299,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.undelete(id",{"_index":1298,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":1296,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatewithpassword",{"_index":1297,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.create",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(usertocreate",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.creategithubuser",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findalluserswithprojects",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.findbyemail(decoded.email",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyemail(email",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyemail(useremail",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyfacebookid(facebookid",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbygithubid(id",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbygoogleid(id",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyid(userid",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.save(user",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.verifytokenandgetpayload(authheader",{"_index":892,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["this.verifytokenandgetpayload(token",{"_index":499,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["throw",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["timestamps",{"_index":799,"title":{},"body":{"classes/Project.html":{}}}],["token",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["touch",{"_index":1532,"title":{},"body":{"index.html":{}}}],["transaction.service",{"_index":688,"title":{},"body":{"modules/PaypalModule.html":{},"injectables/PaypalService.html":{}}}],["transaction.service.ts",{"_index":772,"title":{},"body":{"injectables/PaypalTransactionService.html":{},"coverage.html":{}}}],["transaction.service.ts:10",{"_index":775,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["transaction.service.ts:16",{"_index":778,"title":{},"body":{"injectables/PaypalTransactionService.html":{}}}],["transactiondata",{"_index":735,"title":{},"body":{"injectables/PaypalService.html":{}}}],["transformer",{"_index":1460,"title":{},"body":{"dependencies.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["transporter",{"_index":509,"title":{},"body":{"injectables/EmailService.html":{}}}],["true",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/IndexManagementService.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["true})@isstring()@isnotempty",{"_index":792,"title":{},"body":{"classes/Project.html":{}}}],["true})@isstring()@isurl()@isnotempty",{"_index":785,"title":{},"body":{"classes/Project.html":{}}}],["true})@type(undefined",{"_index":1614,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["true})@type(undefined)@isoptional",{"_index":1579,"title":{},"body":{"classes/tenantModel.html":{}}}],["try",{"_index":498,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/IndexManagementService.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1537,"title":{},"body":{"index.html":{}}}],["type",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"classes/PaypalTransaction.html":{},"injectables/PaypalTransactionService.html":{},"classes/Project.html":{},"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/SanitizeInterceptor.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserProject.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"miscellaneous/typealiases.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1594,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":978,"title":{},"body":{"injectables/SanitizeInterceptor.html":{}}}],["types",{"_index":558,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["types.objectid",{"_index":750,"title":{},"body":{"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["typescript",{"_index":556,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["unauthorizedexception('account",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":504,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["unauthorizedexception('unable",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/PaypalTransaction.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{}}}],["undelete",{"_index":808,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["undelete(id",{"_index":822,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["unique",{"_index":648,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/Project.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["unit",{"_index":1511,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/PaypalController.html":{},"injectables/PaypalService.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["unlicensed",{"_index":1561,"title":{},"body":{"properties.html":{}}}],["update",{"_index":809,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["update(id",{"_index":824,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["update(updatetenantdto",{"_index":1099,"title":{},"body":{"controllers/TenantController.html":{}}}],["update(updateuserdto",{"_index":1270,"title":{},"body":{"controllers/UserController.html":{}}}],["updated",{"_index":960,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["updatedat",{"_index":1315,"title":{},"body":{"classes/UserProject.html":{}}}],["updatedtenant",{"_index":1122,"title":{},"body":{"controllers/TenantController.html":{}}}],["updateduser",{"_index":1295,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprojectdto",{"_index":825,"title":{},"body":{"injectables/ProjectService.html":{},"controllers/ProjectsController.html":{}}}],["updatetenantdto",{"_index":1101,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{}}}],["updatetenantmodel",{"_index":1103,"title":{"classes/updateTenantModel.html":{}},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"coverage.html":{},"classes/updateTenantModel.html":{}}}],["updateuserdto",{"_index":1272,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["updateuserdto.confirmnewpassword",{"_index":1400,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.email",{"_index":1390,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.newpassword",{"_index":1399,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.oldpassword",{"_index":1397,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateusermodel",{"_index":1274,"title":{"classes/updateUserModel.html":{}},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateUserModel.html":{}}}],["updatewithpassword",{"_index":1083,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["updatewithpassword(id",{"_index":1172,"title":{},"body":{"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["updatewithpassword(updatetenantdto",{"_index":1102,"title":{},"body":{"controllers/TenantController.html":{}}}],["updatewithpassword(updateuserdto",{"_index":1273,"title":{},"body":{"controllers/UserController.html":{}}}],["updating",{"_index":961,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":612,"title":{},"body":{"injectables/ImageService.html":{}}}],["upload(`${role}/${id}/${image.originalname",{"_index":622,"title":{},"body":{"injectables/ImageService.html":{}}}],["upload(role",{"_index":614,"title":{},"body":{"injectables/ImageService.html":{}}}],["uploadedfile",{"_index":1111,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["uploadimage",{"_index":1084,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["uploadimage(id",{"_index":1106,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["uppercase",{"_index":1042,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["upsert",{"_index":626,"title":{},"body":{"injectables/ImageService.html":{}}}],["url",{"_index":728,"title":{},"body":{"injectables/PaypalService.html":{},"classes/Tenant.html":{}}}],["usd",{"_index":718,"title":{},"body":{"injectables/PaypalService.html":{}}}],["use",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"classes/Tenant.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authenticationguard",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authenticationguard)@get('profile",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('facebook",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('github",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('google",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":1110,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":1140,"title":{},"body":{"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":220,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/ImageService.html":{},"injectables/IndexManagementService.html":{},"controllers/ProjectsController.html":{},"injectables/TenantsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user._id",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.address",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.age",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.confirmpassword",{"_index":1402,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.deleted",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.email",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["user.facebookid",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.githubid",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.googleid",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.image",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.module",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{}}}],["user.name",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TenantsService.html":{},"modules/UserModule.html":{}}}],["user.password",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.phone",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.projects",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.projects.find",{"_index":1406,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.projects.push(newuserproject",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.projects.some",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.projects.some((project",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.projects?.find",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.resetpasswordexpires",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.resetpasswordtoken",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{}}}],["user.save",{"_index":1388,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.website",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["user1",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["user:email",{"_index":576,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["userafterupdate",{"_index":1393,"title":{},"body":{"injectables/UsersService.html":{}}}],["usercontroller",{"_index":1252,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":638,"title":{},"body":{"injectables/IndexManagementService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["useremail",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":140,"title":{"classes/userModel.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/IndexManagementService.html":{},"modules/ProjectsModule.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/userModel.html":{}}}],["usermodule",{"_index":16,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["username}${math.floor(math.random",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["userproject",{"_index":327,"title":{"classes/UserProject.html":{}},"body":{"injectables/AuthService.html":{},"classes/SignInUserResponse.html":{},"classes/User.html":{},"classes/UserProject.html":{},"coverage.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["userproject.entity",{"_index":1245,"title":{},"body":{"classes/User.html":{}}}],["userprojectmodel",{"_index":1442,"title":{"classes/userProjectModel.html":{}},"body":{"coverage.html":{},"classes/userProjectModel.html":{}}}],["userprojectschema",{"_index":1327,"title":{},"body":{"classes/UserProject.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["users.find((user",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["users.service",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImageService.html":{}}}],["userschema",{"_index":1249,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.pre('save",{"_index":1251,"title":{},"body":{"classes/User.html":{}}}],["userservice",{"_index":568,"title":{},"body":{"injectables/GithubAuthStrategy.html":{},"controllers/ProjectsController.html":{},"controllers/UserController.html":{}}}],["usersignupdto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["usersservice",{"_index":46,"title":{"injectables/UsersService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/ImageService.html":{},"controllers/ProjectsController.html":{},"modules/ProjectsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertocreate",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["userwithproject",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["userwithproject?.projects.find",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["uuid",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["v4",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":1035,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["validate",{"_index":536,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/Tenant.html":{},"classes/User.html":{}}}],["validate(accesstoken",{"_index":538,"title":{},"body":{"injectables/FacebookAuthStrategy.html":{},"injectables/GithubAuthStrategy.html":{},"injectables/GoogleAuthStrategy.html":{}}}],["validatebeforesave",{"_index":1376,"title":{},"body":{"injectables/UsersService.html":{}}}],["validatefacebookuser",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatefacebookuser(profile",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategithubuser",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategithubuser(profile",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategoogleuser",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategoogleuser(profile",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatemodifiedonly",{"_index":857,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/TenantsService.html":{},"injectables/UsersService.html":{}}}],["validatenested",{"_index":1590,"title":{},"body":{"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["validator",{"_index":798,"title":{},"body":{"classes/Project.html":{},"classes/SignInRequest.html":{},"classes/SignInTenantResponse.html":{},"classes/SignInUserResponse.html":{},"classes/Tenant.html":{},"classes/User.html":{},"classes/UserProject.html":{},"dependencies.html":{},"classes/projectModel.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{},"classes/userProjectModel.html":{}}}],["value",{"_index":719,"title":{},"body":{"injectables/PaypalService.html":{},"classes/Tenant.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1414,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1655,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifycallback",{"_index":571,"title":{},"body":{"injectables/GithubAuthStrategy.html":{}}}],["verifytokenandgetpayload",{"_index":482,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["verifytokenandgetpayload(authheader",{"_index":883,"title":{},"body":{"controllers/ProjectsController.html":{},"controllers/TenantController.html":{},"controllers/UserController.html":{}}}],["verifytokenandgetpayload(token",{"_index":491,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["version",{"_index":1559,"title":{},"body":{"properties.html":{}}}],["void",{"_index":598,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["watch",{"_index":1507,"title":{},"body":{"index.html":{}}}],["weak",{"_index":1609,"title":{},"body":{"classes/updateTenantModel.html":{}}}],["website",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInTenantResponse.html":{},"classes/Tenant.html":{},"index.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{}}}],["www\\.[a",{"_index":1052,"title":{},"body":{"classes/Tenant.html":{}}}],["you'd",{"_index":1526,"title":{},"body":{"index.html":{}}}],["z",{"_index":1055,"title":{},"body":{"classes/Tenant.html":{}}}],["z0",{"_index":1053,"title":{},"body":{"classes/Tenant.html":{}}}],["z\\d@$!%*?&]{8",{"_index":1608,"title":{},"body":{"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["z\\d@$!%*?&]{8,}$/.test(value",{"_index":1039,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["z\\d@$!%?&]{8",{"_index":1572,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["z])(?=.*[a",{"_index":1036,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":1607,"title":{},"body":{"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{}}}],["z])(?=.*\\d)[a",{"_index":1037,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{}}}],["z])(?=.[a",{"_index":1570,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["z])(?=.\\d)(?=.[@$!%?&])[a",{"_index":1571,"title":{},"body":{"classes/tenantModel.html":{},"classes/userModel.html":{}}}],["za",{"_index":1038,"title":{},"body":{"classes/Tenant.html":{},"classes/User.html":{},"classes/tenantModel.html":{},"classes/updateTenantModel.html":{},"classes/updateUserModel.html":{},"classes/userModel.html":{}}}],["zoom",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PaypalModule.html":{},"modules/ProjectsModule.html":{},"modules/TenantModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPaypalModule\n\nPaypalModule\n\nAppModule -->\n\nPaypalModule->AppModule\n\n\n\n\n\nProjectsModule\n\nProjectsModule\n\nAppModule -->\n\nProjectsModule->AppModule\n\n\n\n\n\nTenantModule\n\nTenantModule\n\nAppModule -->\n\nTenantModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PaypalModule\n                        \n                        \n                            ProjectsModule\n                        \n                        \n                            TenantModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserModule } from './modules/user.module';\nimport { TenantModule } from './modules/tenant.module';\nimport { ProjectsModule } from './modules/project.module';\nimport { AuthModule } from './modules/auth.module';\nimport { ImageService } from './infrastructure/services/image.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { PaypalModule } from './modules/paypal.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRoot('mongodb://localhost:27017/AuthGate'),\n    UserModule,\n    ProjectsModule,\n    TenantModule,\n    AuthModule,\n    PaypalModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n// providers: [ProjectService, UsersService, TenantsService, AuthService],\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                exchangeCodeWithToken\n                            \n                            \n                                    \n                                    \n                                    Async\n                                exchangeTokenForUserData\n                            \n                            \n                                    \n                                    \n                                    Async\n                                facebookAuthCallback\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                githubAuthCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                googleAuthCallback\n                            \n                            \n                                    \n                                    Async\n                                isTenant\n                            \n                            \n                                    \n                                    \n                                    Async\n                                loginWithFacebook\n                            \n                            \n                                    \n                                    \n                                    Async\n                                loginWithGitHub\n                            \n                            \n                                    \n                                    \n                                    Async\n                                loginWithGoogle\n                            \n                            \n                                    \n                                    Async\n                                resetPassword\n                            \n                            \n                                    \n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    \n                                    \n                                signIn\n                            \n                            \n                                    \n                                    \n                                signUpAsTenant\n                            \n                            \n                                    \n                                    \n                                signUpAsUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        exchangeCodeWithToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    exchangeCodeWithToken(obj: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('authcode')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        exchangeTokenForUserData\n                        \n                    \n                \n            \n            \n                \n                        \n                    exchangeTokenForUserData(obj: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('token/user')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        facebookAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    facebookAuthCallback(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook/callback')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:145\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthenticationGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        githubAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    githubAuthCallback(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github/callback')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        googleAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuthCallback(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/callback')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        isTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    isTenant(clientId: string, clientSecret: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('istenant')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:174\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        loginWithFacebook\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginWithFacebook()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        loginWithGitHub\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginWithGitHub()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('github')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        loginWithGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginWithGoogle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(token: string, newPassword: string, confirmNewPassword: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmNewPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        sendPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendPasswordResetEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password/request')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signUpAsTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsTenant(tenantSignUpDto: tenantModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('registertenant')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantSignUpDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signUpAsUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsUser(userSignUpDto: userModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('registeruser')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/auth.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userSignUpDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Req,\n  Request,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthenticationGuard } from '../guards/auth.guard';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { SignInRequest } from '../dtos/signInRequest.model';\nimport { userModel } from '../dtos/user.model';\nimport { tenantModel } from '../dtos/tenant.model';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Response } from 'express';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\nimport { SignInUserResponse } from '../dtos/signInUserResponse.model';\nimport { SignInTenantResponse } from '../dtos/signInTenantResponse.model';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private usersService: UsersService,\n    private tenantsService: TenantsService,\n  ) {}\n\n  private readonly frontendUrl = 'http://localhost:4200';\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: SignInRequest) {\n    return this.authService.signIn(signInDto.email, signInDto.password);\n  }\n\n  @UseGuards(AuthenticationGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('registeruser')\n  signUpAsUser(@Body() userSignUpDto: userModel) {\n    return this.authService.signUpAsUser(userSignUpDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('registertenant')\n  signUpAsTenant(@Body() tenantSignUpDto: tenantModel) {\n    return this.authService.signUpAsTenant(tenantSignUpDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('authcode')\n  async exchangeCodeWithToken(@Body() obj: { authCode: string }) {\n    const { authCode } = obj;\n\n    const users = await this.usersService.findAllUsersWithProjects();\n\n    const userWithProject = users.find((user) =>\n      user.projects.some((project) => project.authorizationCode === authCode),\n    );\n\n    const targetUserProject = userWithProject?.projects.find(\n      (project) => project.authorizationCode === authCode,\n    );\n\n    return {\n      auth_token: targetUserProject.authorizationAccessToken,\n      userWithProject,\n    };\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('token/user')\n  async exchangeTokenForUserData(\n    @Body() obj: { token: string },\n  ): Promise {\n    const { token } = obj;\n\n    const users = await this.usersService.findAllUsersWithProjects();\n\n    const userWithProject = users.find((user) =>\n      user.projects.some(\n        (project) => project.authorizationAccessToken === token,\n      ),\n    );\n\n    const targetUserProject = userWithProject?.projects.find(\n      (project) => project.authorizationAccessToken === token,\n    );\n\n    if (!targetUserProject.expireDate && !targetUserProject.deleted) {\n      return userWithProject;\n    } else {\n      throw new ConflictException('project may be deleted or token expired');\n    }\n  }\n\n  @Get('github')\n  @UseGuards(AuthGuard('github'))\n  async loginWithGitHub() {}\n\n  @Get('github/callback')\n  @UseGuards(AuthGuard('github'))\n  async githubAuthCallback(@Req() req, @Res() res: Response) {\n    const user1 = req.user;\n    const { access_token, user } =\n      await this.authService.signInWithGitHub(user1);\n\n    const redirectUrl = `${this.frontendUrl}/auth/github/callback?token=${access_token}&user=${JSON.stringify(user)}`;\n\n    return res.redirect(redirectUrl);\n  }\n\n  @Get('google')\n  @UseGuards(AuthGuard('google'))\n  async loginWithGoogle() {}\n\n  @Get('google/callback')\n  @UseGuards(AuthGuard('google'))\n  async googleAuthCallback(@Req() req, @Res() res: Response) {\n    const user1 = req.user;\n    const { access_token, user } =\n      await this.authService.signInWithGoogle(user1);\n\n    const redirectUrl = `${this.frontendUrl}/auth/google/callback?token=${access_token}&user=${JSON.stringify(user)}`;\n\n    return res.redirect(redirectUrl);\n  }\n\n  @Get('facebook')\n  @UseGuards(AuthGuard('facebook'))\n  async loginWithFacebook() {}\n\n  @Get('facebook/callback')\n  @UseGuards(AuthGuard('facebook'))\n  async facebookAuthCallback(@Req() req, @Res() res: Response) {\n    const user1 = req.user;\n    const { access_token, user } =\n      await this.authService.signInWithFacebook(user1);\n\n    const redirectUrl = `${this.frontendUrl}/auth/facebook/callback?token=${access_token}&user=${encodeURIComponent(JSON.stringify(user))}`;\n\n    return res.redirect(redirectUrl);\n  }\n\n  @Post('reset-password/request')\n  async sendPasswordResetEmail(@Body('email') email: string): Promise {\n    await this.authService.sendResetPasswordResetEmail(email);\n  }\n\n  @Post('reset-password')\n  async resetPassword(\n    @Body('token') token: string,\n    @Body('newPassword') newPassword: string,\n    @Body('confirmNewPassword') confirmNewPassword: string,\n  ): Promise {\n    await this.authService.resetPassword(\n      token,\n      newPassword,\n      confirmNewPassword,\n    );\n  }\n\n  @Post('istenant')\n  async isTenant(\n    @Body('clientId') clientId: string,\n    @Body('clientSecret') clientSecret: string,\n  ) {\n    this.tenantsService.authorizeClient(clientId, clientSecret);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nProjectsModule\n\nProjectsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nProjectsModule->AuthModule\n\n\n\n\n\nTenantModule\n\nTenantModule\n\nAuthModule -->\n\nTenantModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\n\n\nFacebookAuthStrategy\n\nFacebookAuthStrategy\n\nAuthModule -->\n\nFacebookAuthStrategy->AuthModule\n\n\n\n\n\nGithubAuthStrategy\n\nGithubAuthStrategy\n\nAuthModule -->\n\nGithubAuthStrategy->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            FacebookAuthStrategy\n                        \n                        \n                            GithubAuthStrategy\n                        \n                        \n                            GoogleAuthStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ProjectsModule\n                        \n                        \n                            TenantModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from 'src/constants';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { AuthController } from 'src/presentation/controllers/auth.controller';\nimport { UserModule } from './user.module';\nimport { TenantModule } from './tenant.module';\nimport { ProjectsModule } from './project.module';\nimport { GithubAuthStrategy } from 'src/infrastructure/Strategies/githubAuth.strategy';\nimport { GoogleAuthStrategy } from 'src/infrastructure/Strategies/googleAuth.strategy';\nimport { EmailService } from 'src/infrastructure/services/email.service';\nimport { FacebookAuthStrategy } from 'src/infrastructure/Strategies/facebookAuth.strategy';\n\n@Module({\n  imports: [\n    UserModule,\n    TenantModule,\n    ProjectsModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1d' },\n    }),\n  ],\n  providers: [\n    AuthService,\n    GithubAuthStrategy,\n    GoogleAuthStrategy,\n    FacebookAuthStrategy,\n    EmailService,\n  ],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                processAuth\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                sendResetPasswordResetEmail\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signInWithFacebook\n                            \n                            \n                                    Async\n                                signInWithGitHub\n                            \n                            \n                                    Async\n                                signInWithGoogle\n                            \n                            \n                                    Async\n                                signUpAsTenant\n                            \n                            \n                                    Async\n                                signUpAsUser\n                            \n                            \n                                    Async\n                                validateFacebookUser\n                            \n                            \n                                    Async\n                                validateGitHubUser\n                            \n                            \n                                    Async\n                                validateGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, tenantsService: TenantsService, jwtService: JwtService, emailService: EmailService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/auth.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantsService\n                                                  \n                                                        \n                                                                        TenantsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    processAuth(projectId: any, userId: string, projectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                projectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(token: string, newPassword: string, confirmNewPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:401\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmNewPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendResetPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendResetPasswordResetEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:377\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInWithFacebook\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInWithFacebook(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:356\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInWithGitHub\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInWithGitHub(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:252\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInWithGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInWithGoogle(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:298\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUpAsTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsTenant(tenantSignUpDto: tenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantSignUpDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUpAsUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUpAsUser(userSignUpDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userSignUpDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateFacebookUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateFacebookUser(profile: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:322\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateGitHubUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateGitHubUser(profile: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:227\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateGoogleUser(profile: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/auth.service.ts:276\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from './users.service';\nimport { SignInUserResponse } from 'src/presentation/dtos/signInUserResponse.model';\nimport { SignInTenantResponse } from 'src/presentation/dtos/signInTenantResponse.model';\nimport { TenantsService } from './tenants.service';\nimport { userModel } from 'src/presentation/dtos/user.model';\nimport { tenantModel } from 'src/presentation/dtos/tenant.model';\nimport * as bcrypt from 'bcrypt';\nimport * as crypto from 'crypto';\nimport { v4 as uuidv4 } from 'uuid';\nimport { UserProject } from 'src/domain/entities/userProject.entity';\nimport { projectModel } from 'src/presentation/dtos/project.model';\nimport { User } from 'src/domain/entities/user.entity';\nimport { EmailService } from './email.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private tenantsService: TenantsService,\n    private jwtService: JwtService,\n    private emailService: EmailService,\n  ) {}\n\n  async signIn(\n    email: string,\n    password: string,\n  ): Promise {\n    let user: any =\n      (await this.usersService.findByEmail(email)) ||\n      (await this.tenantsService.findByEmail(email));\n\n    if (!user || user.deleted) {\n      throw new UnauthorizedException('Account not found or has been deleted');\n    }\n\n    const isPasswordMatch = await bcrypt.compare(password, user.password);\n    if (!isPasswordMatch) throw new UnauthorizedException();\n\n    const payload = {\n      sub: user.id,\n      email: user.email,\n      name: user.name,\n      role: user.role,\n    };\n\n    const generalResponse = {\n      _id: user._id,\n      name: user.name,\n      email: user.email,\n      phone: user.phone,\n      image: user.image,\n      role: user.role,\n    };\n\n    let signInResponse: SignInUserResponse | SignInTenantResponse;\n\n    if (user.role === 'user') {\n      signInResponse = {\n        ...generalResponse,\n        age: user.age,\n        projects: user.projects,\n      };\n    } else if (user.role === 'tenant') {\n      signInResponse = {\n        ...generalResponse,\n        website: user.website,\n        address: user.address,\n      };\n    } else if (user.role === 'admin') {\n      signInResponse = {\n        ...generalResponse,\n        age: user.age,\n      };\n    }\n\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n      user: signInResponse,\n    };\n  }\n\n  async signUpAsUser(userSignUpDto: userModel) {\n    const { email, password, confirmPassword } = userSignUpDto;\n\n    if (password !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const existingUser = await this.usersService.findByEmail(email);\n    if (existingUser) {\n      throw new ConflictException('Email already in use');\n    }\n\n    const salt = 10;\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    const userToCreate = {\n      ...userSignUpDto,\n      password: hashedPassword,\n      confirmPassword: hashedPassword,\n      role: 'user',\n    };\n\n    const user = await this.usersService.create(userToCreate);\n    if (!user) {\n      throw new BadRequestException('User could not be created');\n    }\n\n    return this.signIn(email, password);\n  }\n\n  async signUpAsTenant(tenantSignUpDto: tenantModel) {\n    const { email, password, confirmPassword } = tenantSignUpDto;\n\n    if (password !== confirmPassword) {\n      throw new BadRequestException('Passwords do not match');\n    }\n\n    const existingTenant = await this.tenantsService.findByEmail(email);\n    if (existingTenant) {\n      throw new ConflictException('Email already in use');\n    }\n\n    const salt = 10;\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    const tenantToCreate = {\n      ...tenantSignUpDto,\n      password: hashedPassword,\n      confirmPassword: hashedPassword,\n      role: 'tenant',\n    };\n\n    const tenant = await this.tenantsService.create(tenantToCreate);\n    if (!tenant) {\n      throw new BadRequestException('Tenant could not be created');\n    }\n\n    return this.signIn(email, password);\n  }\n\n  async processAuth(\n    projectId: any,\n    userId: string,\n    projectName: string,\n  ): Promise {\n    const user: userModel = await this.usersService.findById(userId);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const newPayload = {\n      email: user.email,\n      name: user.name,\n      phone: user.phone,\n      image: user.image,\n      age: user.age,\n    };\n\n    const projectID = projectId;\n    const authorizationCode = crypto.randomBytes(16).toString('hex');\n    const authorizationAccessToken: string =\n      await this.jwtService.signAsync(newPayload);\n    const name = projectName;\n    const expireDate: Date = new Date(Date.now() + 24 * 60 * 60 * 1000);\n\n    let newUserProject: UserProject = {\n      projectID,\n      authorizationCode,\n      authorizationAccessToken,\n      name,\n      expireDate,\n    };\n\n    const existingUserProject: UserProject = user.projects?.find(\n      (project) => project.projectID === projectID,\n    );\n\n    if (existingUserProject) {\n      existingUserProject.authorizationAccessToken =\n        newUserProject.authorizationAccessToken;\n      existingUserProject.authorizationCode = newUserProject.authorizationCode;\n      existingUserProject.expireDate = newUserProject.expireDate;\n    } else {\n      user.projects.push(newUserProject);\n    }\n\n    await this.usersService.save(user);\n\n    const targetTenant =\n      await this.tenantsService.findTenantByProjectId(projectID);\n\n    if (!targetTenant) {\n      throw new ConflictException('Tenant not found for the given project ID');\n    }\n\n    const targetProject: projectModel | any = targetTenant.projects.find(\n      (project) => project._id.toString() === projectID,\n    );\n\n    if (!targetProject) {\n      throw new ConflictException('Project not found in tenant');\n    }\n\n    const callbackUrl: string = targetProject.callBackUrl;\n\n    return {\n      userId,\n      projectID,\n      callbackUrl,\n      authorizationCode,\n    };\n  }\n\n  async validateGitHubUser(profile: any): Promise {\n    const { id, username, displayName, photos } = profile;\n    let user = await this.usersService.findByGitHubId(id);\n    if (!user) {\n      let userEmail = `${username}${Math.floor(Math.random() * 10000)}@authGate.com`;\n      let notUnique = await this.usersService.findByEmail(userEmail);\n      while (notUnique) {\n        userEmail = `${username}${Math.floor(Math.random() * 10000)}@authGate.com`;\n        notUnique = await this.usersService.findByEmail(userEmail);\n      }\n      const hashedPassword = await bcrypt.hash(uuidv4(), 10);\n\n      user = await this.usersService.createGithubUser({\n        name: displayName || username,\n        githubId: id,\n        image: photos && photos[0] && photos[0].value,\n        password: hashedPassword,\n        confirmPassword: hashedPassword,\n        role: 'user',\n        email: userEmail,\n      });\n    }\n    return user;\n  }\n\n  async signInWithGitHub(\n    user: User,\n  ): Promise {\n    const payload = {\n      sub: user._id,\n      email: user.email,\n      name: user.name,\n      role: 'user',\n    };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n      user: {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        image: user.image,\n        age: user.age,\n        githubId: user.githubId,\n        role: 'user',\n      },\n    };\n  }\n\n  async validateGoogleUser(profile: any): Promise {\n    const { id, displayName, emails, photos } = profile;\n\n    let user = await this.usersService.findByGoogleId(id);\n    if (!user) {\n      const email = emails && emails[0] && emails[0].value;\n      const hashedPassword = await bcrypt.hash(uuidv4(), 10);\n\n      user = await this.usersService.create({\n        name: displayName,\n        email: email,\n        googleId: id,\n        image: photos && photos[0] && photos[0].value,\n        password: hashedPassword,\n        confirmPassword: hashedPassword,\n        role: 'user',\n      });\n    }\n\n    return user;\n  }\n\n  async signInWithGoogle(\n    user: User,\n  ): Promise {\n    const payload = {\n      sub: user._id,\n      email: user.email,\n      name: user.name,\n      role: 'user',\n    };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n      user: {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        image: user.image,\n        age: user.age,\n        googleId: user.googleId,\n        role: 'user',\n      },\n    };\n  }\n\n  async validateFacebookUser(profile: any): Promise {\n    const { facebookId, email, firstName, lastName, picture } = profile;\n    let user: any = await this.usersService.findByFacebookId(facebookId);\n    if (!user && email) {\n      user = await this.usersService.findByEmail(email);\n      if (user) {\n        user.facebookId = facebookId;\n        if (user.name === undefined || user.name === '' || user.name === null)\n          user.name = `${firstName} ${lastName}`;\n        if (\n          user.image === undefined ||\n          user.image === '' ||\n          user.image === null\n        )\n          user.image = picture;\n        await this.usersService.save(user);\n      } else {\n        const hashedPassword = await bcrypt.hash(uuidv4(), 10);\n        user = await this.usersService.create({\n          email: profile.email,\n          name: `${firstName} ${lastName}`,\n          facebookId: facebookId,\n          image: picture,\n          password: hashedPassword,\n          confirmPassword: hashedPassword,\n          role: 'user',\n        });\n      }\n    } else if (!user) {\n      throw new UnauthorizedException('Unable to authenticate with Facebook');\n    }\n    return user;\n  }\n\n  async signInWithFacebook(user: User) {\n    const payload = {\n      sub: user._id,\n      email: user.email,\n      name: user.name,\n      role: 'user',\n    };\n    return {\n      access_token: this.jwtService.sign(payload),\n      user: {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        image: user.image,\n        age: user.age,\n        role: 'user',\n      },\n    };\n  }\n\n  async sendResetPasswordResetEmail(email: string): Promise {\n    let user: any = await this.usersService.findByEmail(email);\n    if (!user) {\n      user = await this.tenantsService.findByEmail(email);\n    }\n    if (!user) {\n      throw new Error(`User ${email} not found`);\n    }\n\n    const resetToken = this.jwtService.sign(\n      { email },\n      { secret: process.env.PASSWORD_RESET_JWT_SECRET, expiresIn: '1h' },\n    );\n    user.resetPasswordToken = resetToken;\n    user.resetPasswordExpires = new Date(Date.now() + 3600000);\n    await this.usersService.save(user);\n    const resetLink = `http://localhost:4200/reset-password/${resetToken}`;\n    await this.emailService.sendMail(\n      user.email,\n      'Password Reset Request',\n      `Click the following link to reset your password:\\n ${resetLink}`,\n    );\n  }\n\n  async resetPassword(\n    token: string,\n    newPassword: string,\n    confirmNewPassword: string,\n  ): Promise {\n    const decoded = this.jwtService.verify(token, {\n      secret: process.env.PASSWORD_RESET_JWT_SECRET,\n    });\n    let user: any = await this.usersService.findByEmail(decoded.email);\n\n    if (!user) {\n      user = await this.tenantsService.findByEmail(decoded.email);\n    }\n\n    if (\n      !user ||\n      user.resetPasswordToken !== token ||\n      user.resetPasswordExpires \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/presentation/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                            \n                                    Private\n                                    Async\n                                verifyTokenAndGetPayload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/presentation/guards/auth.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/guards/auth.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/guards/auth.guard.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        verifyTokenAndGetPayload\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyTokenAndGetPayload(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/guards/auth.guard.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from '../../constants';\nimport { Request } from 'express';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(private jwtService: JwtService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.verifyTokenAndGetPayload(token);\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private async verifyTokenAndGetPayload(token: string): Promise {\n    try {\n      return await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n    } catch (error) {\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/email.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMail(to: string, subject: string, text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/email.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     nodemailer.Transporter\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/services/email.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as nodemailer from 'nodemailer';\n\n@Injectable()\nexport class EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor(private configService: ConfigService) {\n    this.transporter = nodemailer.createTransport({\n      host: 'smtp.office365.com',\n      port: 587,\n      secure: false,\n      auth: {\n        user: this.configService.get('GMAIL_USER'),\n        pass: this.configService.get('GMAIL_PASS'),\n      },\n    });\n  }\n\n  async sendMail(to: string, subject: string, text: string): Promise {\n    await this.transporter.sendMail({\n      from: this.configService.get('GMAIL_USER'),\n      to,\n      subject,\n      text,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookAuthStrategy.html":{"url":"injectables/FacebookAuthStrategy.html","title":"injectable - FacebookAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Strategies/facebookAuth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(\n  Strategy,\n  'facebook',\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/Strategies/facebookAuth.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: Function)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/Strategies/facebookAuth.strategy.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            Function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthService } from './../services/auth.service';\nimport { Strategy, Profile } from 'passport-facebook';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class FacebookAuthStrategy extends PassportStrategy(\n  Strategy,\n  'facebook',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      clientID: configService.get('FACEBOOK_CLIENT_ID'),\n      clientSecret: configService.get('FACEBOOK_CLIENT_SECRET'),\n      callbackURL: configService.get('FACEBOOk_CALLBACK_URL'),\n      profileFields: ['id', 'name', 'emails', 'photos'],\n      scope: ['email'],\n    });\n  }\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: Profile,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    done: Function,\n  ) {\n    const { name, emails, photos } = profile;\n    const user = {\n      facebookId: profile.id,\n      email: emails && emails[0] && emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n    };\n\n    const existingUser = await this.authService.validateFacebookUser(user);\n    if (!existingUser) {\n      return done(new UnauthorizedException(), false);\n    }\n    done(null, existingUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubAuthStrategy.html":{"url":"injectables/GithubAuthStrategy.html","title":"injectable - GithubAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GithubAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Strategies/githubAuth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'github')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, jwtService: JwtService, userService: UsersService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/Strategies/githubAuth.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/Strategies/githubAuth.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback, Profile } from 'passport-github';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from '../services/users.service';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class GithubAuthStrategy extends PassportStrategy(Strategy, 'github') {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly jwtService: JwtService,\n    private readonly userService: UsersService,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      clientID: configService.get('GITHUB_CLIENT_ID'),\n      clientSecret: configService.get('GITHUB_CLIENT_SECRET'),\n      callbackURL: configService.get('GITHUB_CALLBACK_URL'),\n      scope: ['user:email', 'user'],\n    });\n  }\n\n  async validate(accessToken: string, refreshToken: string, profile: Profile) {\n    const user = await this.authService.validateGitHubUser(profile);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthStrategy.html":{"url":"injectables/GoogleAuthStrategy.html","title":"injectable - GoogleAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Strategies/googleAuth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'google')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/Strategies/googleAuth.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/Strategies/googleAuth.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy, Profile } from 'passport-google-oauth20';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from '../services/auth.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class GoogleAuthStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      clientID: configService.get('GOOGLE_CLIENT_ID'),\n      clientSecret: configService.get('GOOGLE_CLIENT_SECRET'),\n      callbackURL: configService.get('GOOGLE_CALLBACK_URL'),\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(accessToken: string, refreshToken: string, profile: Profile) {\n    const user = await this.authService.validateGoogleUser(profile);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/filters/http-exception.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      message: exception.message,\n      error: exception.getResponse(),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImageService.html":{"url":"injectables/ImageService.html","title":"injectable - ImageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/image.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/image.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(role: string, id: string, image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/image.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { supabase } from '../supabase/supabaseClient';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Express } from 'express';\n\n@Injectable()\nexport class ImageService {\n  constructor() {}\n\n  async upload(role: string, id: string, image: Express.Multer.File) {\n    const { data, error } = await supabase.storage\n      .from('authgateimages')\n      .upload(`${role}/${id}/${image.originalname}`, image.buffer, {\n        cacheControl: '3600',\n        upsert: false,\n      });\n\n    if (error) {\n      return error;\n    }\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IndexManagementService.html":{"url":"injectables/IndexManagementService.html","title":"injectable - IndexManagementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IndexManagementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/indexManagement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ensureIndexes\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/indexManagement.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ensureIndexes\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureIndexes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/indexManagement.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/indexManagement.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from 'src/domain/entities/user.entity';\n\n@Injectable()\nexport class IndexManagementService implements OnModuleInit {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  async onModuleInit() {\n    await this.ensureIndexes();\n  }\n\n  async ensureIndexes() {\n    try {\n      await this.userModel.collection.dropIndex('googleId_1');\n    } catch (error) {\n      if (error.code !== 27) {\n        throw error;\n      }\n    }\n\n    try {\n      await this.userModel.collection.dropIndex('githubId_1');\n    } catch (error) {\n      if (error.code !== 27) {\n        throw error;\n      }\n    }\n\n    try {\n      await this.userModel.collection.dropIndex('facebookId_1');\n    } catch (error) {\n      if (error.code !== 27) {\n        throw error;\n      }\n    }\n\n    await this.userModel.collection.createIndex(\n      { googleId: 1 },\n      { unique: true, sparse: true },\n    );\n    await this.userModel.collection.createIndex(\n      { githubId: 1 },\n      { unique: true, sparse: true },\n    );\n    await this.userModel.collection.createIndex(\n      { facebookId: 1 },\n      { unique: true, sparse: true },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaypalController.html":{"url":"controllers/PaypalController.html","title":"controller - PaypalController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaypalController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/paypal.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                paypal\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                captureOrder\n                            \n                            \n                                    \n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        captureOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    captureOrder(orderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('capture-order/:orderId')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/paypal.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-order')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/paypal.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Param } from '@nestjs/common';\nimport { PaypalService } from 'src/infrastructure/paypal/paypal.service';\n\n@Controller('paypal')\nexport class PaypalController {\n  constructor(private readonly paypalService: PaypalService) {}\n\n  @Post('create-order')\n  async createOrder() {\n    const order = await this.paypalService.createOrder();\n    return {\n      id: order.id,\n      status: order.status,\n      links: order.links,\n    };\n  }\n\n  @Post('capture-order/:orderId')\n  async captureOrder(@Param('orderId') orderId: string) {\n    const capture = await this.paypalService.captureOrder(orderId);\n    return {\n      id: capture.id,\n      status: capture.status,\n      payer: capture.payer,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaypalModule.html":{"url":"modules/PaypalModule.html","title":"module - PaypalModule","body":"\n                   \n\n\n\n\n    Modules\n    PaypalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaypalModule\n\n\n\ncluster_PaypalModule_providers\n\n\n\n\nPaypalService\n\nPaypalService\n\n\n\nPaypalModule\n\nPaypalModule\n\nPaypalModule -->\n\nPaypalService->PaypalModule\n\n\n\n\n\nPaypalTransactionService\n\nPaypalTransactionService\n\nPaypalModule -->\n\nPaypalTransactionService->PaypalModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/paypal.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaypalService\n                        \n                        \n                            PaypalTransactionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaypalController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PaypalService } from 'src/infrastructure/paypal/paypal.service';\nimport { PaypalController } from 'src/presentation/controllers/paypal.controller';\nimport {\n  PaypalTransactionSchema,\n  PaypalTransaction,\n} from 'src/domain/entities/paypal.entity';\nimport { PaypalTransactionService } from 'src/infrastructure/paypal/paypal-transaction.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: PaypalTransaction.name, schema: PaypalTransactionSchema },\n    ]),\n  ],\n  controllers: [PaypalController],\n  providers: [PaypalService, PaypalTransactionService],\n})\nexport class PaypalModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaypalService.html":{"url":"injectables/PaypalService.html","title":"injectable - PaypalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaypalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/paypal/paypal.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                payPalClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                captureOrder\n                            \n                            \n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paypalTransactionService: PaypalTransactionService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/paypal/paypal.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paypalTransactionService\n                                                  \n                                                        \n                                                                        PaypalTransactionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        captureOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    captureOrder(orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/paypal/paypal.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/paypal/paypal.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        payPalClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     paypal.core.PayPalHttpClient\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/paypal/paypal.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as paypal from '@paypal/checkout-server-sdk';\nimport { Environment } from '@paypal/checkout-server-sdk';\nimport { PaypalTransactionService } from './paypal-transaction.service';\n\n@Injectable()\nexport class PaypalService {\n  private payPalClient: paypal.core.PayPalHttpClient;\n\n  constructor(private paypalTransactionService: PaypalTransactionService) {\n    let environment: Environment;\n    if (process.env.NODE_ENV === 'production') {\n      environment = new paypal.core.LiveEnvironment(\n        process.env.PAYPAL_CLIENT_ID,\n        process.env.PAYPAL_CLIENT_SECRET,\n      );\n    } else {\n      environment = new paypal.core.SandboxEnvironment(\n        process.env.PAYPAL_CLIENT_ID,\n        process.env.PAYPAL_CLIENT_SECRET,\n      );\n    }\n    this.payPalClient = new paypal.core.PayPalHttpClient(environment);\n  }\n\n  async createOrder() {\n    const request = new paypal.orders.OrdersCreateRequest();\n    request.prefer('return=representation');\n    request.requestBody({\n      intent: 'CAPTURE',\n      purchase_units: [\n        {\n          amount: {\n            currency_code: 'USD',\n            value: '5.00',\n            description: 'Buy me a coffee',\n          },\n        },\n      ],\n      application_context: {\n        return_url: 'http://localhost:4200/paypal/callback', // Your callback URL\n        cancel_url: 'http://localhost:4200/paypal/cancel', // Your cancel URL\n      },\n    });\n\n    const order = await this.payPalClient.execute(request);\n    return order.result;\n  }\n\n  async captureOrder(orderId: string) {\n    const request = new paypal.orders.OrdersCaptureRequest(orderId);\n    request.requestBody({});\n    const capture = await this.payPalClient.execute(request);\n\n    const transactionData = {\n      orderId: capture.result.id,\n      status: capture.result.status,\n      amount: capture.result.purchase_units[0].amount.value,\n      currency: capture.result.purchase_units[0].amount.currency_code,\n      payerEmail: capture.result.payer.email_address,\n      payerName: `${capture.result.payer.name.given_name} ${capture.result.payer.name.surname}`,\n    };\n\n    //await this.paypalTransactionService.createTransaction(transactionData);\n\n    return capture.result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaypalTransaction.html":{"url":"classes/PaypalTransaction.html","title":"class - PaypalTransaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaypalTransaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/paypal.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                currency\n                            \n                            \n                                    \n                                orderId\n                            \n                            \n                                    \n                                payerEmail\n                            \n                            \n                                    \n                                payerName\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        payerEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        payerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/paypal.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\n\nexport type PaypalTransactionDocument = PaypalTransaction & Document;\n\n@Schema()\nexport class PaypalTransaction {\n  @Prop({ type: Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop({ required: true })\n  orderId: string;\n\n  @Prop({ required: true })\n  status: string;\n\n  @Prop({ required: true })\n  amount: number;\n\n  @Prop({ required: true })\n  currency: string;\n\n  @Prop({ required: true })\n  payerEmail: string;\n\n  @Prop({ required: true })\n  payerName: string;\n\n  @Prop({ default: Date.now })\n  createdAt: Date;\n}\n\nexport const PaypalTransactionSchema =\n  SchemaFactory.createForClass(PaypalTransaction);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaypalTransactionService.html":{"url":"injectables/PaypalTransactionService.html","title":"injectable - PaypalTransactionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaypalTransactionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/paypal/paypal-transaction.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paypalTransactionModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/paypal/paypal-transaction.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paypalTransactionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransaction(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/paypal/paypal-transaction.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport {\n  PaypalTransaction,\n  PaypalTransactionDocument,\n} from 'src/domain/entities/paypal.entity';\n\n@Injectable()\nexport class PaypalTransactionService {\n  constructor(\n    @InjectModel(PaypalTransaction.name)\n    private paypalTransactionModel: Model,\n  ) {}\n\n  async createTransaction(data: any): Promise {\n    const newTransaction = new this.paypalTransactionModel(data);\n    return newTransaction.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Project.html":{"url":"classes/Project.html","title":"class - Project","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Project\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/project.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                callBackUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                clientID\n                            \n                            \n                                    \n                                    \n                                    \n                                clientSECRET\n                            \n                            \n                                    \n                                deleted\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        callBackUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@IsString()@IsUrl()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        clientID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        clientSECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/project.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document, Types } from 'mongoose';\nimport { IsString, IsNotEmpty, IsUrl, IsOptional } from 'class-validator';\n\n@Schema({ timestamps: true })\nexport class Project extends Document {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop()\n  @IsString()\n  @IsOptional()\n  clientID: string;\n\n  @Prop()\n  @IsString()\n  @IsOptional()\n  clientSECRET: string;\n\n  @Prop({ required: true, unique: true })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @Prop({ required: true })\n  @IsString()\n  @IsUrl()\n  @IsNotEmpty()\n  callBackUrl: string;\n\n  @Prop({ default: false })\n  deleted: boolean;\n}\n\nexport const projectSchema = SchemaFactory.createForClass(Project);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProjectService.html":{"url":"injectables/ProjectService.html","title":"injectable - ProjectService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProjectService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/project.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAllProjectsPerTenant\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                undelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(projectModel: Model, tenantModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/project.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        projectModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProjectDto: projectModel, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProjectsPerTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProjectsPerTenant(tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(projectID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProjectDto: projectModel, tenantID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/project.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Project } from 'src/domain/entities/project.entity';\nimport { Tenant } from 'src/domain/entities/tenant.entity';\nimport { projectModel } from 'src/presentation/dtos/project.model';\nimport * as crypto from 'crypto';\n\n@Injectable()\nexport class ProjectService {\n  constructor(\n    @InjectModel(Project.name) private projectModel: Model,\n    @InjectModel(Tenant.name) private tenantModel: Model,\n  ) {}\n\n  async create(\n    createProjectDto: projectModel,\n    tenantID: string,\n  ): Promise {\n    const { name, callBackUrl } = createProjectDto;\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant with ID ${tenantID} not found`);\n    }\n\n    const clientID = crypto.randomBytes(16).toString('hex');\n    const clientSECRET = crypto.randomBytes(32).toString('hex');\n\n    const createdProject = new this.projectModel({\n      tenantID,\n      clientID,\n      clientSECRET,\n      name,\n      callBackUrl,\n    });\n    try {\n      tenant.projects.push(createdProject);\n      await tenant.save();\n      const projectList = await this.findAllProjectsPerTenant(tenantID);\n      return projectList;\n    } catch (error) {\n      throw new BadRequestException('Failed to create project');\n    }\n  }\n\n  async findAllProjectsPerTenant(tenantID: string): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant with ID: ${tenantID} not found`);\n    }\n    if (tenant.projects.length >= 1) {\n      return tenant.projects;\n    } else {\n      throw new NotFoundException('no projects created yet');\n    }\n  }\n\n  async findOne(projectID: string): Promise {\n    const targetTenant = await this.tenantModel\n      .findOne({\n        'projects._id': projectID,\n      })\n      .exec();\n    const project = targetTenant.projects.find(\n      (proj) => proj._id.toString() === projectID,\n    );\n    if (!project) {\n      throw new NotFoundException(\n        `Project with ID: ${projectID} not found in tenant`,\n      );\n    }\n    return project;\n  }\n\n  async update(\n    id: string,\n    updateProjectDto: projectModel,\n    tenantID: string,\n  ): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (tenant) {\n      if (!tenant.projects.find((proj) => proj._id.toString() === id)) {\n        throw new NotFoundException(\n          `you are not able to delete this project, because you don't own it`,\n        );\n      }\n    }\n    if (!tenant) {\n      throw new NotFoundException(\n        `you are not able to delete this project, due to your authorization role`,\n      );\n    }\n\n    const project = tenant.projects.find((proj) => proj._id.toString() === id);\n    if (!project) {\n      throw new NotFoundException(`Project with ID: ${id} not found in tenant`);\n    }\n\n    Object.assign(project, updateProjectDto);\n\n    try {\n      await tenant.save();\n      const projectsAfterUpdate: any = tenant.projects;\n      return projectsAfterUpdate;\n    } catch (error) {\n      throw new BadRequestException('Failed to update project');\n    }\n  }\n\n  async undelete(id: string, tenantID: string): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant with ID: ${tenantID} not found`);\n    }\n\n    const project = tenant.projects.find((proj) => proj._id.toString() === id);\n    if (!project) {\n      throw new NotFoundException(\n        `you are not able to delete this project because you don't own it`,\n      );\n    }\n\n    project.deleted = false;\n    try {\n      await tenant.save({ validateModifiedOnly: true });\n      return project;\n    } catch (error) {\n      throw new BadRequestException('Failed to undelete project');\n    }\n  }\n\n  async delete(id: string, tenantID: string): Promise {\n    const tenant = await this.tenantModel.findById(tenantID);\n    if (!tenant) {\n      throw new NotFoundException(`Tenant not found`);\n    }\n\n    if (!tenant.projects || !Array.isArray(tenant.projects)) {\n      throw new BadRequestException(\n        'Projects list is not available for this tenant',\n      );\n    }\n\n    const project = tenant.projects.find((proj) => proj._id.toString() === id);\n    if (!project) {\n      throw new NotFoundException(`Project with ID: ${id} not found in tenant`);\n    }\n\n    project.deleted = true;\n    try {\n      await tenant.save({ validateModifiedOnly: true });\n      return tenant.projects;\n    } catch (error) {\n      throw new BadRequestException('Failed to delete project');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProjectsController.html":{"url":"controllers/ProjectsController.html","title":"controller - ProjectsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProjectsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/project.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                projects\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                getAllPerTenant\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                undelete\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                    Async\n                                verifyTokenAndGetPayload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProjectDto: projectModel, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll(authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllPerTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPerTenant(authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('tenantProjects')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:143\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('undelete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProjectDto: projectModel, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProjectDto\n                                            \n                                                            projectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        verifyTokenAndGetPayload\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyTokenAndGetPayload(authHeader: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/controllers/project.controller.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Headers,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { projectModel } from '../dtos/project.model';\nimport { Project } from 'src/domain/entities/project.entity';\nimport { ProjectService } from 'src/infrastructure/services/project.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { jwtConstants } from 'src/constants';\n\n@Controller('projects')\nexport class ProjectsController {\n  constructor(\n    private readonly projectService: ProjectService,\n    private readonly jwtService: JwtService,\n    private readonly tenantservice: TenantsService,\n    private readonly userservice: UsersService,\n  ) {}\n\n  @Post()\n  async create(\n    @Body() createProjectDto: projectModel,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const tenantID = payload.sub;\n    const projetListCreated: any = await this.projectService.create(\n      createProjectDto,\n      tenantID,\n    );\n    return projetListCreated;\n  }\n\n  @Get()\n  async getAll(\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    let payload = await this.verifyTokenAndGetPayload(authHeader);\n    let role = payload.role;\n    if (role === 'admin') {\n      const tenants = await this.tenantservice.findAll();\n      let projectList: any[] = [];\n      for (let item of tenants) {\n        if (item.projects.length >= 1) projectList.push(item);\n      }\n      return projectList;\n    }\n  }\n\n  @Get('tenantProjects')\n  async getAllPerTenant(\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const tenantID = payload.sub;\n    return await this.projectService.findAllProjectsPerTenant(tenantID);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string): Promise {\n    return await this.projectService.findOne(id);\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateProjectDto: projectModel,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const tenantID = payload.sub;\n    const projectList: any = await this.projectService.update(\n      id,\n      updateProjectDto,\n      tenantID,\n    );\n    return projectList;\n  }\n\n  @Patch('undelete/:id')\n  async undelete(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const userID = payload.sub;\n    const user = await this.userservice.findById(userID);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    if (user.role === 'admin') {\n      const tenant = await this.tenantservice.findTenantByProjectId(id);\n      if (!tenant) {\n        throw new NotFoundException('Tenant not found for given project ID');\n      }\n      const tenantId = tenant._id;\n      return await this.projectService.undelete(id, tenantId);\n    } else {\n      throw new BadRequestException('Only admins can undelete projects');\n    }\n  }\n\n  // @Delete(':id')\n  // async remove(\n  //   @Param('id') id: string,\n  //   @Headers('Authorization') authHeader: string,\n  // ): Promise {\n  //   let tenant: any = '';\n  //   const payload = await this.verifyTokenAndGetPayload(authHeader);\n  //   const userID = payload.sub;\n  //   const user = await this.tenantservice.findById(userID);\n  //   if (user && user.role === 'tenant') {\n  //     return await this.projectService.delete(id, userID);\n  //   } else {\n  //     const user = await this.userservice.findById(userID);\n\n  //     if (user && user.role === 'admin') {\n  //       tenant = await this.tenantservice.findTenantByProjectId(id);\n  //       if (!tenant) {\n  //         throw new NotFoundException('Tenant not found for given project ID');\n  //       }\n  //       let tenantId = tenant._id;\n  //       return await this.projectService.delete(id, tenantId);\n  //     }\n  //   }\n  // }\n\n  @Delete(':id')\n  async remove(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    let tenant: any = '';\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const userID = payload.sub;\n\n    const tenantUser = await this.tenantservice.findById(userID);\n    if (tenantUser) {\n      if (tenantUser.role === 'tenant') {\n        return await this.projectService.delete(id, userID);\n      } else {\n        throw new ConflictException(\n          \"You can't delete the project because of role authorization\",\n        );\n      }\n    }\n\n    const adminUser = await this.userservice.findById(userID);\n    if (adminUser && adminUser.role === 'admin') {\n      tenant = await this.tenantservice.findTenantByProjectId(id);\n      if (!tenant) {\n        throw new NotFoundException('Tenant not found for given project ID');\n      }\n      const tenantId = tenant._id;\n      return await this.projectService.delete(id, tenantId);\n    }\n\n    throw new ConflictException(\n      \"You can't delete the project because of role authorization\",\n    );\n  }\n\n  private async verifyTokenAndGetPayload(authHeader: string): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      return payload;\n    } catch (error) {\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProjectsModule.html":{"url":"modules/ProjectsModule.html","title":"module - ProjectsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProjectsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProjectsModule\n\n\n\ncluster_ProjectsModule_exports\n\n\n\ncluster_ProjectsModule_providers\n\n\n\n\nProjectService \n\nProjectService \n\n\n\nProjectsModule\n\nProjectsModule\n\nProjectService  -->\n\nProjectsModule->ProjectService \n\n\n\n\n\nProjectService\n\nProjectService\n\nProjectsModule -->\n\nProjectService->ProjectsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/project.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProjectService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProjectsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProjectService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Project, projectSchema } from 'src/domain/entities/project.entity';\nimport { ProjectService } from 'src/infrastructure/services/project.service';\nimport { ProjectsController } from 'src/presentation/controllers/project.controller';\nimport { projectModel } from 'src/presentation/dtos/project.model';\nimport { TenantModule } from './tenant.module';\nimport { UserModule } from './user.module';\nimport { AuthModule } from './auth.module';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { userModel } from 'src/presentation/dtos/user.model';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Project.name, schema: projectSchema }]),\n    forwardRef(() => TenantModule),\n    forwardRef(() => UserModule),\n  ],\n  controllers: [ProjectsController],\n  providers: [ProjectService],\n  exports: [ProjectService, MongooseModule],\n})\nexport class ProjectsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseInterceptor.html":{"url":"injectables/ResponseInterceptor.html","title":"injectable - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getMessage\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMessage(statusCode: number, context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/response.interceptor.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                statusCode\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/response.interceptor.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => {\n        const response = context.switchToHttp().getResponse();\n        const statusCode = response.statusCode;\n\n        return {\n          statusCode,\n          message: this.getMessage(statusCode, context),\n          data,\n        };\n      }),\n    );\n  }\n\n  private getMessage(statusCode: number, context: ExecutionContext): string {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n\n    switch (method) {\n      case 'POST':\n        return statusCode === 200 || 201\n          ? 'successfully completed'\n          : 'Error creating resource';\n      case 'PUT':\n      case 'PATCH':\n        return statusCode === 200 || 201\n          ? 'Resource updated successfully'\n          : 'Error updating resource';\n      case 'DELETE':\n        return statusCode === 200 || 201\n          ? 'Resource deleted successfully'\n          : 'Error deleting resource';\n      default:\n        return 'Request completed successfully';\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SanitizeInterceptor.html":{"url":"injectables/SanitizeInterceptor.html","title":"injectable - SanitizeInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SanitizeInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/interceptors/sanitize.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                removeSensitiveFields\n                            \n                            \n                                    Private\n                                sanitizeResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/sanitize.interceptor.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeSensitiveFields\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeSensitiveFields(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/sanitize.interceptor.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeResponse(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/sanitize.interceptor.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class SanitizeInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(map((data) => this.sanitizeResponse(data)));\n  }\n\n  private sanitizeResponse(data: any): any {\n    if (Array.isArray(data)) {\n      return data.map((item) => this.removeSensitiveFields(item));\n    }\n    return this.removeSensitiveFields(data);\n  }\n\n  private removeSensitiveFields(obj: any): any {\n    if (obj && typeof obj === 'object') {\n      const sanitizedObj = obj._doc ? { ...obj._doc } : { ...obj };\n      delete sanitizedObj.password;\n      delete sanitizedObj.confirmPassword;\n      return sanitizedObj;\n    }\n    return obj;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInRequest.html":{"url":"classes/SignInRequest.html","title":"class - SignInRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/signInRequest.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInRequest.model.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInRequest.model.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString } from \"class-validator\";\n\nexport class SignInRequest {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInTenantResponse.html":{"url":"classes/SignInTenantResponse.html","title":"class - SignInTenantResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInTenantResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/signInTenantResponse.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInTenantResponse.model.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsOptional, IsString } from 'class-validator';\n\nexport class SignInTenantResponse {\n  @IsString()\n  _id: string;\n\n  @IsString()\n  name: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  address?: string;\n\n  @IsOptional()\n  @IsString()\n  website?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsString()\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInUserResponse.html":{"url":"classes/SignInUserResponse.html","title":"class - SignInUserResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInUserResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/signInUserResponse.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                age\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                projects\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserProject[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/signInUserResponse.model.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEmail,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { UserProject } from 'src/domain/entities/userProject.entity';\n\nexport class SignInUserResponse {\n  @IsString()\n  _id: string;\n\n  @IsString()\n  name: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  age?: number;\n\n  @IsString()\n  role: string;\n\n  @IsOptional()\n  @IsArray()\n  projects?: UserProject[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tenant.html":{"url":"classes/Tenant.html","title":"class - Tenant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tenant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/tenant.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                deleted\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                projects\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, match: undefined, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({match: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Project[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/tenant.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport * as mongoose from 'mongoose';\nimport { Project, projectSchema } from './project.entity';\nimport {\n  ConflictException,\n  InternalServerErrorException,\n  NotAcceptableException,\n} from '@nestjs/common';\nimport { IsString } from 'class-validator';\n\nexport type TenantDocument = Tenant & Document;\n\n@Schema()\nexport class Tenant {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop({ required: true, unique: true })\n  name: string;\n\n  @Prop({\n    required: true,\n    match: [/^\\S+@\\S+\\.\\S+$/, 'Please use a valid email address'],\n    unique: true,\n  })\n  email: string;\n\n  @Prop({\n    required: true,\n    validate: [\n      // {\n      //   validator: (value: string) =>\n      //     /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/.test(value),\n      //   message:\n      //     'Password must contain at least one uppercase letter, one lowercase letter, and one digit, and be at least 8 characters long',\n      // },\n      {\n        validator: function (this: Tenant, value: string) {\n          return value === this.confirmPassword;\n        },\n        message: 'Passwords do not match',\n      },\n    ],\n  })\n  password: string;\n\n  @Prop({ required: true })\n  confirmPassword: string;\n\n  @Prop()\n  resetPasswordToken?: string;\n\n  @Prop()\n  resetPasswordExpires?: Date;\n\n  @Prop({\n    match: [/^(?:\\+20|0)?1[0125]\\d{8}$/, 'Please use a valid phone number'],\n  })\n  phone?: string;\n\n  @Prop()\n  address?: string;\n\n  @Prop({\n    // match: [\n    //   /^www\\.[a-zA-Z0-9-]+(\\.[a-zA-Z]+)+$/,\n    //   'Please use a valid website URL',\n    // ],\n  })\n  website?: string;\n\n  @Prop()\n  image?: string;\n\n  @Prop({ type: [projectSchema], default: [] })\n  projects: Project[];\n\n  @Prop()\n  role: string;\n\n  @Prop({ default: false })\n  deleted: boolean;\n}\n\nexport const TenantSchema = SchemaFactory.createForClass(Tenant);\n\nTenantSchema.pre('save', function (next) {\n  if (this.isModified('password') && this.password !== this.confirmPassword) {\n    next(new Error('Passwords do not match'));\n  } else {\n    next();\n  }\n});\n\nTenantSchema.post('save', function (error, doc, next) {\n  if (error.name === 'MongoServerError') {\n    if (error.code === 11000) {\n      if (error.message.includes('name')) {\n        return next(\n          new NotAcceptableException(\n            'Name must be unique. This name is already taken.',\n          ),\n        );\n      } else if (error.message.includes('email')) {\n        return next(\n          new NotAcceptableException(\n            'Email must be unique. This email is already registered.',\n          ),\n        );\n      }\n    } else if (error.message.includes('Password must be strong')) {\n      return next(new ConflictException('Password must be strong.'));\n    }\n  }\n  return next(error);\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TenantController.html":{"url":"controllers/TenantController.html","title":"controller - TenantController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TenantController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/tenant.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tenants\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                authorizeClient\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                getByEmail\n                            \n                            \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getTenantByProjectId\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                undelete\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateWithPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadImage\n                            \n                            \n                                    Private\n                                    Async\n                                verifyTokenAndGetPayload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        authorizeClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizeClient(clientID: string, clientSECRET: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authorize-client')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSECRET\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTenantByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenantByProjectId(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:174\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('undelete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateTenantDto: tenantModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateTenantDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(updateTenantDto: updateTenantModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('updateWithPassword')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateTenantDto\n                                            \n                                                            updateTenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadImage(id: string, image: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image/:id')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:167\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        verifyTokenAndGetPayload\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyTokenAndGetPayload(authHeader: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/controllers/tenant.controller.ts:182\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpException,\n  HttpStatus,\n  UseInterceptors,\n  UploadedFile,\n  Headers,\n  NotFoundException,\n  ConflictException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { tenantModel } from '../dtos/tenant.model';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtService } from '@nestjs/jwt';\nimport { updateTenantModel } from '../dtos/updateTenant.model';\nimport { jwtConstants } from 'src/constants';\n\n@Controller('tenants')\nexport class TenantController {\n  constructor(\n    private readonly tenantsService: TenantsService,\n    private readonly jwtservice: JwtService,\n  ) {}\n\n  @Get()\n  async findAll(): Promise {\n    return this.tenantsService.findAll();\n  }\n\n  @Get(':id')\n  async getById(@Param('id') id: string): Promise {\n    const tenant = await this.tenantsService.findById(id);\n    if (!tenant) {\n      throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n    }\n    return tenant;\n  }\n\n  @Get('email/:email')\n  async getByEmail(@Param('email') email: string): Promise {\n    const tenant = await this.tenantsService.findByEmail(email);\n    if (!tenant) {\n      throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n    }\n    return tenant;\n  }\n\n  @Patch()\n  async update(\n    @Body() updateTenantDto: tenantModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      const tenantId = payload.sub;\n      const updatedTenant = await this.tenantsService.update(\n        tenantId,\n        updateTenantDto,\n      );\n      if (!updatedTenant) {\n        throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedTenant;\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw new HttpException(error.message, error.getStatus());\n      }\n      throw new HttpException(\n        error.message || 'Failed to update tenant',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch('updateWithPassword')\n  async updateWithPassword(\n    @Body() updateTenantDto: updateTenantModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      const tenantId = payload.sub;\n      const updatedTenant = await this.tenantsService.updateWithPassword(\n        tenantId,\n        updateTenantDto,\n      );\n      if (!updatedTenant) {\n        throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedTenant;\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Failed to update tenant',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch('undelete/:id')\n  async undelete(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      if (payload.role === 'admin') {\n        const tenant = await this.tenantsService.undelete(id);\n        if (!tenant) {\n          throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n        }\n        return await this.findAll();\n      }\n    } catch (error) {\n      throw new HttpException(\n        'Failed to undelete tenant',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise {\n    try {\n      const tenant = await this.tenantsService.remove(id);\n      if (!tenant) {\n        throw new HttpException('Tenant not found', HttpStatus.NOT_FOUND);\n      }\n      return await this.findAll();\n    } catch (error) {\n      throw new HttpException(\n        'Failed to delete tenant',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Post('authorize-client')\n  async authorizeClient(\n    @Body('clientID') clientID: string,\n    @Body('clientSECRET') clientSECRET: string,\n  ): Promise {\n    try {\n      const projectId = await this.tenantsService.authorizeClient(\n        clientID,\n        clientSECRET,\n      );\n      const frontendURL = 'http://localhost:4200/authorize/';\n      const callbackUrl = frontendURL + projectId;\n      return { callbackUrl };\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.UNAUTHORIZED);\n    }\n  }\n\n  @Post('image/:id')\n  @UseInterceptors(FileInterceptor('image'))\n  async uploadImage(\n    @Param('id') id: string,\n    @UploadedFile() image: Express.Multer.File,\n  ) {\n    return await this.tenantsService.addImage(id, image);\n  }\n\n  async getTenantByProjectId(projectId: string): Promise {\n    const tenant = await this.tenantsService.findTenantByProjectId(projectId);\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n    return tenant;\n  }\n\n  private async verifyTokenAndGetPayload(authHeader: string): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const payload = await this.jwtservice.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      return payload;\n    } catch (error) {\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TenantModule.html":{"url":"modules/TenantModule.html","title":"module - TenantModule","body":"\n                   \n\n\n\n\n    Modules\n    TenantModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TenantModule\n\n\n\ncluster_TenantModule_exports\n\n\n\ncluster_TenantModule_providers\n\n\n\n\nImageService \n\nImageService \n\n\n\nTenantsService \n\nTenantsService \n\n\n\nTenantModule\n\nTenantModule\n\nImageService  -->\n\nTenantModule->ImageService \n\n\n\nTenantsService  -->\n\nTenantModule->TenantsService \n\n\n\n\n\nAuthService\n\nAuthService\n\nTenantModule -->\n\nAuthService->TenantModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nTenantModule -->\n\nEmailService->TenantModule\n\n\n\n\n\nImageService\n\nImageService\n\nTenantModule -->\n\nImageService->TenantModule\n\n\n\n\n\nTenantsService\n\nTenantsService\n\nTenantModule -->\n\nTenantsService->TenantModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tenant.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            ImageService\n                        \n                        \n                            TenantsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TenantController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageService\n                        \n                        \n                            TenantsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Tenant, TenantSchema } from 'src/domain/entities/tenant.entity';\nimport { TenantsService } from 'src/infrastructure/services/tenants.service';\nimport { TenantController } from 'src/presentation/controllers/tenant.controller';\nimport { ProjectsModule } from './project.module';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { AuthModule } from './auth.module';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { UserModule } from './user.module';\nimport { EmailService } from 'src/infrastructure/services/email.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Tenant.name, schema: TenantSchema }]),\n    forwardRef(() => ProjectsModule),\n    forwardRef(() => UserModule),\n  ],\n  controllers: [TenantController],\n  providers: [TenantsService, ImageService, AuthService, EmailService],\n  exports: [TenantsService, MongooseModule, ImageService],\n})\nexport class TenantModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TenantsService.html":{"url":"injectables/TenantsService.html","title":"injectable - TenantsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TenantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/tenants.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImage\n                            \n                            \n                                    Async\n                                authorizeClient\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findTenantByProjectId\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                undelete\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateWithPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tenantModel: Model, imageService: ImageService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/tenants.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tenantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imageService\n                                                  \n                                                        \n                                                                        ImageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    addImage(id: string, image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizeClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizeClient(clientID: string, clientSECRET: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSECRET\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTenantDto: tenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTenantDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findTenantByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findTenantByProjectId(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:213\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTenantDto: tenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTenantDto\n                                            \n                                                            tenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(id: string, updateTenantDto: updateTenantModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/tenants.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTenantDto\n                                            \n                                                            updateTenantModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { tenantModel } from '../../presentation/dtos/tenant.model';\nimport { Tenant, TenantDocument } from '../../domain/entities/tenant.entity';\nimport { ImageService } from './image.service';\nimport * as bcrypt from 'bcrypt';\nimport { updateTenantModel } from 'src/presentation/dtos/updateTenant.model';\nimport { jwtConstants } from '../../constants';\n\n@Injectable()\nexport class TenantsService {\n  constructor(\n    @InjectModel(Tenant.name) private tenantModel: Model,\n    private imageService: ImageService,\n  ) {}\n\n  async create(createTenantDto: tenantModel): Promise {\n    const createdTenant = new this.tenantModel(createTenantDto);\n    return createdTenant.save();\n  }\n\n  async findById(id: string): Promise {\n    return await this.tenantModel.findById(id);\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.tenantModel.findOne({ email });\n  }\n\n  async findAll(): Promise {\n    return this.tenantModel.find();\n  }\n\n  async update(id: string, updateTenantDto: tenantModel): Promise {\n    const { email, name } = updateTenantDto;\n    let user: tenantModel;\n\n    try {\n      user = await this.findById(id);\n\n      if (!user) {\n        throw new NotFoundException('Tenant not found or already deleted');\n      }\n\n      if (email) {\n        const existingTenant = await this.findByEmail(email);\n        if (\n          existingTenant &&\n          existingTenant.email === email &&\n          user.email !== email\n        ) {\n          throw new ConflictException('Email already exists, try to login');\n        }\n      }\n\n      if (name) {\n        const tenants = await this.findAll();\n        const isNameInUse = tenants.some(\n          (tenant) => tenant.name === name && user.name !== name,\n        );\n        if (isNameInUse) {\n          throw new ConflictException('Name already in use, try another one');\n        }\n      }\n\n      const tenantAfterUpdate = await this.tenantModel.findOneAndUpdate(\n        { _id: id, deleted: false },\n        updateTenantDto,\n        { new: true },\n      );\n\n      if (!tenantAfterUpdate) {\n        throw new NotFoundException('Tenant not found or already deleted');\n      }\n\n      return tenantAfterUpdate;\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw error;\n      } else {\n        console.error('Error updating tenant:', error);\n        throw new InternalServerErrorException('Failed to update tenant');\n      }\n    }\n  }\n\n  async updateWithPassword(\n    id: string,\n    updateTenantDto: updateTenantModel,\n  ): Promise {\n    const tenant = await this.tenantModel.findById(id);\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n\n    const { email, name, oldPassword, newPassword, confirmNewPassword } =\n      updateTenantDto;\n\n    try {\n      if (email && email !== tenant.email) {\n        const existingTenant = await this.findByEmail(email);\n        if (existingTenant) {\n          throw new ConflictException('Email already exists, try to login');\n        }\n      }\n\n      if (name && name !== tenant.name) {\n        const tenants = await this.findAll();\n        if (tenants.some((t) => t.name === name)) {\n          throw new ConflictException('Name already in use, try another one');\n        }\n      }\n\n      if (oldPassword) {\n        const isMatch = await bcrypt.compare(oldPassword, tenant.password);\n        if (!isMatch) {\n          throw new BadRequestException('Old password is incorrect');\n        }\n      }\n\n      if (newPassword && confirmNewPassword) {\n        if (newPassword !== confirmNewPassword) {\n          throw new BadRequestException('New passwords do not match');\n        }\n        const salt = await bcrypt.genSalt();\n        tenant.password = await bcrypt.hash(newPassword, salt);\n        tenant.confirmPassword = tenant.password;\n      }\n\n      Object.assign(tenant, updateTenantDto);\n      return await tenant.save();\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      } else {\n        console.error('Error updating tenant with password:', error);\n        throw new InternalServerErrorException('Failed to update tenant');\n      }\n    }\n  }\n\n  async remove(id: string): Promise {\n    const tenant = await this.tenantModel.findById(id);\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n    tenant.deleted = true;\n    await tenant.save({ validateModifiedOnly: true });\n    return tenant;\n  }\n\n  async undelete(id: string): Promise {\n    const tenant = await this.tenantModel.findById(id);\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n    tenant.deleted = false;\n    await tenant.save({ validateModifiedOnly: true });\n    return tenant;\n  }\n\n  async authorizeClient(\n    clientID: string,\n    clientSECRET: string,\n  ): Promise {\n    const tenant = await this.tenantModel.findOne({\n      'projects.clientID': clientID,\n      'projects.clientSECRET': clientSECRET,\n    });\n\n    if (!tenant) {\n      throw new Error('Tenant not found for the given client credentials.');\n    }\n    const project = tenant.projects.find(\n      (proj) =>\n        proj.clientID === clientID && proj.clientSECRET === clientSECRET,\n    );\n    if (!project) {\n      throw new Error('Project not found for the given client credentials.');\n    }\n    return project._id.toString();\n  }\n\n  async addImage(id: string, image: Express.Multer.File): Promise {\n    const tenant = await this.tenantModel.findById(id);\n\n    if (!tenant) {\n      throw new NotFoundException('Tenant not found');\n    }\n\n    await this.imageService.upload('tenants', id, image);\n\n    tenant.image =\n      jwtConstants.imageUrl + 'tenants/' + `${id}/` + image.originalname;\n\n    return tenant.save();\n  }\n\n  async findTenantByProjectId(projectId: string): Promise {\n    return this.tenantModel.findOne({ 'projects._id': projectId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                age\n                            \n                            \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                deleted\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                facebookId\n                            \n                            \n                                    \n                                    Optional\n                                githubId\n                            \n                            \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                projects\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, auto: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({min: undefined, max: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, match: undefined, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        facebookId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        githubId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true, sparse: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, validate: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({match: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserProject[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Types } from 'mongoose';\nimport { UserProject } from './userProject.entity';\nimport { IsString } from 'class-validator';\n\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class User {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, auto: true })\n  _id: Types.ObjectId;\n\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({\n    required: true,\n    match: [/^\\S+@\\S+\\.\\S+$/, 'Please use a valid email address'],\n    unique: true,\n  })\n  email: string;\n\n  @Prop({\n    required: true,\n    validate: [\n      // {\n      //   validator: (value: string) =>\n      //     /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/.test(value),\n      //   message:\n      //     'Password must contain at least one uppercase letter, one lowercase letter, and one digit, and be at least 8 characters long',\n      // },\n      {\n        validator: function (this: User, value: string) {\n          return value === this.confirmPassword;\n        },\n        message: 'Passwords do not match',\n      },\n    ],\n  })\n  password: string;\n\n  @Prop({ required: true })\n  confirmPassword: string;\n\n  @Prop()\n  resetPasswordToken?: string;\n\n  @Prop()\n  resetPasswordExpires?: Date;\n\n  @Prop({\n    match: [/^(?:\\+20|0)?1[0125]\\d{8}$/, 'Please use a valid phone number'],\n  })\n  phone: string;\n\n  @Prop()\n  token: string;\n\n  @Prop()\n  image: string;\n\n  @Prop({\n    min: [13, 'Age must be at least 13'],\n    max: [100, 'Age must be at most 100'],\n  })\n  age: number;\n\n  @Prop({ unique: true, sparse: true })\n  googleId?: string;\n\n  @Prop({ unique: true, sparse: true })\n  githubId?: string;\n\n  @Prop({ unique: true, sparse: true })\n  facebookId?: string;\n\n  @Prop({ default: false })\n  deleted: boolean;\n\n  @Prop()\n  role: string;\n\n  @Prop({ type: [UserProject] })\n  projects: UserProject[];\n}\n\nexport const userSchema = SchemaFactory.createForClass(User);\n\nuserSchema.pre('save', function (next) {\n  if (this.isModified('password') && this.password !== this.confirmPassword) {\n    next(new Error('Passwords do not match'));\n  } else {\n    next();\n  }\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addProjectToUserByProjectId\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                getByEmail\n                            \n                            \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    Async\n                                getByIdWithProjects\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                removeProject\n                            \n                            \n                                    \n                                    Async\n                                undelete\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateWithPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadImage\n                            \n                            \n                                    Private\n                                    Async\n                                verifyTokenAndGetPayload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addProjectToUserByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    addProjectToUserByProjectId(body: literal type, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getByIdWithProjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByIdWithProjects(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('projects/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeProject(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('project/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:221\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string, authHeader: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('undelete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateUserDto: userModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(updateUserDto: updateUserModel, authHeader: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('updateWithPassword')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            updateUserModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authHeader\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadImage(id: string, image: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image/:id')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:245\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        verifyTokenAndGetPayload\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyTokenAndGetPayload(authHeader: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/controllers/user.controller.ts:252\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authHeader\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Headers,\n  HttpException,\n  HttpStatus,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  UnauthorizedException,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { userModel } from '../dtos/user.model';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtService } from '@nestjs/jwt';\nimport { updateUserModel } from '../dtos/updateUser.model';\nimport { ProjectService } from 'src/infrastructure/services/project.service';\nimport { jwtConstants } from 'src/constants';\nimport { User } from 'src/domain/entities/user.entity';\n\n@Controller('users')\nexport class UserController {\n  constructor(\n    private userService: UsersService,\n    private authservice: AuthService,\n    private imageService: ImageService,\n    private jwtservice: JwtService,\n    private projectservice: ProjectService,\n  ) {}\n\n  @Get()\n  findAll(): Promise {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  async getById(@Param('id') id: string): Promise {\n    try {\n      const user = await this.userService.findById(id);\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Failed to retrieve user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('projects/:id')\n  async getByIdWithProjects(@Param('id') id: string): Promise {\n    try {\n      const user = await this.userService.findByIdWithProjects(id);\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Failed to retrieve user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('email/:email')\n  async getByEmail(@Param('email') email: string): Promise {\n    try {\n      const user = await this.userService.findByEmail(email);\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Failed to retrieve user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Post()\n  async addProjectToUserByProjectId(\n    @Body() body: { projectId: string },\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    try {\n      const { projectId } = body;\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      const userId = payload.sub;\n      let result;\n\n      const targetProject = await this.projectservice.findOne(projectId);\n      if (targetProject.deleted === false) {\n        const projectName = targetProject.name;\n        result = await this.authservice.processAuth(\n          projectId,\n          userId,\n          projectName,\n        );\n      } else {\n        throw new HttpException(\n          'project not found, or has been deleted',\n          HttpStatus.NOT_FOUND,\n        );\n      }\n\n      return {\n        result,\n        success: true,\n        message: 'Project Added successfully',\n      };\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw new HttpException(error.message, error.getStatus());\n      }\n      throw new HttpException(\n        error.message || 'Failed to add project',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch()\n  async update(\n    @Body() updateUserDto: userModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      const userId = payload.sub;\n      const updatedUser = await this.userService.update(userId, updateUserDto);\n      if (!updatedUser) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedUser;\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Failed to update user',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch('updateWithPassword')\n  async updateWithPassword(\n    @Body() updateUserDto: updateUserModel,\n    @Headers('Authorization') authHeader: any,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      const userId = payload.sub;\n      const updatedUser = await this.userService.updateWithPassword(\n        userId,\n        updateUserDto,\n      );\n      if (!updatedUser) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      return updatedUser;\n    } catch (error) {\n      throw new HttpException(\n        error.message || 'Failed to update user',\n        error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch('undelete/:id')\n  async undelete(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    try {\n      const payload = await this.verifyTokenAndGetPayload(authHeader);\n      if (payload.role === 'admin') {\n        const user = await this.userService.undelete(id);\n        if (!user) {\n          throw new HttpException('user not found', HttpStatus.NOT_FOUND);\n        }\n        return await this.findAll();\n      }\n    } catch (error) {\n      throw new HttpException(\n        'Failed to undelete user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise {\n    try {\n      const user = await this.userService.remove(id);\n      if (!user) {\n        throw new HttpException('user not found', HttpStatus.NOT_FOUND);\n      }\n      return await this.findAll();\n    } catch (error) {\n      throw new HttpException(\n        'Failed to delete user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete('project/:id')\n  async removeProject(\n    @Param('id') id: string,\n    @Headers('Authorization') authHeader: string,\n  ): Promise {\n    let targetUser: any = '';\n    const payload = await this.verifyTokenAndGetPayload(authHeader);\n    const userID = payload.sub;\n    const user = await this.userService.findById(userID);\n    if (user && user.role === 'user') {\n      return await this.userService.delete(id, userID);\n    } else {\n      if (user && user.role === 'admin') {\n        targetUser = await this.userService.findUserByProjectId(id);\n        if (!targetUser) {\n          throw new NotFoundException('User not found for given project ID');\n        }\n        let targetUserId = targetUser._id;\n        return await this.userService.delete(id, targetUserId);\n      }\n    }\n  }\n\n  @Post('image/:id')\n  @UseInterceptors(FileInterceptor('image'))\n  async uploadImage(\n    @Param('id') id: string,\n    @UploadedFile() image: Express.Multer.File,\n  ) {\n    return await this.userService.addImage(id, image);\n  }\n\n  private async verifyTokenAndGetPayload(authHeader: string): Promise {\n    try {\n      const token = authHeader.split(' ')[1];\n      const payload = await this.jwtservice.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      return payload;\n    } catch (error) {\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nTenantModule\n\nTenantModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nTenantModule->UserModule\n\n\n\n\n\nImageService \n\nImageService \n\nImageService  -->\n\nUserModule->ImageService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nImageService\n\nImageService\n\nUserModule -->\n\nImageService->UserModule\n\n\n\n\n\nIndexManagementService\n\nIndexManagementService\n\nUserModule -->\n\nIndexManagementService->UserModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            ImageService\n                        \n                        \n                            IndexManagementService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TenantModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Schema } from '@nestjs/mongoose';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { User, userSchema } from '../domain/entities/user.entity';\nimport { UserController } from '../presentation/controllers/user.controller';\nimport { UsersService } from 'src/infrastructure/services/users.service';\nimport { AuthService } from 'src/infrastructure/services/auth.service';\nimport { TenantModule } from './tenant.module';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { ProjectsModule } from './project.module';\nimport { IndexManagementService } from 'src/infrastructure/services/indexManagement.service';\nimport { EmailService } from 'src/infrastructure/services/email.service';\n\n@Module({\n  imports: [\n    TenantModule,\n    MongooseModule.forFeature([{ name: User.name, schema: userSchema }]),\n    forwardRef(() => ProjectsModule),\n    forwardRef(() => TenantModule),\n  ],\n  providers: [\n    AuthService,\n    UsersService,\n    ImageService,\n    IndexManagementService,\n    EmailService,\n  ],\n  controllers: [UserController],\n  exports: [UsersService, ImageService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProject.html":{"url":"classes/UserProject.html","title":"class - UserProject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/entities/userProject.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationAccessToken\n                            \n                            \n                                    \n                                authorizationCode\n                            \n                            \n                                    \n                                    Optional\n                                callBackUrl\n                            \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                expireDate\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                projectID\n                            \n                            \n                                    \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationAccessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        callBackUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expireDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projectID\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Project'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/domain/entities/userProject.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose';\nimport { IsString } from 'class-validator';\nimport mongoose, { Types } from 'mongoose';\n\n@Schema()\nexport class UserProject {\n  @Prop({ type: Types.ObjectId, ref: 'Project' })\n  projectID: Types.ObjectId;\n\n  @Prop()\n  authorizationCode: string;\n\n  @Prop()\n  authorizationAccessToken: string;\n\n  @Prop()\n  expireDate: Date;\n\n  @Prop()\n  @IsString()\n  name: string;\n\n  @Prop()\n  callBackUrl?: string;\n\n  @Prop()\n  createdAt?: string;\n\n  @Prop()\n  updatedAt?: string;\n\n  @Prop({ default: false })\n  deleted?: boolean;\n}\n\nexport const userProjectSchema = SchemaFactory.createForClass(UserProject);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/services/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImage\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createGithubUser\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllUsersWithProjects\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findByFacebookId\n                            \n                            \n                                    Async\n                                findByGitHubId\n                            \n                            \n                                    Async\n                                findByGoogleId\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByIdWithProjects\n                            \n                            \n                                    Async\n                                findUserByProjectId\n                            \n                            \n                                    Private\n                                    Async\n                                getUserProjects\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                undelete\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateWithPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, imageService: ImageService, tenantservice: TenantsService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/services/users.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imageService\n                                                  \n                                                        \n                                                                        ImageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantservice\n                                                  \n                                                        \n                                                                        TenantsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    addImage(id: string, image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:250\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createGithubUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGithubUser(createUserDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:212\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllUsersWithProjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsersWithProjects()\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByFacebookId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByFacebookId(facebookId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                facebookId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByGitHubId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByGitHubId(githubId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                githubId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByIdWithProjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByIdWithProjects(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByProjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByProjectId(projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:263\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getUserProjects\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserProjects(projectRef: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                projectRef\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:202\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(user: User | any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User | any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        undelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    undelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:240\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: userModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            userModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateWithPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithPassword(id: string, updateUserDto: updateUserModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/infrastructure/services/users.service.ts:145\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            updateUserModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { userModel } from '../../presentation/dtos/user.model';\nimport { User, UserDocument } from '../../domain/entities/user.entity';\nimport { ImageService } from 'src/infrastructure/services/image.service';\nimport { updateUserModel } from 'src/presentation/dtos/updateUser.model';\nimport * as bcrypt from 'bcrypt';\nimport { TenantsService } from './tenants.service';\nimport { jwtConstants } from '../../constants';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    private imageService: ImageService,\n    private tenantservice: TenantsService,\n  ) {}\n\n  async create(createUserDto: userModel): Promise {\n    const createdUser = new this.userModel(createUserDto);\n    return createdUser.save();\n  }\n\n  async createGithubUser(createUserDto: userModel): Promise {\n    const createdUser = new this.userModel(createUserDto);\n    return createdUser.save({ validateBeforeSave: false });\n  }\n\n  async findAll(): Promise {\n    const users = await this.userModel.find();\n    for (const user of users) {\n      user.projects = await this.getUserProjects(user.projects);\n    }\n    return users;\n  }\n\n  async findAllUsersWithProjects(): Promise {\n    const users = await this.userModel.find().populate('projects');\n    return users;\n  }\n\n  async findById(id: string): Promise {\n    return await this.userModel.findById(id);\n  }\n\n  async findByIdWithProjects(id: string): Promise {\n    const user = await this.userModel.findById(id);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    user.projects = await this.getUserProjects(user.projects);\n\n    return user;\n  }\n\n  async findByEmail(email: string): Promise {\n    return await this.userModel.findOne({ email });\n  }\n\n  private async getUserProjects(projectRef: any[]): Promise {\n    const targetProject = [];\n\n    for (const projRef of projectRef) {\n      const tenant = await this.tenantservice.findTenantByProjectId(\n        projRef.projectID,\n      );\n      if (tenant) {\n        const project = tenant.projects.find(\n          (p) => p._id.toString() === projRef.projectID,\n        );\n        if (project) {\n          targetProject.push(project);\n        }\n      }\n    }\n    return targetProject;\n  }\n\n  async findByGitHubId(githubId: string): Promise {\n    return this.userModel.findOne({ githubId }).exec();\n  }\n\n  async findByGoogleId(googleId: string): Promise {\n    return this.userModel.findOne({ googleId }).exec();\n  }\n\n  async findByFacebookId(facebookId: string): Promise {\n    return this.userModel.findOne({ facebookId }).exec();\n  }\n\n  async save(user: User | any): Promise {\n    return await user.save();\n  }\n\n  async update(id: string, updateUserDto: userModel): Promise {\n    let newEmail: any;\n    let targetUser: userModel;\n    let user: any;\n\n    try {\n      user = await this.findById(id);\n      if (updateUserDto.email !== null) {\n        newEmail = updateUserDto.email;\n        targetUser = await this.findByEmail(newEmail);\n      }\n\n      if (\n        targetUser &&\n        targetUser.email === newEmail &&\n        user.email != newEmail\n      ) {\n        throw new ConflictException('Email already exists, try to login');\n      }\n\n      const userAfterUpdate: any = await this.userModel\n        .findByIdAndUpdate(id, updateUserDto, { new: true })\n        .exec();\n\n      if (!userAfterUpdate) {\n        throw new NotFoundException('User not found');\n      }\n\n      return userAfterUpdate;\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw error;\n      } else {\n        console.error('Error updating user:', error);\n        throw new InternalServerErrorException('Failed to update user');\n      }\n    }\n  }\n\n  async updateWithPassword(\n    id: string,\n    updateUserDto: updateUserModel,\n  ): Promise {\n    let newEmail: any;\n    let targetUser: userModel;\n    const user = await this.userModel.findById(id).exec();\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    try {\n      if (updateUserDto.email !== null) {\n        newEmail = updateUserDto.email;\n        targetUser = await this.findByEmail(newEmail);\n      }\n\n      if (targetUser && targetUser.email === newEmail) {\n        throw new ConflictException('Email already exists, try to login');\n      }\n\n      if (updateUserDto.oldPassword) {\n        const isMatch = await bcrypt.compare(\n          updateUserDto.oldPassword,\n          user.password,\n        );\n        if (!isMatch) {\n          throw new BadRequestException('Old password is incorrect');\n        }\n      }\n\n      if (updateUserDto.newPassword && updateUserDto.confirmNewPassword) {\n        if (updateUserDto.newPassword !== updateUserDto.confirmNewPassword) {\n          throw new BadRequestException('New passwords do not match');\n        }\n        const salt = await bcrypt.genSalt();\n        user.password = await bcrypt.hash(updateUserDto.newPassword, salt);\n        user.confirmPassword = user.password;\n      }\n\n      Object.assign(user, updateUserDto);\n      return await user.save();\n    } catch (error) {\n      if (\n        error instanceof ConflictException ||\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      } else {\n        console.error('Error updating user with password:', error);\n        throw new InternalServerErrorException('Failed to update user');\n      }\n    }\n  }\n\n  async remove(id: string): Promise {\n    const user = await this.userModel.findById(id).exec();\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    user.deleted = true;\n    await user.save({ validateModifiedOnly: true });\n    return user;\n  }\n\n  async delete(id: string, userID: string): Promise {\n    const user = await this.userModel.findById(userID);\n    if (!user) {\n      throw new NotFoundException(`Tenant not found`);\n    }\n\n    if (!user.projects || !Array.isArray(user.projects)) {\n      throw new BadRequestException(\n        'Projects list is not available for this tenant',\n      );\n    }\n\n    const project = user.projects.find(\n      (proj) => proj.projectID.toString() === id,\n    );\n    if (!project) {\n      throw new NotFoundException(`Project with ID: ${id} not found in tenant`);\n    }\n\n    project.deleted = true;\n    try {\n      await user.save({ validateModifiedOnly: true });\n      return user;\n    } catch (error) {\n      throw new BadRequestException('Failed to delete project');\n    }\n  }\n\n  async undelete(id: string): Promise {\n    const user = await this.userModel.findById(id);\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n    user.deleted = false;\n    await user.save({ validateModifiedOnly: true });\n    return user;\n  }\n\n  async addImage(id: string, image: Express.Multer.File): Promise {\n    const user = await this.userModel.findById(id).exec();\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    await this.imageService.upload('users', id, image);\n\n    user.image =\n      jwtConstants.imageUrl + 'users/' + `${id}/` + image.originalname;\n    return user.save();\n  }\n\n  async findUserByProjectId(projectId: string): Promise {\n    return this.userModel.findOne({ 'projects._id': projectId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/paypal.entity.ts\n            \n            class\n            PaypalTransaction\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/domain/entities/paypal.entity.ts\n            \n            variable\n            PaypalTransactionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/project.entity.ts\n            \n            class\n            Project\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/domain/entities/project.entity.ts\n            \n            variable\n            projectSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/tenant.entity.ts\n            \n            class\n            Tenant\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/domain/entities/tenant.entity.ts\n            \n            variable\n            TenantSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/domain/entities/user.entity.ts\n            \n            variable\n            userSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/entities/userProject.entity.ts\n            \n            class\n            UserProject\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/domain/entities/userProject.entity.ts\n            \n            variable\n            userProjectSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/Strategies/facebookAuth.strategy.ts\n            \n            injectable\n            FacebookAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/Strategies/githubAuth.strategy.ts\n            \n            injectable\n            GithubAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/Strategies/googleAuth.strategy.ts\n            \n            injectable\n            GoogleAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/paypal/paypal-transaction.service.ts\n            \n            injectable\n            PaypalTransactionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/paypal/paypal.service.ts\n            \n            injectable\n            PaypalService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/infrastructure/services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/services/image.service.ts\n            \n            injectable\n            ImageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/services/indexManagement.service.ts\n            \n            injectable\n            IndexManagementService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/services/project.service.ts\n            \n            injectable\n            ProjectService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/services/tenants.service.ts\n            \n            injectable\n            TenantsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/services/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/infrastructure/supabase/supabaseClient.ts\n            \n            variable\n            supabase\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/supabase/supabaseClient.ts\n            \n            variable\n            supabaseKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/supabase/supabaseClient.ts\n            \n            variable\n            supabaseUrl\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/presentation/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/presentation/controllers/paypal.controller.ts\n            \n            controller\n            PaypalController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/presentation/controllers/project.controller.ts\n            \n            controller\n            ProjectsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/presentation/controllers/tenant.controller.ts\n            \n            controller\n            TenantController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/presentation/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/presentation/dtos/project.model.ts\n            \n            class\n            projectModel\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/presentation/dtos/signInRequest.model.ts\n            \n            class\n            SignInRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/presentation/dtos/signInTenantResponse.model.ts\n            \n            class\n            SignInTenantResponse\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/presentation/dtos/signInUserResponse.model.ts\n            \n            class\n            SignInUserResponse\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/presentation/dtos/tenant.model.ts\n            \n            class\n            tenantModel\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/presentation/dtos/updateTenant.model.ts\n            \n            class\n            updateTenantModel\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/presentation/dtos/updateUser.model.ts\n            \n            class\n            updateUserModel\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/presentation/dtos/user.model.ts\n            \n            class\n            userModel\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/presentation/dtos/userProject.model.ts\n            \n            class\n            userProjectModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/presentation/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/presentation/guards/auth.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/presentation/interceptors/response.interceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/presentation/interceptors/sanitize.interceptor.ts\n            \n            injectable\n            SanitizeInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.3.9\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.9\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mongoose : ^10.0.6\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.3.9\n        \n            @paypal/checkout-server-sdk : ^1.0.3\n        \n            @supabase/supabase-js : ^2.43.4\n        \n            bcrypt : ^5.1.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            mongoose : ^8.4.3\n        \n            multer : ^1.4.5-lts.1\n        \n            multer-s3 : ^3.0.1\n        \n            nodemailer : ^6.9.14\n        \n            passport : ^0.7.0\n        \n            passport-facebook : ^3.0.0\n        \n            passport-github : ^1.1.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            uuid : ^10.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaypalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProjectsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TenantModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PaypalModule\n\n\n\ncluster_PaypalModule_providers\n\n\n\ncluster_ProjectsModule\n\n\n\ncluster_ProjectsModule_exports\n\n\n\ncluster_ProjectsModule_providers\n\n\n\ncluster_TenantModule\n\n\n\ncluster_TenantModule_exports\n\n\n\ncluster_TenantModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPaypalModule\n\nPaypalModule\n\nAppModule -->\n\nPaypalModule->AppModule\n\n\n\n\n\nProjectsModule\n\nProjectsModule\n\nAuthModule -->\n\nProjectsModule->AuthModule\n\n\n\nAppModule -->\n\nProjectsModule->AppModule\n\n\n\n\n\nProjectService \n\nProjectService \n\nProjectService  -->\n\nProjectsModule->ProjectService \n\n\n\n\n\nTenantModule\n\nTenantModule\n\nAuthModule -->\n\nTenantModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nTenantModule->UserModule\n\n\n\nAppModule -->\n\nTenantModule->AppModule\n\n\n\n\n\nImageService \n\nImageService \n\nImageService  -->\n\nTenantModule->ImageService \n\n\n\n\n\nTenantsService \n\nTenantsService \n\nTenantsService  -->\n\nTenantModule->TenantsService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nImageService  -->\n\nUserModule->ImageService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUserModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nTenantModule -->\n\nAuthService->TenantModule\n\n\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\nTenantModule -->\n\nEmailService->TenantModule\n\n\n\nUserModule -->\n\nEmailService->UserModule\n\n\n\n\n\nFacebookAuthStrategy\n\nFacebookAuthStrategy\n\nAuthModule -->\n\nFacebookAuthStrategy->AuthModule\n\n\n\n\n\nGithubAuthStrategy\n\nGithubAuthStrategy\n\nAuthModule -->\n\nGithubAuthStrategy->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nPaypalService\n\nPaypalService\n\nPaypalModule -->\n\nPaypalService->PaypalModule\n\n\n\n\n\nPaypalTransactionService\n\nPaypalTransactionService\n\nPaypalModule -->\n\nPaypalTransactionService->PaypalModule\n\n\n\n\n\nProjectService\n\nProjectService\n\nProjectsModule -->\n\nProjectService->ProjectsModule\n\n\n\n\n\nImageService\n\nImageService\n\nTenantModule -->\n\nImageService->TenantModule\n\n\n\nUserModule -->\n\nImageService->UserModule\n\n\n\n\n\nTenantsService\n\nTenantsService\n\nTenantModule -->\n\nTenantsService->TenantModule\n\n\n\n\n\nIndexManagementService\n\nIndexManagementService\n\nUserModule -->\n\nIndexManagementService->UserModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/projectModel.html":{"url":"classes/projectModel.html","title":"class - projectModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  projectModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/project.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                callBackUrl\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                clientID\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                clientSECRET\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tenantID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        callBackUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUrl()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        clientID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        clientSECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tenantID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/project.model.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsUrl,\n  IsOptional,\n  IsBoolean,\n} from 'class-validator';\n\nexport class projectModel {\n  @IsString()\n  @IsOptional()\n  tenantID?: string;\n\n  @IsString()\n  @IsOptional()\n  clientID?: string;\n\n  @IsString()\n  @IsOptional()\n  clientSECRET?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsUrl()\n  @IsNotEmpty()\n  callBackUrl: string;\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/tenantModel.html":{"url":"classes/tenantModel.html","title":"class - tenantModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  tenantModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/tenant.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                projects\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'password is required'})@Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {message: 'Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Project[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/tenant.model.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude, Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsEmail,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { Project } from 'src/domain/entities/project.entity';\n\nexport class tenantModel {\n  @IsNotEmpty()\n  readonly name: string;\n\n  @IsEmail()\n  readonly email: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'password is required' })\n  @Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {\n    message:\n      'Password must include a number, lowercase, uppercase, special character',\n  })\n  password: string;\n  confirmPassword: string;\n\n  @IsOptional()\n  @IsString()\n  resetPasswordToken?: string;\n\n  @IsOptional()\n  @IsDate()\n  resetPasswordExpires?: Date;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  address?: string;\n\n  @IsOptional()\n  @IsString()\n  website?: string;\n\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => Project)\n  @IsOptional()\n  projects?: Project[];\n\n  @IsString()\n  role: string;\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PaypalTransactionDocument   (src/.../paypal.entity.ts)\n                        \n                        \n                            TenantDocument   (src/.../tenant.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/domain/entities/paypal.entity.ts\n    \n    \n        \n            \n                \n                    \n                    PaypalTransactionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/domain/entities/tenant.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TenantDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/domain/entities/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/updateTenantModel.html":{"url":"classes/updateTenantModel.html","title":"class - updateTenantModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  updateTenantModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/updateTenant.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                confirmNewPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                oldPassword\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                projects\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        confirmNewPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'Password too weak'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Project[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateTenant.model.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  ValidateNested,\n} from 'class-validator';\nimport { Project } from 'src/domain/entities/project.entity';\n\nexport class updateTenantModel {\n  @IsOptional()\n  @IsString()\n  readonly name?: string;\n\n  @IsOptional()\n  @IsEmail()\n  readonly email?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly phone?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly address?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly website?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly image?: string;\n\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => Project)\n  readonly projects?: Project[];\n\n  @IsOptional()\n  @IsBoolean()\n  readonly deleted?: boolean;\n\n  @IsOptional()\n  @IsString()\n  readonly oldPassword?: string;\n\n  @IsOptional()\n  @IsString()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    {\n      message: 'Password too weak',\n    },\n  )\n  readonly newPassword?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly confirmNewPassword?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/updateUserModel.html":{"url":"classes/updateUserModel.html","title":"class - updateUserModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  updateUserModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/updateUser.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                age\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                confirmNewPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                oldPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                projects\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        confirmNewPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'confirmNewPassword is required'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'Confirm New Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(/^\\S+@\\S+\\.\\S+$/, {message: 'email pattern is invalid'})@IsNotEmpty({message: 'email is required'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'name is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'newPassword is required'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'New Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'oldPassword is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserProject[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/updateUser.model.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsOptional,\n  MinLength,\n  IsNumber,\n  IsNotEmpty,\n  Matches,\n  IsArray,\n  IsBoolean,\n} from 'class-validator';\nimport { UserProject } from 'src/domain/entities/userProject.entity';\n\nexport class updateUserModel {\n  @IsString()\n  @IsNotEmpty({ message: 'name is required' })\n  name: string;\n\n  @Matches(/^\\S+@\\S+\\.\\S+$/, {\n    message: 'email pattern is invalid',\n  })\n  @IsNotEmpty({ message: 'email is required' })\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  age?: number;\n\n  @IsOptional()\n  @IsArray()\n  projects?: UserProject[];\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n\n  @IsString()\n  @IsNotEmpty({ message: 'oldPassword is required' })\n  oldPassword: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'newPassword is required' })\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    {\n      message:\n        'New Password must include a number, lowercase, uppercase, special character',\n    },\n  )\n  newPassword: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'confirmNewPassword is required' })\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    {\n      message:\n        'Confirm New Password must include a number, lowercase, uppercase, special character',\n    },\n  )\n  confirmNewPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/userModel.html":{"url":"classes/userModel.html","title":"class - userModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  userModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/user.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                age\n                            \n                            \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deleted\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                facebookId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                githubId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                projects\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordExpires\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resetPasswordToken\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(/^\\S+@\\S+\\.\\S+$/, {message: 'email pattern is invalid'})@IsNotEmpty({message: 'email is required'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        facebookId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        githubId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'name is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty({message: 'password is required'})@Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {message: 'Password must include a number, lowercase, uppercase, special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        projects\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserProject[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/user.model.ts:74\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsOptional,\n  MinLength,\n  IsNumber,\n  IsNotEmpty,\n  Matches,\n  IsArray,\n  IsBoolean,\n  IsDate,\n} from 'class-validator';\nimport { UserProject } from 'src/domain/entities/userProject.entity';\n\nexport class userModel {\n  @IsString()\n  @IsNotEmpty({ message: 'name is required' })\n  name: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty({ message: 'password is required' })\n  @Matches(/^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&])[A-Za-z\\d@$!%?&]{8,}$/, {\n    message:\n      'Password must include a number, lowercase, uppercase, special character',\n  })\n  password: string;\n  confirmPassword: string;\n\n  @IsOptional()\n  @IsString()\n  resetPasswordToken?: string;\n\n  @IsOptional()\n  @IsDate()\n  resetPasswordExpires?: Date;\n\n  @Matches(/^\\S+@\\S+\\.\\S+$/, {\n    message: 'email pattern is invalid',\n  })\n  @IsNotEmpty({ message: 'email is required' })\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsString()\n  githubId?: string;\n\n  @IsOptional()\n  @IsString()\n  googleId?: string;\n\n  @IsOptional()\n  @IsString()\n  facebookId?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsNumber()\n  age?: number;\n\n  @IsOptional()\n  @IsArray()\n  projects?: UserProject[];\n\n  @IsString()\n  role: string;\n\n  @IsOptional()\n  @IsBoolean()\n  deleted?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/userProjectModel.html":{"url":"classes/userProjectModel.html","title":"class - userProjectModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  userProjectModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/dtos/userProject.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationAccessToken\n                            \n                            \n                                    \n                                authorizationCode\n                            \n                            \n                                    \n                                expireDate\n                            \n                            \n                                    \n                                projectID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationAccessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expireDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        projectID\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/presentation/dtos/userProject.model.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsEmail, IsString } from 'class-validator';\nimport { ObjectId } from 'mongoose';\n\nexport class userProjectModel {\n  @IsString()\n  projectID: ObjectId;\n\n  @IsString()\n  authorizationCode: string;\n\n  @IsString()\n  authorizationAccessToken: string;\n\n  @IsDate()\n  expireDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            PaypalTransactionSchema   (src/.../paypal.entity.ts)\n                        \n                        \n                            projectSchema   (src/.../project.entity.ts)\n                        \n                        \n                            supabase   (src/.../supabaseClient.ts)\n                        \n                        \n                            supabaseKey   (src/.../supabaseClient.ts)\n                        \n                        \n                            supabaseUrl   (src/.../supabaseClient.ts)\n                        \n                        \n                            TenantSchema   (src/.../tenant.entity.ts)\n                        \n                        \n                            userProjectSchema   (src/.../userProject.entity.ts)\n                        \n                        \n                            userSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret:\n    'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',\n  imageUrl:\n    'https://pqvvtmvqzwsewlhbgdzr.supabase.co/storage/v1/object/public/authgateimages/',\n}\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/paypal.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaypalTransactionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(PaypalTransaction)\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/project.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        projectSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Project)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/supabase/supabaseClient.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        supabase\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createClient(supabaseUrl, supabaseKey)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        supabaseKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBxdnZ0bXZxendzZXdsaGJnZHpyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTgyMTIxNjQsImV4cCI6MjAzMzc4ODE2NH0.jvdWxDzzzvoWfQ3pFqFLYmugrcQUcQEd2MVQ9eJQmpo'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        supabaseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://pqvvtmvqzwsewlhbgdzr.supabase.co'\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/tenant.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TenantSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Tenant)\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/userProject.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userProjectSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(UserProject)\n                    \n                \n\n\n        \n    \n\n    src/domain/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
